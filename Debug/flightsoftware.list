
flightsoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004654  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004824  08004824  00005824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004888  08004888  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004888  08004888  00005888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004890  08004890  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004890  08004890  00005890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004894  08004894  00005894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004898  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004678  20000060  080048f8  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046d8  080048f8  000066d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013059  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003451  00000000  00000000  000190e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0001c540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d3b  00000000  00000000  0001d698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e18  00000000  00000000  0001e3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015610  00000000  00000000  000481eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f59fa  00000000  00000000  0005d7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001531f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a4c  00000000  00000000  00153238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00157c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800480c 	.word	0x0800480c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	0800480c 	.word	0x0800480c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <fsw_main>:
 * @brief Create the list of workers for the FSW
 */
static void create_workers(void *arg);

extern "C" int fsw_main(void *arg)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
    create_workers(arg);
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 f817 	bl	800053c <_ZL14create_workersPv>
    return 0;
 800050e:	2300      	movs	r3, #0
}
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <_ZN11UartDebugWkC1Ev>:
#include "main.h"

/**
 * @brief Class for communicating over USART3 on the Nucleo for debugging purposes
 */
class UartDebugWk : public Worker
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f904 	bl	8000730 <_ZN6WorkerC1Ev>
 8000528:	4a03      	ldr	r2, [pc, #12]	@ (8000538 <_ZN11UartDebugWkC1Ev+0x20>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4618      	mov	r0, r3
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	08004848 	.word	0x08004848

0800053c <_ZL14create_workersPv>:
{
    __enable_irq();
}

void create_workers(void *arg)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af02      	add	r7, sp, #8
 8000542:	6078      	str	r0, [r7, #4]
    UartDebugWk uart_debug_wk;
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ffe5 	bl	8000518 <_ZN11UartDebugWkC1Ev>

    uart_debug_wk.Setup(arg);
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4618      	mov	r0, r3
 8000556:	f000 f81b 	bl	8000590 <_ZN11UartDebugWk5SetupEPv>
    //global_init();

    xTaskCreate(Worker::TaskFunction, "Uart Debug", 1000, &uart_debug_wk, 1, NULL);
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	2200      	movs	r2, #0
 8000560:	9201      	str	r2, [sp, #4]
 8000562:	2201      	movs	r2, #1
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800056a:	4907      	ldr	r1, [pc, #28]	@ (8000588 <_ZL14create_workersPv+0x4c>)
 800056c:	4807      	ldr	r0, [pc, #28]	@ (800058c <_ZL14create_workersPv+0x50>)
 800056e:	f003 f819 	bl	80035a4 <xTaskCreate>

    vTaskStartScheduler();
 8000572:	f003 f969 	bl	8003848 <vTaskStartScheduler>
}
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	4618      	mov	r0, r3
 800057c:	f000 f8b6 	bl	80006ec <_ZN11UartDebugWkD1Ev>
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	08004824 	.word	0x08004824
 800058c:	08000751 	.word	0x08000751

08000590 <_ZN11UartDebugWk5SetupEPv>:

// Clock at 36MHz, USART baud 115200, 
#define USARTDIV 3125

void UartDebugWk::Setup(void *arg)
{
 8000590:	b480      	push	{r7}
 8000592:	b087      	sub	sp, #28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
    // Enable clock for GPIOD
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN_Msk;
 800059a:	4b30      	ldr	r3, [pc, #192]	@ (800065c <_ZN11UartDebugWk5SetupEPv+0xcc>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a2f      	ldr	r2, [pc, #188]	@ (800065c <_ZN11UartDebugWk5SetupEPv+0xcc>)
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30

    // Enable clock for USART3
    RCC->APB1ENR |= RCC_APB1ENR_USART3EN_Msk;
 80005a6:	4b2d      	ldr	r3, [pc, #180]	@ (800065c <_ZN11UartDebugWk5SetupEPv+0xcc>)
 80005a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005aa:	4a2c      	ldr	r2, [pc, #176]	@ (800065c <_ZN11UartDebugWk5SetupEPv+0xcc>)
 80005ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005b0:	6413      	str	r3, [r2, #64]	@ 0x40

    // Configure PD8 and PD9 to be AF
    GPIOD->MODER &= ~(GPIO_MODER_MODER8 | GPIO_MODER_MODER9_Msk);
 80005b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000660 <_ZN11UartDebugWk5SetupEPv+0xd0>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a2a      	ldr	r2, [pc, #168]	@ (8000660 <_ZN11UartDebugWk5SetupEPv+0xd0>)
 80005b8:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80005bc:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (2 << GPIO_MODER_MODER8_Pos) | (2 << GPIO_MODER_MODER9_Pos);
 80005be:	4b28      	ldr	r3, [pc, #160]	@ (8000660 <_ZN11UartDebugWk5SetupEPv+0xd0>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a27      	ldr	r2, [pc, #156]	@ (8000660 <_ZN11UartDebugWk5SetupEPv+0xd0>)
 80005c4:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 80005c8:	6013      	str	r3, [r2, #0]

    // Configure AF to be USART, which is AF7
    GPIOD->AFR[1] &= ~(GPIO_AFRH_AFRH0_Msk | GPIO_AFRH_AFRH1_Msk);
 80005ca:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <_ZN11UartDebugWk5SetupEPv+0xd0>)
 80005cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005ce:	4a24      	ldr	r2, [pc, #144]	@ (8000660 <_ZN11UartDebugWk5SetupEPv+0xd0>)
 80005d0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80005d4:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOD->AFR[1] |= (7 << GPIO_AFRH_AFRH0_Pos) | (7 << GPIO_AFRH_AFRH1_Pos);
 80005d6:	4b22      	ldr	r3, [pc, #136]	@ (8000660 <_ZN11UartDebugWk5SetupEPv+0xd0>)
 80005d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005da:	4a21      	ldr	r2, [pc, #132]	@ (8000660 <_ZN11UartDebugWk5SetupEPv+0xd0>)
 80005dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80005e0:	6253      	str	r3, [r2, #36]	@ 0x24

    // Set USART baud
    USART3->BRR = USARTDIV;
 80005e2:	4b20      	ldr	r3, [pc, #128]	@ (8000664 <_ZN11UartDebugWk5SetupEPv+0xd4>)
 80005e4:	f640 4235 	movw	r2, #3125	@ 0xc35
 80005e8:	60da      	str	r2, [r3, #12]

    // Enable USART, transmition
    USART3->CR1 |= USART_CR1_UE_Msk | USART_CR1_TE_Msk;
 80005ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <_ZN11UartDebugWk5SetupEPv+0xd4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a1d      	ldr	r2, [pc, #116]	@ (8000664 <_ZN11UartDebugWk5SetupEPv+0xd4>)
 80005f0:	f043 0309 	orr.w	r3, r3, #9
 80005f4:	6013      	str	r3, [r2, #0]

    uint8_t buffer[] = "swaos\n";
 80005f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000668 <_ZN11UartDebugWk5SetupEPv+0xd8>)
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000600:	6018      	str	r0, [r3, #0]
 8000602:	3304      	adds	r3, #4
 8000604:	8019      	strh	r1, [r3, #0]
 8000606:	3302      	adds	r3, #2
 8000608:	0c0a      	lsrs	r2, r1, #16
 800060a:	701a      	strb	r2, [r3, #0]

	// Looks like a TIM2 IRQ not letting us get out of here or some other IRQ. Also HAL_Delay fucks shit up for some reason. Maybe try asyncronous shit?
	while(1)
	{
		//vTaskDelay(pdMS_TO_TICKS(1000));
		for(int i = 0; i < 10000; i++);
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	e002      	b.n	8000618 <_ZN11UartDebugWk5SetupEPv+0x88>
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	3301      	adds	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800061e:	4293      	cmp	r3, r2
 8000620:	ddf7      	ble.n	8000612 <_ZN11UartDebugWk5SetupEPv+0x82>
		for (unsigned int i = 0; i < sizeof(buffer); i++)
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	e015      	b.n	8000654 <_ZN11UartDebugWk5SetupEPv+0xc4>
		{
			while(!(USART3->ISR & USART_ISR_TC_Msk));
 8000628:	bf00      	nop
 800062a:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <_ZN11UartDebugWk5SetupEPv+0xd4>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000632:	2b00      	cmp	r3, #0
 8000634:	bf0c      	ite	eq
 8000636:	2301      	moveq	r3, #1
 8000638:	2300      	movne	r3, #0
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f4      	bne.n	800062a <_ZN11UartDebugWk5SetupEPv+0x9a>
			USART3->TDR = buffer[i];
 8000640:	f107 0208 	add.w	r2, r7, #8
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	4413      	add	r3, r2
 8000648:	781a      	ldrb	r2, [r3, #0]
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <_ZN11UartDebugWk5SetupEPv+0xd4>)
 800064c:	629a      	str	r2, [r3, #40]	@ 0x28
		for (unsigned int i = 0; i < sizeof(buffer); i++)
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	3301      	adds	r3, #1
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	2b06      	cmp	r3, #6
 8000658:	d9e6      	bls.n	8000628 <_ZN11UartDebugWk5SetupEPv+0x98>
		}
	}
 800065a:	e7d7      	b.n	800060c <_ZN11UartDebugWk5SetupEPv+0x7c>
 800065c:	40023800 	.word	0x40023800
 8000660:	40020c00 	.word	0x40020c00
 8000664:	40004800 	.word	0x40004800
 8000668:	08004830 	.word	0x08004830

0800066c <_ZN11UartDebugWk3RunEPv>:
}

void UartDebugWk::Run(void *arg)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
    uint8_t buffer[] = "swaos\n";
 8000676:	4a1b      	ldr	r2, [pc, #108]	@ (80006e4 <_ZN11UartDebugWk3RunEPv+0x78>)
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000680:	6018      	str	r0, [r3, #0]
 8000682:	3304      	adds	r3, #4
 8000684:	8019      	strh	r1, [r3, #0]
 8000686:	3302      	adds	r3, #2
 8000688:	0c0a      	lsrs	r2, r1, #16
 800068a:	701a      	strb	r2, [r3, #0]
    
    // Looks like a TIM2 IRQ not letting us get out of here or some other IRQ. Also HAL_Delay fucks shit up for some reason. Maybe try asyncronous shit?
    while(1)
    {
        //vTaskDelay(pdMS_TO_TICKS(1000));
        taskENTER_CRITICAL();
 800068c:	f003 fd06 	bl	800409c <vPortEnterCritical>
        for(int i = 0; i < 10000; i++);
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	e002      	b.n	800069c <_ZN11UartDebugWk3RunEPv+0x30>
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	3301      	adds	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	f242 720f 	movw	r2, #9999	@ 0x270f
 80006a2:	4293      	cmp	r3, r2
 80006a4:	ddf7      	ble.n	8000696 <_ZN11UartDebugWk3RunEPv+0x2a>
        for (unsigned int i = 0; i < sizeof(buffer); i++)
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	e015      	b.n	80006d8 <_ZN11UartDebugWk3RunEPv+0x6c>
        {
            while(!(USART3->ISR & USART_ISR_TC_Msk));
 80006ac:	bf00      	nop
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <_ZN11UartDebugWk3RunEPv+0x7c>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	bf0c      	ite	eq
 80006ba:	2301      	moveq	r3, #1
 80006bc:	2300      	movne	r3, #0
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d1f4      	bne.n	80006ae <_ZN11UartDebugWk3RunEPv+0x42>
            USART3->TDR = buffer[i];
 80006c4:	f107 0208 	add.w	r2, r7, #8
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	4413      	add	r3, r2
 80006cc:	781a      	ldrb	r2, [r3, #0]
 80006ce:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <_ZN11UartDebugWk3RunEPv+0x7c>)
 80006d0:	629a      	str	r2, [r3, #40]	@ 0x28
        for (unsigned int i = 0; i < sizeof(buffer); i++)
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	3301      	adds	r3, #1
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	2b06      	cmp	r3, #6
 80006dc:	d9e6      	bls.n	80006ac <_ZN11UartDebugWk3RunEPv+0x40>
        }
        taskEXIT_CRITICAL();
 80006de:	f003 fd13 	bl	8004108 <vPortExitCritical>
    }
 80006e2:	e7d3      	b.n	800068c <_ZN11UartDebugWk3RunEPv+0x20>
 80006e4:	08004830 	.word	0x08004830
 80006e8:	40004800 	.word	0x40004800

080006ec <_ZN11UartDebugWkD1Ev>:
}

UartDebugWk::~UartDebugWk() {}
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	4a05      	ldr	r2, [pc, #20]	@ (800070c <_ZN11UartDebugWkD1Ev+0x20>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 f83f 	bl	8000780 <_ZN6WorkerD1Ev>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	08004848 	.word	0x08004848

08000710 <_ZN11UartDebugWkD0Ev>:
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ffe7 	bl	80006ec <_ZN11UartDebugWkD1Ev>
 800071e:	2104      	movs	r1, #4
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f003 ff8d 	bl	8004640 <_ZdlPvj>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <_ZN6WorkerC1Ev>:
#include "worker.h"

Worker::Worker() {}
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	4a04      	ldr	r2, [pc, #16]	@ (800074c <_ZN6WorkerC1Ev+0x1c>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	08004860 	.word	0x08004860

08000750 <_ZN6Worker12TaskFunctionEPv>:

void Worker::TaskFunction(void *arg)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    Worker *wk_ptr = static_cast<Worker *>(arg);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	60fb      	str	r3, [r7, #12]
    wk_ptr->Run(NULL);
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3304      	adds	r3, #4
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2100      	movs	r1, #0
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	4798      	blx	r3
}
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <_ZN6Worker3RunEPv>:

void Worker::Run(void *arg)
{
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
    while(1);
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <_ZN6Worker3RunEPv+0xa>

08000780 <_ZN6WorkerD1Ev>:
}

 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	4a04      	ldr	r2, [pc, #16]	@ (800079c <_ZN6WorkerD1Ev+0x1c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	08004860 	.word	0x08004860

080007a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4a07      	ldr	r2, [pc, #28]	@ (80007cc <vApplicationGetIdleTaskMemory+0x2c>)
 80007b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	4a06      	ldr	r2, [pc, #24]	@ (80007d0 <vApplicationGetIdleTaskMemory+0x30>)
 80007b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2280      	movs	r2, #128	@ 0x80
 80007bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	2000007c 	.word	0x2000007c
 80007d0:	2000011c 	.word	0x2000011c

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d8:	f000 fb25 	bl	8000e26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007dc:	f000 f80a 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e0:	f000 f89e 	bl	8000920 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007e4:	f000 f86e 	bl	80008c4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */


  fsw_main(NULL);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff fe89 	bl	8000500 <fsw_main>
 80007ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	@ 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	2230      	movs	r2, #48	@ 0x30
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f003 ff34 	bl	8004670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000818:	f000 ff38 	bl	800168c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	4b27      	ldr	r3, [pc, #156]	@ (80008bc <SystemClock_Config+0xc8>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000820:	4a26      	ldr	r2, [pc, #152]	@ (80008bc <SystemClock_Config+0xc8>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	@ 0x40
 8000828:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <SystemClock_Config+0xc8>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000834:	4b22      	ldr	r3, [pc, #136]	@ (80008c0 <SystemClock_Config+0xcc>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800083c:	4a20      	ldr	r2, [pc, #128]	@ (80008c0 <SystemClock_Config+0xcc>)
 800083e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <SystemClock_Config+0xcc>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000850:	2301      	movs	r3, #1
 8000852:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000854:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000864:	2304      	movs	r3, #4
 8000866:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000868:	2348      	movs	r3, #72	@ 0x48
 800086a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086c:	2302      	movs	r3, #2
 800086e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000870:	2303      	movs	r3, #3
 8000872:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 0320 	add.w	r3, r7, #32
 8000878:	4618      	mov	r0, r3
 800087a:	f000 ff17 	bl	80016ac <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000884:	f000 f956 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2302      	movs	r3, #2
 800088e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000898:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	2102      	movs	r1, #2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f001 f9a5 	bl	8001bf4 <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008b0:	f000 f940 	bl	8000b34 <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3750      	adds	r7, #80	@ 0x50
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008c8:	4b14      	ldr	r3, [pc, #80]	@ (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008d0:	4b12      	ldr	r3, [pc, #72]	@ (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d2:	2206      	movs	r2, #6
 80008d4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d8:	2202      	movs	r2, #2
 80008da:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	@ (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008f4:	4b09      	ldr	r3, [pc, #36]	@ (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	@ (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	@ (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000908:	f000 fd85 	bl	8001416 <HAL_PCD_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000912:	f000 f90f 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000031c 	.word	0x2000031c

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	@ 0x30
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b70      	ldr	r3, [pc, #448]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a6f      	ldr	r2, [pc, #444]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b6d      	ldr	r3, [pc, #436]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	4b6a      	ldr	r3, [pc, #424]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a69      	ldr	r2, [pc, #420]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b67      	ldr	r3, [pc, #412]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b64      	ldr	r3, [pc, #400]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a63      	ldr	r2, [pc, #396]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b61      	ldr	r3, [pc, #388]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b5e      	ldr	r3, [pc, #376]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	4a5d      	ldr	r2, [pc, #372]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6313      	str	r3, [r2, #48]	@ 0x30
 800098a:	4b5b      	ldr	r3, [pc, #364]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	4b58      	ldr	r3, [pc, #352]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a57      	ldr	r2, [pc, #348]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b55      	ldr	r3, [pc, #340]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ae:	4b52      	ldr	r3, [pc, #328]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a51      	ldr	r2, [pc, #324]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 80009b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b4f      	ldr	r3, [pc, #316]	@ (8000af8 <MX_GPIO_Init+0x1d8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009cc:	484b      	ldr	r0, [pc, #300]	@ (8000afc <MX_GPIO_Init+0x1dc>)
 80009ce:	f000 fd09 	bl	80013e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2140      	movs	r1, #64	@ 0x40
 80009d6:	484a      	ldr	r0, [pc, #296]	@ (8000b00 <MX_GPIO_Init+0x1e0>)
 80009d8:	f000 fd04 	bl	80013e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4844      	ldr	r0, [pc, #272]	@ (8000b04 <MX_GPIO_Init+0x1e4>)
 80009f4:	f000 fb4a 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009f8:	2332      	movs	r3, #50	@ 0x32
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a08:	230b      	movs	r3, #11
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	483c      	ldr	r0, [pc, #240]	@ (8000b04 <MX_GPIO_Init+0x1e4>)
 8000a14:	f000 fb3a 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a18:	2386      	movs	r3, #134	@ 0x86
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a28:	230b      	movs	r3, #11
 8000a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4835      	ldr	r0, [pc, #212]	@ (8000b08 <MX_GPIO_Init+0x1e8>)
 8000a34:	f000 fb2a 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a38:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	482a      	ldr	r0, [pc, #168]	@ (8000afc <MX_GPIO_Init+0x1dc>)
 8000a52:	f000 fb1b 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a68:	230b      	movs	r3, #11
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4822      	ldr	r0, [pc, #136]	@ (8000afc <MX_GPIO_Init+0x1dc>)
 8000a74:	f000 fb0a 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a78:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	481d      	ldr	r0, [pc, #116]	@ (8000b0c <MX_GPIO_Init+0x1ec>)
 8000a96:	f000 faf9 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a9a:	2340      	movs	r3, #64	@ 0x40
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4813      	ldr	r0, [pc, #76]	@ (8000b00 <MX_GPIO_Init+0x1e0>)
 8000ab2:	f000 faeb 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ab6:	2380      	movs	r3, #128	@ 0x80
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <MX_GPIO_Init+0x1e0>)
 8000aca:	f000 fadf 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ace:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ae0:	230b      	movs	r3, #11
 8000ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_GPIO_Init+0x1e0>)
 8000aec:	f000 face 	bl	800108c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af0:	bf00      	nop
 8000af2:	3730      	adds	r7, #48	@ 0x30
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40021800 	.word	0x40021800
 8000b04:	40020800 	.word	0x40020800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020c00 	.word	0x40020c00

08000b10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d101      	bne.n	8000b26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b22:	f000 f98d 	bl	8000e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40010000 	.word	0x40010000

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <Error_Handler+0x8>

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4a:	4a10      	ldr	r2, [pc, #64]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b52:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b6a:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	210f      	movs	r1, #15
 8000b7a:	f06f 0001 	mvn.w	r0, #1
 8000b7e:	f000 fa5b 	bl	8001038 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b0ac      	sub	sp, #176	@ 0xb0
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba8:	f107 0318 	add.w	r3, r7, #24
 8000bac:	2284      	movs	r2, #132	@ 0x84
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 fd5d 	bl	8004670 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bbe:	d159      	bne.n	8000c74 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000bc0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000bc4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bcc:	f107 0318 	add.w	r3, r7, #24
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 fa53 	bl	800207c <HAL_RCCEx_PeriphCLKConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000bdc:	f7ff ffaa 	bl	8000b34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b26      	ldr	r3, [pc, #152]	@ (8000c7c <HAL_PCD_MspInit+0xec>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be4:	4a25      	ldr	r2, [pc, #148]	@ (8000c7c <HAL_PCD_MspInit+0xec>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bec:	4b23      	ldr	r3, [pc, #140]	@ (8000c7c <HAL_PCD_MspInit+0xec>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bf8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000bfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c12:	230a      	movs	r3, #10
 8000c14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4818      	ldr	r0, [pc, #96]	@ (8000c80 <HAL_PCD_MspInit+0xf0>)
 8000c20:	f000 fa34 	bl	800108c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4810      	ldr	r0, [pc, #64]	@ (8000c80 <HAL_PCD_MspInit+0xf0>)
 8000c40:	f000 fa24 	bl	800108c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c44:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <HAL_PCD_MspInit+0xec>)
 8000c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c48:	4a0c      	ldr	r2, [pc, #48]	@ (8000c7c <HAL_PCD_MspInit+0xec>)
 8000c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c4e:	6353      	str	r3, [r2, #52]	@ 0x34
 8000c50:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <HAL_PCD_MspInit+0xec>)
 8000c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <HAL_PCD_MspInit+0xec>)
 8000c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c60:	4a06      	ldr	r2, [pc, #24]	@ (8000c7c <HAL_PCD_MspInit+0xec>)
 8000c62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c66:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c68:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <HAL_PCD_MspInit+0xec>)
 8000c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c74:	bf00      	nop
 8000c76:	37b0      	adds	r7, #176	@ 0xb0
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000

08000c84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	@ 0x30
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c94:	4b2e      	ldr	r3, [pc, #184]	@ (8000d50 <HAL_InitTick+0xcc>)
 8000c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c98:	4a2d      	ldr	r2, [pc, #180]	@ (8000d50 <HAL_InitTick+0xcc>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8000d50 <HAL_InitTick+0xcc>)
 8000ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cac:	f107 020c 	add.w	r2, r7, #12
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 f9ae 	bl	8002018 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cbc:	f001 f998 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 8000cc0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cc4:	4a23      	ldr	r2, [pc, #140]	@ (8000d54 <HAL_InitTick+0xd0>)
 8000cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cca:	0c9b      	lsrs	r3, r3, #18
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cd0:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <HAL_InitTick+0xd4>)
 8000cd2:	4a22      	ldr	r2, [pc, #136]	@ (8000d5c <HAL_InitTick+0xd8>)
 8000cd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cd6:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <HAL_InitTick+0xd4>)
 8000cd8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cdc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cde:	4a1e      	ldr	r2, [pc, #120]	@ (8000d58 <HAL_InitTick+0xd4>)
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <HAL_InitTick+0xd4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cea:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <HAL_InitTick+0xd4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf0:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <HAL_InitTick+0xd4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000cf6:	4818      	ldr	r0, [pc, #96]	@ (8000d58 <HAL_InitTick+0xd4>)
 8000cf8:	f001 fdb0 	bl	800285c <HAL_TIM_Base_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000d02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d11b      	bne.n	8000d42 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d0a:	4813      	ldr	r0, [pc, #76]	@ (8000d58 <HAL_InitTick+0xd4>)
 8000d0c:	f001 fe08 	bl	8002920 <HAL_TIM_Base_Start_IT>
 8000d10:	4603      	mov	r3, r0
 8000d12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000d16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d111      	bne.n	8000d42 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d1e:	2019      	movs	r0, #25
 8000d20:	f000 f9a6 	bl	8001070 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b0f      	cmp	r3, #15
 8000d28:	d808      	bhi.n	8000d3c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	2019      	movs	r0, #25
 8000d30:	f000 f982 	bl	8001038 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d34:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <HAL_InitTick+0xdc>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	e002      	b.n	8000d42 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3730      	adds	r7, #48	@ 0x30
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800
 8000d54:	431bde83 	.word	0x431bde83
 8000d58:	200007fc 	.word	0x200007fc
 8000d5c:	40010000 	.word	0x40010000
 8000d60:	20000004 	.word	0x20000004

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <NMI_Handler+0x4>

08000d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000da0:	4802      	ldr	r0, [pc, #8]	@ (8000dac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000da2:	f001 fe35 	bl	8002a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200007fc 	.word	0x200007fc

08000db0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <SystemInit+0x20>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <SystemInit+0x20>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dd8:	f7ff ffea 	bl	8000db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dde:	490d      	ldr	r1, [pc, #52]	@ (8000e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e02:	f003 fc93 	bl	800472c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e06:	f7ff fce5 	bl	80007d4 <main>
  bx  lr    
 8000e0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e0c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e18:	08004898 	.word	0x08004898
  ldr r2, =_sbss
 8000e1c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e20:	200046d8 	.word	0x200046d8

08000e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC_IRQHandler>

08000e26 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	f000 f8f9 	bl	8001022 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e30:	200f      	movs	r0, #15
 8000e32:	f7ff ff27 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e36:	f7ff fe83 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	@ (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008
 8000e64:	20000848 	.word	0x20000848

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	@ (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000848 	.word	0x20000848

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff ffee 	bl	8000e68 <HAL_GetTick>
 8000e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_Delay+0x44>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ea6:	bf00      	nop
 8000ea8:	f7ff ffde 	bl	8000e68 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x40>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00
 8000f0c:	05fa0000 	.word	0x05fa0000

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4907      	ldr	r1, [pc, #28]	@ (8000f64 <__NVIC_EnableIRQ+0x38>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	@ (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	@ (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	@ 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	@ 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff4c 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800104a:	f7ff ff61 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 800104e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	6978      	ldr	r0, [r7, #20]
 8001056:	f7ff ffb1 	bl	8000fbc <NVIC_EncodePriority>
 800105a:	4602      	mov	r2, r0
 800105c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001060:	4611      	mov	r1, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff80 	bl	8000f68 <__NVIC_SetPriority>
}
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff54 	bl	8000f2c <__NVIC_EnableIRQ>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	@ 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	e175      	b.n	8001398 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	f040 8164 	bne.w	8001392 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d005      	beq.n	80010e2 <HAL_GPIO_Init+0x56>
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d130      	bne.n	8001144 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	f003 0201 	and.w	r2, r3, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b03      	cmp	r3, #3
 800114e:	d017      	beq.n	8001180 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d123      	bne.n	80011d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	69b9      	ldr	r1, [r7, #24]
 80011d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0203 	and.w	r2, r3, #3
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80be 	beq.w	8001392 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	4b66      	ldr	r3, [pc, #408]	@ (80013b0 <HAL_GPIO_Init+0x324>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121a:	4a65      	ldr	r2, [pc, #404]	@ (80013b0 <HAL_GPIO_Init+0x324>)
 800121c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001220:	6453      	str	r3, [r2, #68]	@ 0x44
 8001222:	4b63      	ldr	r3, [pc, #396]	@ (80013b0 <HAL_GPIO_Init+0x324>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800122e:	4a61      	ldr	r2, [pc, #388]	@ (80013b4 <HAL_GPIO_Init+0x328>)
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3302      	adds	r3, #2
 8001236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a58      	ldr	r2, [pc, #352]	@ (80013b8 <HAL_GPIO_Init+0x32c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d037      	beq.n	80012ca <HAL_GPIO_Init+0x23e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a57      	ldr	r2, [pc, #348]	@ (80013bc <HAL_GPIO_Init+0x330>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d031      	beq.n	80012c6 <HAL_GPIO_Init+0x23a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a56      	ldr	r2, [pc, #344]	@ (80013c0 <HAL_GPIO_Init+0x334>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d02b      	beq.n	80012c2 <HAL_GPIO_Init+0x236>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a55      	ldr	r2, [pc, #340]	@ (80013c4 <HAL_GPIO_Init+0x338>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d025      	beq.n	80012be <HAL_GPIO_Init+0x232>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a54      	ldr	r2, [pc, #336]	@ (80013c8 <HAL_GPIO_Init+0x33c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d01f      	beq.n	80012ba <HAL_GPIO_Init+0x22e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a53      	ldr	r2, [pc, #332]	@ (80013cc <HAL_GPIO_Init+0x340>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d019      	beq.n	80012b6 <HAL_GPIO_Init+0x22a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a52      	ldr	r2, [pc, #328]	@ (80013d0 <HAL_GPIO_Init+0x344>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d013      	beq.n	80012b2 <HAL_GPIO_Init+0x226>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a51      	ldr	r2, [pc, #324]	@ (80013d4 <HAL_GPIO_Init+0x348>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d00d      	beq.n	80012ae <HAL_GPIO_Init+0x222>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a50      	ldr	r2, [pc, #320]	@ (80013d8 <HAL_GPIO_Init+0x34c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d007      	beq.n	80012aa <HAL_GPIO_Init+0x21e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4f      	ldr	r2, [pc, #316]	@ (80013dc <HAL_GPIO_Init+0x350>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d101      	bne.n	80012a6 <HAL_GPIO_Init+0x21a>
 80012a2:	2309      	movs	r3, #9
 80012a4:	e012      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012a6:	230a      	movs	r3, #10
 80012a8:	e010      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012aa:	2308      	movs	r3, #8
 80012ac:	e00e      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012ae:	2307      	movs	r3, #7
 80012b0:	e00c      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012b2:	2306      	movs	r3, #6
 80012b4:	e00a      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012b6:	2305      	movs	r3, #5
 80012b8:	e008      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012ba:	2304      	movs	r3, #4
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012be:	2303      	movs	r3, #3
 80012c0:	e004      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012ca:	2300      	movs	r3, #0
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	f002 0203 	and.w	r2, r2, #3
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	4093      	lsls	r3, r2
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012dc:	4935      	ldr	r1, [pc, #212]	@ (80013b4 <HAL_GPIO_Init+0x328>)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ea:	4b3d      	ldr	r3, [pc, #244]	@ (80013e0 <HAL_GPIO_Init+0x354>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130e:	4a34      	ldr	r2, [pc, #208]	@ (80013e0 <HAL_GPIO_Init+0x354>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001314:	4b32      	ldr	r3, [pc, #200]	@ (80013e0 <HAL_GPIO_Init+0x354>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001338:	4a29      	ldr	r2, [pc, #164]	@ (80013e0 <HAL_GPIO_Init+0x354>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800133e:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <HAL_GPIO_Init+0x354>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001362:	4a1f      	ldr	r2, [pc, #124]	@ (80013e0 <HAL_GPIO_Init+0x354>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001368:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <HAL_GPIO_Init+0x354>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800138c:	4a14      	ldr	r2, [pc, #80]	@ (80013e0 <HAL_GPIO_Init+0x354>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3301      	adds	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2b0f      	cmp	r3, #15
 800139c:	f67f ae86 	bls.w	80010ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3724      	adds	r7, #36	@ 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40013800 	.word	0x40013800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40021400 	.word	0x40021400
 80013d0:	40021800 	.word	0x40021800
 80013d4:	40021c00 	.word	0x40021c00
 80013d8:	40022000 	.word	0x40022000
 80013dc:	40022400 	.word	0x40022400
 80013e0:	40013c00 	.word	0x40013c00

080013e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
 80013f0:	4613      	mov	r3, r2
 80013f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f4:	787b      	ldrb	r3, [r7, #1]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001400:	e003      	b.n	800140a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001402:	887b      	ldrh	r3, [r7, #2]
 8001404:	041a      	lsls	r2, r3, #16
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	619a      	str	r2, [r3, #24]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af02      	add	r7, sp, #8
 800141c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e108      	b.n	800163a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d106      	bne.n	8001448 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fba4 	bl	8000b90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2203      	movs	r2, #3
 800144c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001456:	d102      	bne.n	800145e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f001 fd28 	bl	8002eb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7c1a      	ldrb	r2, [r3, #16]
 8001470:	f88d 2000 	strb.w	r2, [sp]
 8001474:	3304      	adds	r3, #4
 8001476:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001478:	f001 fcc4 	bl	8002e04 <USB_CoreInit>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2202      	movs	r2, #2
 8001486:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0d5      	b.n	800163a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f001 fd20 	bl	8002eda <USB_SetCurrentMode>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2202      	movs	r2, #2
 80014a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0c6      	b.n	800163a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	e04a      	b.n	8001548 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4413      	add	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	440b      	add	r3, r1
 80014c0:	3315      	adds	r3, #21
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	3314      	adds	r3, #20
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	b298      	uxth	r0, r3
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	332e      	adds	r3, #46	@ 0x2e
 80014ee:	4602      	mov	r2, r0
 80014f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	3318      	adds	r3, #24
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	331c      	adds	r3, #28
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	3320      	adds	r3, #32
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	3324      	adds	r3, #36	@ 0x24
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	3301      	adds	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	791b      	ldrb	r3, [r3, #4]
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	429a      	cmp	r2, r3
 8001550:	d3af      	bcc.n	80014b2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e044      	b.n	80015e2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	3301      	adds	r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	791b      	ldrb	r3, [r3, #4]
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d3b5      	bcc.n	8001558 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7c1a      	ldrb	r2, [r3, #16]
 80015f4:	f88d 2000 	strb.w	r2, [sp]
 80015f8:	3304      	adds	r3, #4
 80015fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015fc:	f001 fcba 	bl	8002f74 <USB_DevInit>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2202      	movs	r2, #2
 800160a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e013      	b.n	800163a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7b1b      	ldrb	r3, [r3, #12]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d102      	bne.n	800162e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f80b 	bl	8001644 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f001 fe75 	bl	8003322 <USB_DevDisconnect>

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001672:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <HAL_PCDEx_ActivateLPM+0x44>)
 8001674:	4313      	orrs	r3, r2
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	10000003 	.word	0x10000003

0800168c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40007000 	.word	0x40007000

080016ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016b4:	2300      	movs	r3, #0
 80016b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e291      	b.n	8001be6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 8087 	beq.w	80017de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d0:	4b96      	ldr	r3, [pc, #600]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d00c      	beq.n	80016f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016dc:	4b93      	ldr	r3, [pc, #588]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d112      	bne.n	800170e <HAL_RCC_OscConfig+0x62>
 80016e8:	4b90      	ldr	r3, [pc, #576]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016f4:	d10b      	bne.n	800170e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f6:	4b8d      	ldr	r3, [pc, #564]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d06c      	beq.n	80017dc <HAL_RCC_OscConfig+0x130>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d168      	bne.n	80017dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e26b      	b.n	8001be6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001716:	d106      	bne.n	8001726 <HAL_RCC_OscConfig+0x7a>
 8001718:	4b84      	ldr	r3, [pc, #528]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a83      	ldr	r2, [pc, #524]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 800171e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	e02e      	b.n	8001784 <HAL_RCC_OscConfig+0xd8>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0x9c>
 800172e:	4b7f      	ldr	r3, [pc, #508]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a7e      	ldr	r2, [pc, #504]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b7c      	ldr	r3, [pc, #496]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a7b      	ldr	r2, [pc, #492]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001740:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e01d      	b.n	8001784 <HAL_RCC_OscConfig+0xd8>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001750:	d10c      	bne.n	800176c <HAL_RCC_OscConfig+0xc0>
 8001752:	4b76      	ldr	r3, [pc, #472]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a75      	ldr	r2, [pc, #468]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	4b73      	ldr	r3, [pc, #460]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a72      	ldr	r2, [pc, #456]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e00b      	b.n	8001784 <HAL_RCC_OscConfig+0xd8>
 800176c:	4b6f      	ldr	r3, [pc, #444]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a6e      	ldr	r2, [pc, #440]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b6c      	ldr	r3, [pc, #432]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a6b      	ldr	r2, [pc, #428]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 800177e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fb6c 	bl	8000e68 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001794:	f7ff fb68 	bl	8000e68 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	@ 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e21f      	b.n	8001be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	4b61      	ldr	r3, [pc, #388]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0xe8>
 80017b2:	e014      	b.n	80017de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7ff fb58 	bl	8000e68 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017bc:	f7ff fb54 	bl	8000e68 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	@ 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e20b      	b.n	8001be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ce:	4b57      	ldr	r3, [pc, #348]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x110>
 80017da:	e000      	b.n	80017de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d069      	beq.n	80018be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ea:	4b50      	ldr	r3, [pc, #320]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00b      	beq.n	800180e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017f6:	4b4d      	ldr	r3, [pc, #308]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d11c      	bne.n	800183c <HAL_RCC_OscConfig+0x190>
 8001802:	4b4a      	ldr	r3, [pc, #296]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d116      	bne.n	800183c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	4b47      	ldr	r3, [pc, #284]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <HAL_RCC_OscConfig+0x17a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d001      	beq.n	8001826 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e1df      	b.n	8001be6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001826:	4b41      	ldr	r3, [pc, #260]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	493d      	ldr	r1, [pc, #244]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183a:	e040      	b.n	80018be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d023      	beq.n	800188c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001844:	4b39      	ldr	r3, [pc, #228]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a38      	ldr	r2, [pc, #224]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fb0a 	bl	8000e68 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001858:	f7ff fb06 	bl	8000e68 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e1bd      	b.n	8001be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186a:	4b30      	ldr	r3, [pc, #192]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001876:	4b2d      	ldr	r3, [pc, #180]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4929      	ldr	r1, [pc, #164]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
 800188a:	e018      	b.n	80018be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188c:	4b27      	ldr	r3, [pc, #156]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a26      	ldr	r2, [pc, #152]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fae6 	bl	8000e68 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a0:	f7ff fae2 	bl	8000e68 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e199      	b.n	8001be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	4b1e      	ldr	r3, [pc, #120]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d038      	beq.n	800193c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d019      	beq.n	8001906 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d2:	4b16      	ldr	r3, [pc, #88]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 80018d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018d6:	4a15      	ldr	r2, [pc, #84]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018de:	f7ff fac3 	bl	8000e68 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e6:	f7ff fabf 	bl	8000e68 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e176      	b.n	8001be6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f8:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 80018fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x23a>
 8001904:	e01a      	b.n	800193c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800190a:	4a08      	ldr	r2, [pc, #32]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001912:	f7ff faa9 	bl	8000e68 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001918:	e00a      	b.n	8001930 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191a:	f7ff faa5 	bl	8000e68 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d903      	bls.n	8001930 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e15c      	b.n	8001be6 <HAL_RCC_OscConfig+0x53a>
 800192c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	4b91      	ldr	r3, [pc, #580]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1ee      	bne.n	800191a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80a4 	beq.w	8001a92 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10d      	bne.n	8001972 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b88      	ldr	r3, [pc, #544]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	4a87      	ldr	r2, [pc, #540]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001960:	6413      	str	r3, [r2, #64]	@ 0x40
 8001962:	4b85      	ldr	r3, [pc, #532]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800196e:	2301      	movs	r3, #1
 8001970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001972:	4b82      	ldr	r3, [pc, #520]	@ (8001b7c <HAL_RCC_OscConfig+0x4d0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d118      	bne.n	80019b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800197e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b7c <HAL_RCC_OscConfig+0x4d0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a7e      	ldr	r2, [pc, #504]	@ (8001b7c <HAL_RCC_OscConfig+0x4d0>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198a:	f7ff fa6d 	bl	8000e68 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001992:	f7ff fa69 	bl	8000e68 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b64      	cmp	r3, #100	@ 0x64
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e120      	b.n	8001be6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a4:	4b75      	ldr	r3, [pc, #468]	@ (8001b7c <HAL_RCC_OscConfig+0x4d0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x31a>
 80019b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019bc:	4a6e      	ldr	r2, [pc, #440]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019c4:	e02d      	b.n	8001a22 <HAL_RCC_OscConfig+0x376>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x33c>
 80019ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d2:	4a69      	ldr	r2, [pc, #420]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80019da:	4b67      	ldr	r3, [pc, #412]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 80019dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019de:	4a66      	ldr	r2, [pc, #408]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 80019e0:	f023 0304 	bic.w	r3, r3, #4
 80019e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80019e6:	e01c      	b.n	8001a22 <HAL_RCC_OscConfig+0x376>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d10c      	bne.n	8001a0a <HAL_RCC_OscConfig+0x35e>
 80019f0:	4b61      	ldr	r3, [pc, #388]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 80019f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019f4:	4a60      	ldr	r2, [pc, #384]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80019fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 80019fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a00:	4a5d      	ldr	r2, [pc, #372]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a08:	e00b      	b.n	8001a22 <HAL_RCC_OscConfig+0x376>
 8001a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a0e:	4a5a      	ldr	r2, [pc, #360]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a16:	4b58      	ldr	r3, [pc, #352]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1a:	4a57      	ldr	r2, [pc, #348]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001a1c:	f023 0304 	bic.w	r3, r3, #4
 8001a20:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d015      	beq.n	8001a56 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2a:	f7ff fa1d 	bl	8000e68 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a30:	e00a      	b.n	8001a48 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7ff fa19 	bl	8000e68 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e0ce      	b.n	8001be6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a48:	4b4b      	ldr	r3, [pc, #300]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0ee      	beq.n	8001a32 <HAL_RCC_OscConfig+0x386>
 8001a54:	e014      	b.n	8001a80 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a56:	f7ff fa07 	bl	8000e68 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5c:	e00a      	b.n	8001a74 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5e:	f7ff fa03 	bl	8000e68 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e0b8      	b.n	8001be6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a74:	4b40      	ldr	r3, [pc, #256]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1ee      	bne.n	8001a5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d105      	bne.n	8001a92 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a86:	4b3c      	ldr	r3, [pc, #240]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	4a3b      	ldr	r2, [pc, #236]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001a8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a90:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 80a4 	beq.w	8001be4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a9c:	4b36      	ldr	r3, [pc, #216]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d06b      	beq.n	8001b80 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d149      	bne.n	8001b44 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab0:	4b31      	ldr	r3, [pc, #196]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a30      	ldr	r2, [pc, #192]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001ab6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7ff f9d4 	bl	8000e68 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff f9d0 	bl	8000e68 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e087      	b.n	8001be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	4b28      	ldr	r3, [pc, #160]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69da      	ldr	r2, [r3, #28]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	019b      	lsls	r3, r3, #6
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	3b01      	subs	r3, #1
 8001afc:	041b      	lsls	r3, r3, #16
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b04:	061b      	lsls	r3, r3, #24
 8001b06:	4313      	orrs	r3, r2
 8001b08:	4a1b      	ldr	r2, [pc, #108]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001b0a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001b0e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b10:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a18      	ldr	r2, [pc, #96]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f9a4 	bl	8000e68 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff f9a0 	bl	8000e68 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e057      	b.n	8001be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x478>
 8001b42:	e04f      	b.n	8001be4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b44:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0b      	ldr	r2, [pc, #44]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001b4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff f98a 	bl	8000e68 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f986 	bl	8000e68 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e03d      	b.n	8001be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x4ac>
 8001b76:	e035      	b.n	8001be4 <HAL_RCC_OscConfig+0x538>
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf0 <HAL_RCC_OscConfig+0x544>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d028      	beq.n	8001be0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d121      	bne.n	8001be0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d11a      	bne.n	8001be0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bb6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d111      	bne.n	8001be0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d107      	bne.n	8001be0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bda:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0d0      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b6a      	ldr	r3, [pc, #424]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d910      	bls.n	8001c3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b67      	ldr	r3, [pc, #412]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 020f 	bic.w	r2, r3, #15
 8001c22:	4965      	ldr	r1, [pc, #404]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b63      	ldr	r3, [pc, #396]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0b8      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d020      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c54:	4b59      	ldr	r3, [pc, #356]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4a58      	ldr	r2, [pc, #352]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001c5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c6c:	4b53      	ldr	r3, [pc, #332]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4a52      	ldr	r2, [pc, #328]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001c72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c78:	4b50      	ldr	r3, [pc, #320]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	494d      	ldr	r1, [pc, #308]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d040      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	4b47      	ldr	r3, [pc, #284]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d115      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e07f      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb6:	4b41      	ldr	r3, [pc, #260]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d109      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e073      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e06b      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd6:	4b39      	ldr	r3, [pc, #228]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f023 0203 	bic.w	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4936      	ldr	r1, [pc, #216]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ce8:	f7ff f8be 	bl	8000e68 <HAL_GetTick>
 8001cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf0:	f7ff f8ba 	bl	8000e68 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e053      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	4b2d      	ldr	r3, [pc, #180]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 020c 	and.w	r2, r3, #12
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d1eb      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d18:	4b27      	ldr	r3, [pc, #156]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d210      	bcs.n	8001d48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b24      	ldr	r3, [pc, #144]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 020f 	bic.w	r2, r3, #15
 8001d2e:	4922      	ldr	r1, [pc, #136]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e032      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	4916      	ldr	r1, [pc, #88]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d009      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	490e      	ldr	r1, [pc, #56]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d86:	f000 f821 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	490a      	ldr	r1, [pc, #40]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1cc>)
 8001d98:	5ccb      	ldrb	r3, [r1, r3]
 8001d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9e:	4a09      	ldr	r2, [pc, #36]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1d0>)
 8001da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001da2:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1d4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe ff6c 	bl	8000c84 <HAL_InitTick>

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023c00 	.word	0x40023c00
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	08004870 	.word	0x08004870
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	20000004 	.word	0x20000004

08001dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dd0:	b094      	sub	sp, #80	@ 0x50
 8001dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dd8:	2300      	movs	r3, #0
 8001dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ddc:	2300      	movs	r3, #0
 8001dde:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de4:	4b79      	ldr	r3, [pc, #484]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d00d      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x40>
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	f200 80e1 	bhi.w	8001fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x34>
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d003      	beq.n	8001e06 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dfe:	e0db      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e00:	4b73      	ldr	r3, [pc, #460]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e04:	e0db      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e06:	4b73      	ldr	r3, [pc, #460]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e0a:	e0d8      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e0c:	4b6f      	ldr	r3, [pc, #444]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e14:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e16:	4b6d      	ldr	r3, [pc, #436]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d063      	beq.n	8001eea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e22:	4b6a      	ldr	r3, [pc, #424]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	099b      	lsrs	r3, r3, #6
 8001e28:	2200      	movs	r2, #0
 8001e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e36:	2300      	movs	r3, #0
 8001e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e3e:	4622      	mov	r2, r4
 8001e40:	462b      	mov	r3, r5
 8001e42:	f04f 0000 	mov.w	r0, #0
 8001e46:	f04f 0100 	mov.w	r1, #0
 8001e4a:	0159      	lsls	r1, r3, #5
 8001e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e50:	0150      	lsls	r0, r2, #5
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4621      	mov	r1, r4
 8001e58:	1a51      	subs	r1, r2, r1
 8001e5a:	6139      	str	r1, [r7, #16]
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e70:	4659      	mov	r1, fp
 8001e72:	018b      	lsls	r3, r1, #6
 8001e74:	4651      	mov	r1, sl
 8001e76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e7a:	4651      	mov	r1, sl
 8001e7c:	018a      	lsls	r2, r1, #6
 8001e7e:	4651      	mov	r1, sl
 8001e80:	ebb2 0801 	subs.w	r8, r2, r1
 8001e84:	4659      	mov	r1, fp
 8001e86:	eb63 0901 	sbc.w	r9, r3, r1
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	f04f 0300 	mov.w	r3, #0
 8001e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e9e:	4690      	mov	r8, r2
 8001ea0:	4699      	mov	r9, r3
 8001ea2:	4623      	mov	r3, r4
 8001ea4:	eb18 0303 	adds.w	r3, r8, r3
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	462b      	mov	r3, r5
 8001eac:	eb49 0303 	adc.w	r3, r9, r3
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	024b      	lsls	r3, r1, #9
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ec8:	4621      	mov	r1, r4
 8001eca:	024a      	lsls	r2, r1, #9
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ed8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001edc:	f7fe f998 	bl	8000210 <__aeabi_uldivmod>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ee8:	e058      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eea:	4b38      	ldr	r3, [pc, #224]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	099b      	lsrs	r3, r3, #6
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001efa:	623b      	str	r3, [r7, #32]
 8001efc:	2300      	movs	r3, #0
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f04:	4642      	mov	r2, r8
 8001f06:	464b      	mov	r3, r9
 8001f08:	f04f 0000 	mov.w	r0, #0
 8001f0c:	f04f 0100 	mov.w	r1, #0
 8001f10:	0159      	lsls	r1, r3, #5
 8001f12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f16:	0150      	lsls	r0, r2, #5
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4641      	mov	r1, r8
 8001f1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f22:	4649      	mov	r1, r9
 8001f24:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f3c:	ebb2 040a 	subs.w	r4, r2, sl
 8001f40:	eb63 050b 	sbc.w	r5, r3, fp
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	00eb      	lsls	r3, r5, #3
 8001f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f52:	00e2      	lsls	r2, r4, #3
 8001f54:	4614      	mov	r4, r2
 8001f56:	461d      	mov	r5, r3
 8001f58:	4643      	mov	r3, r8
 8001f5a:	18e3      	adds	r3, r4, r3
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	464b      	mov	r3, r9
 8001f60:	eb45 0303 	adc.w	r3, r5, r3
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f72:	4629      	mov	r1, r5
 8001f74:	028b      	lsls	r3, r1, #10
 8001f76:	4621      	mov	r1, r4
 8001f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	028a      	lsls	r2, r1, #10
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f86:	2200      	movs	r2, #0
 8001f88:	61bb      	str	r3, [r7, #24]
 8001f8a:	61fa      	str	r2, [r7, #28]
 8001f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f90:	f7fe f93e 	bl	8000210 <__aeabi_uldivmod>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4613      	mov	r3, r2
 8001f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	0c1b      	lsrs	r3, r3, #16
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001fac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fb6:	e002      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3750      	adds	r7, #80	@ 0x50
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	00f42400 	.word	0x00f42400
 8001fd4:	007a1200 	.word	0x007a1200

08001fd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	@ (8001fec <HAL_RCC_GetHCLKFreq+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000000 	.word	0x20000000

08001ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ff4:	f7ff fff0 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0b5b      	lsrs	r3, r3, #13
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4903      	ldr	r1, [pc, #12]	@ (8002014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	08004880 	.word	0x08004880

08002018 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	220f      	movs	r2, #15
 8002026:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002028:	4b12      	ldr	r3, [pc, #72]	@ (8002074 <HAL_RCC_GetClockConfig+0x5c>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002034:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <HAL_RCC_GetClockConfig+0x5c>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <HAL_RCC_GetClockConfig+0x5c>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800204c:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_RCC_GetClockConfig+0x5c>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	08db      	lsrs	r3, r3, #3
 8002052:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800205a:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <HAL_RCC_GetClockConfig+0x60>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 020f 	and.w	r2, r3, #15
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	601a      	str	r2, [r3, #0]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	40023c00 	.word	0x40023c00

0800207c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d012      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020a4:	4b69      	ldr	r3, [pc, #420]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	4a68      	ldr	r2, [pc, #416]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020aa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80020ae:	6093      	str	r3, [r2, #8]
 80020b0:	4b66      	ldr	r3, [pc, #408]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020b8:	4964      	ldr	r1, [pc, #400]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80020c6:	2301      	movs	r3, #1
 80020c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d017      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020d6:	4b5d      	ldr	r3, [pc, #372]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e4:	4959      	ldr	r1, [pc, #356]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020f4:	d101      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002102:	2301      	movs	r3, #1
 8002104:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d017      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002112:	4b4e      	ldr	r3, [pc, #312]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002118:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	494a      	ldr	r1, [pc, #296]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002130:	d101      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002132:	2301      	movs	r3, #1
 8002134:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800213e:	2301      	movs	r3, #1
 8002140:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800214e:	2301      	movs	r3, #1
 8002150:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 808b 	beq.w	8002276 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002160:	4b3a      	ldr	r3, [pc, #232]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	4a39      	ldr	r2, [pc, #228]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800216a:	6413      	str	r3, [r2, #64]	@ 0x40
 800216c:	4b37      	ldr	r3, [pc, #220]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002178:	4b35      	ldr	r3, [pc, #212]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a34      	ldr	r2, [pc, #208]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800217e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002182:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002184:	f7fe fe70 	bl	8000e68 <HAL_GetTick>
 8002188:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218c:	f7fe fe6c 	bl	8000e68 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	@ 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e357      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800219e:	4b2c      	ldr	r3, [pc, #176]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021aa:	4b28      	ldr	r3, [pc, #160]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d035      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d02e      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021c8:	4b20      	ldr	r3, [pc, #128]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021d2:	4b1e      	ldr	r3, [pc, #120]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d6:	4a1d      	ldr	r2, [pc, #116]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021dc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021de:	4b1b      	ldr	r3, [pc, #108]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e2:	4a1a      	ldr	r2, [pc, #104]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80021ea:	4a18      	ldr	r2, [pc, #96]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021f0:	4b16      	ldr	r3, [pc, #88]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d114      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe fe34 	bl	8000e68 <HAL_GetTick>
 8002200:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002202:	e00a      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002204:	f7fe fe30 	bl	8000e68 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e319      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221a:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0ee      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800222e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002232:	d111      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002234:	4b05      	ldr	r3, [pc, #20]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002240:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002242:	400b      	ands	r3, r1
 8002244:	4901      	ldr	r1, [pc, #4]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002246:	4313      	orrs	r3, r2
 8002248:	608b      	str	r3, [r1, #8]
 800224a:	e00b      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800224c:	40023800 	.word	0x40023800
 8002250:	40007000 	.word	0x40007000
 8002254:	0ffffcff 	.word	0x0ffffcff
 8002258:	4baa      	ldr	r3, [pc, #680]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4aa9      	ldr	r2, [pc, #676]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800225e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002262:	6093      	str	r3, [r2, #8]
 8002264:	4ba7      	ldr	r3, [pc, #668]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002266:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002270:	49a4      	ldr	r1, [pc, #656]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002272:	4313      	orrs	r3, r2
 8002274:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b00      	cmp	r3, #0
 8002280:	d010      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002282:	4ba0      	ldr	r3, [pc, #640]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002284:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002288:	4a9e      	ldr	r2, [pc, #632]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800228a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800228e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002292:	4b9c      	ldr	r3, [pc, #624]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002294:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229c:	4999      	ldr	r1, [pc, #612]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022b0:	4b94      	ldr	r3, [pc, #592]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022be:	4991      	ldr	r1, [pc, #580]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022d2:	4b8c      	ldr	r3, [pc, #560]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022e0:	4988      	ldr	r1, [pc, #544]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022f4:	4b83      	ldr	r3, [pc, #524]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002302:	4980      	ldr	r1, [pc, #512]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002316:	4b7b      	ldr	r3, [pc, #492]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002324:	4977      	ldr	r1, [pc, #476]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002338:	4b72      	ldr	r3, [pc, #456]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233e:	f023 0203 	bic.w	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	496f      	ldr	r1, [pc, #444]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800235a:	4b6a      	ldr	r3, [pc, #424]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800235c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002360:	f023 020c 	bic.w	r2, r3, #12
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002368:	4966      	ldr	r1, [pc, #408]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800237c:	4b61      	ldr	r3, [pc, #388]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002382:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238a:	495e      	ldr	r1, [pc, #376]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800239e:	4b59      	ldr	r3, [pc, #356]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ac:	4955      	ldr	r1, [pc, #340]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023c0:	4b50      	ldr	r3, [pc, #320]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ce:	494d      	ldr	r1, [pc, #308]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80023e2:	4b48      	ldr	r3, [pc, #288]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f0:	4944      	ldr	r1, [pc, #272]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002404:	4b3f      	ldr	r3, [pc, #252]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002412:	493c      	ldr	r1, [pc, #240]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002426:	4b37      	ldr	r3, [pc, #220]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800242c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002434:	4933      	ldr	r1, [pc, #204]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002448:	4b2e      	ldr	r3, [pc, #184]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002456:	492b      	ldr	r1, [pc, #172]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d011      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800246a:	4b26      	ldr	r3, [pc, #152]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002470:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002478:	4922      	ldr	r1, [pc, #136]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002484:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002488:	d101      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800248a:	2301      	movs	r3, #1
 800248c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800249a:	2301      	movs	r3, #1
 800249c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024aa:	4b16      	ldr	r3, [pc, #88]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024b8:	4912      	ldr	r1, [pc, #72]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00b      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024dc:	4909      	ldr	r1, [pc, #36]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d006      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 80d9 	beq.w	80026aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024f8:	4b02      	ldr	r3, [pc, #8]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a01      	ldr	r2, [pc, #4]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002502:	e001      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002504:	40023800 	.word	0x40023800
 8002508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800250a:	f7fe fcad 	bl	8000e68 <HAL_GetTick>
 800250e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002512:	f7fe fca9 	bl	8000e68 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b64      	cmp	r3, #100	@ 0x64
 800251e:	d901      	bls.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e194      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002524:	4b6c      	ldr	r3, [pc, #432]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f0      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d021      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002540:	2b00      	cmp	r3, #0
 8002542:	d11d      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002544:	4b64      	ldr	r3, [pc, #400]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800254a:	0c1b      	lsrs	r3, r3, #16
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002552:	4b61      	ldr	r3, [pc, #388]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002554:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002558:	0e1b      	lsrs	r3, r3, #24
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	019a      	lsls	r2, r3, #6
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	041b      	lsls	r3, r3, #16
 800256a:	431a      	orrs	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	061b      	lsls	r3, r3, #24
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	071b      	lsls	r3, r3, #28
 8002578:	4957      	ldr	r1, [pc, #348]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002590:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d02e      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025aa:	d129      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025ac:	4b4a      	ldr	r3, [pc, #296]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025b2:	0c1b      	lsrs	r3, r3, #16
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025ba:	4b47      	ldr	r3, [pc, #284]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025c0:	0f1b      	lsrs	r3, r3, #28
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	019a      	lsls	r2, r3, #6
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	041b      	lsls	r3, r3, #16
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	061b      	lsls	r3, r3, #24
 80025da:	431a      	orrs	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	071b      	lsls	r3, r3, #28
 80025e0:	493d      	ldr	r1, [pc, #244]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80025e8:	4b3b      	ldr	r3, [pc, #236]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025ee:	f023 021f 	bic.w	r2, r3, #31
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f6:	3b01      	subs	r3, #1
 80025f8:	4937      	ldr	r1, [pc, #220]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01d      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800260c:	4b32      	ldr	r3, [pc, #200]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800260e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002612:	0e1b      	lsrs	r3, r3, #24
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800261a:	4b2f      	ldr	r3, [pc, #188]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800261c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002620:	0f1b      	lsrs	r3, r3, #28
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	019a      	lsls	r2, r3, #6
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	041b      	lsls	r3, r3, #16
 8002634:	431a      	orrs	r2, r3
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	431a      	orrs	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	071b      	lsls	r3, r3, #28
 8002640:	4925      	ldr	r1, [pc, #148]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d011      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	019a      	lsls	r2, r3, #6
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	041b      	lsls	r3, r3, #16
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	061b      	lsls	r3, r3, #24
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	071b      	lsls	r3, r3, #28
 8002670:	4919      	ldr	r1, [pc, #100]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002678:	4b17      	ldr	r3, [pc, #92]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a16      	ldr	r2, [pc, #88]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800267e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002684:	f7fe fbf0 	bl	8000e68 <HAL_GetTick>
 8002688:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800268c:	f7fe fbec 	bl	8000e68 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	@ 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e0d7      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800269e:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	f040 80cd 	bne.w	800284c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80026b2:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a08      	ldr	r2, [pc, #32]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026be:	f7fe fbd3 	bl	8000e68 <HAL_GetTick>
 80026c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026c4:	e00a      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026c6:	f7fe fbcf 	bl	8000e68 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b64      	cmp	r3, #100	@ 0x64
 80026d2:	d903      	bls.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e0ba      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80026d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026e8:	d0ed      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x682>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002706:	2b00      	cmp	r3, #0
 8002708:	d02e      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d12a      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002712:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002718:	0c1b      	lsrs	r3, r3, #16
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002720:	4b4d      	ldr	r3, [pc, #308]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002726:	0f1b      	lsrs	r3, r3, #28
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	019a      	lsls	r2, r3, #6
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	041b      	lsls	r3, r3, #16
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	061b      	lsls	r3, r3, #24
 8002740:	431a      	orrs	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	071b      	lsls	r3, r3, #28
 8002746:	4944      	ldr	r1, [pc, #272]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800274e:	4b42      	ldr	r3, [pc, #264]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002750:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002754:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275c:	3b01      	subs	r3, #1
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	493d      	ldr	r1, [pc, #244]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d022      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002778:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800277c:	d11d      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800277e:	4b36      	ldr	r3, [pc, #216]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002784:	0e1b      	lsrs	r3, r3, #24
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800278c:	4b32      	ldr	r3, [pc, #200]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002792:	0f1b      	lsrs	r3, r3, #28
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	019a      	lsls	r2, r3, #6
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	041b      	lsls	r3, r3, #16
 80027a6:	431a      	orrs	r2, r3
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	061b      	lsls	r3, r3, #24
 80027ac:	431a      	orrs	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	071b      	lsls	r3, r3, #28
 80027b2:	4929      	ldr	r1, [pc, #164]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d028      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027c6:	4b24      	ldr	r3, [pc, #144]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027cc:	0e1b      	lsrs	r3, r3, #24
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027d4:	4b20      	ldr	r3, [pc, #128]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027da:	0c1b      	lsrs	r3, r3, #16
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	019a      	lsls	r2, r3, #6
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	041b      	lsls	r3, r3, #16
 80027ec:	431a      	orrs	r2, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	061b      	lsls	r3, r3, #24
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	071b      	lsls	r3, r3, #28
 80027fa:	4917      	ldr	r1, [pc, #92]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002802:	4b15      	ldr	r3, [pc, #84]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002804:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002808:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002810:	4911      	ldr	r1, [pc, #68]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002818:	4b0f      	ldr	r3, [pc, #60]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0e      	ldr	r2, [pc, #56]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800281e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002822:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002824:	f7fe fb20 	bl	8000e68 <HAL_GetTick>
 8002828:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800282c:	f7fe fb1c 	bl	8000e68 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	@ 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e007      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800283e:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800284a:	d1ef      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800

0800285c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e049      	b.n	8002902 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f841 	bl	800290a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3304      	adds	r3, #4
 8002898:	4619      	mov	r1, r3
 800289a:	4610      	mov	r0, r2
 800289c:	f000 f9e8 	bl	8002c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b01      	cmp	r3, #1
 8002932:	d001      	beq.n	8002938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e054      	b.n	80029e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a26      	ldr	r2, [pc, #152]	@ (80029f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d022      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x80>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002962:	d01d      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x80>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a22      	ldr	r2, [pc, #136]	@ (80029f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d018      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x80>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a21      	ldr	r2, [pc, #132]	@ (80029f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d013      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x80>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1f      	ldr	r2, [pc, #124]	@ (80029fc <HAL_TIM_Base_Start_IT+0xdc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00e      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x80>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1e      	ldr	r2, [pc, #120]	@ (8002a00 <HAL_TIM_Base_Start_IT+0xe0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x80>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1c      	ldr	r2, [pc, #112]	@ (8002a04 <HAL_TIM_Base_Start_IT+0xe4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d004      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x80>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1b      	ldr	r2, [pc, #108]	@ (8002a08 <HAL_TIM_Base_Start_IT+0xe8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d115      	bne.n	80029cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	4b19      	ldr	r3, [pc, #100]	@ (8002a0c <HAL_TIM_Base_Start_IT+0xec>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d015      	beq.n	80029de <HAL_TIM_Base_Start_IT+0xbe>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b8:	d011      	beq.n	80029de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0201 	orr.w	r2, r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ca:	e008      	b.n	80029de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	e000      	b.n	80029e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40000400 	.word	0x40000400
 80029f8:	40000800 	.word	0x40000800
 80029fc:	40000c00 	.word	0x40000c00
 8002a00:	40010400 	.word	0x40010400
 8002a04:	40014000 	.word	0x40014000
 8002a08:	40001800 	.word	0x40001800
 8002a0c:	00010007 	.word	0x00010007

08002a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d020      	beq.n	8002a74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01b      	beq.n	8002a74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0202 	mvn.w	r2, #2
 8002a44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f8e9 	bl	8002c32 <HAL_TIM_IC_CaptureCallback>
 8002a60:	e005      	b.n	8002a6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f8db 	bl	8002c1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f8ec 	bl	8002c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d020      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01b      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0204 	mvn.w	r2, #4
 8002a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2202      	movs	r2, #2
 8002a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f8c3 	bl	8002c32 <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f8b5 	bl	8002c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f8c6 	bl	8002c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d020      	beq.n	8002b0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01b      	beq.n	8002b0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0208 	mvn.w	r2, #8
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f89d 	bl	8002c32 <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f88f 	bl	8002c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f8a0 	bl	8002c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d020      	beq.n	8002b58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d01b      	beq.n	8002b58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0210 	mvn.w	r2, #16
 8002b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f877 	bl	8002c32 <HAL_TIM_IC_CaptureCallback>
 8002b44:	e005      	b.n	8002b52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f869 	bl	8002c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f87a 	bl	8002c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00c      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0201 	mvn.w	r2, #1
 8002b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fd ffca 	bl	8000b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d104      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00c      	beq.n	8002baa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f919 	bl	8002ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00c      	beq.n	8002bce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d007      	beq.n	8002bce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f911 	bl	8002df0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00c      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f834 	bl	8002c5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00c      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f06f 0220 	mvn.w	r2, #32
 8002c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8d9 	bl	8002dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a46      	ldr	r2, [pc, #280]	@ (8002d9c <TIM_Base_SetConfig+0x12c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d013      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c8e:	d00f      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a43      	ldr	r2, [pc, #268]	@ (8002da0 <TIM_Base_SetConfig+0x130>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00b      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a42      	ldr	r2, [pc, #264]	@ (8002da4 <TIM_Base_SetConfig+0x134>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d007      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a41      	ldr	r2, [pc, #260]	@ (8002da8 <TIM_Base_SetConfig+0x138>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d003      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a40      	ldr	r2, [pc, #256]	@ (8002dac <TIM_Base_SetConfig+0x13c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d108      	bne.n	8002cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a35      	ldr	r2, [pc, #212]	@ (8002d9c <TIM_Base_SetConfig+0x12c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d02b      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd0:	d027      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a32      	ldr	r2, [pc, #200]	@ (8002da0 <TIM_Base_SetConfig+0x130>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d023      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a31      	ldr	r2, [pc, #196]	@ (8002da4 <TIM_Base_SetConfig+0x134>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01f      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a30      	ldr	r2, [pc, #192]	@ (8002da8 <TIM_Base_SetConfig+0x138>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01b      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2f      	ldr	r2, [pc, #188]	@ (8002dac <TIM_Base_SetConfig+0x13c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d017      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8002db0 <TIM_Base_SetConfig+0x140>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8002db4 <TIM_Base_SetConfig+0x144>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00f      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a2c      	ldr	r2, [pc, #176]	@ (8002db8 <TIM_Base_SetConfig+0x148>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00b      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8002dbc <TIM_Base_SetConfig+0x14c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc0 <TIM_Base_SetConfig+0x150>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d003      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a29      	ldr	r2, [pc, #164]	@ (8002dc4 <TIM_Base_SetConfig+0x154>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d108      	bne.n	8002d34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a10      	ldr	r2, [pc, #64]	@ (8002d9c <TIM_Base_SetConfig+0x12c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d003      	beq.n	8002d68 <TIM_Base_SetConfig+0xf8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a12      	ldr	r2, [pc, #72]	@ (8002dac <TIM_Base_SetConfig+0x13c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d103      	bne.n	8002d70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d105      	bne.n	8002d8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f023 0201 	bic.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	611a      	str	r2, [r3, #16]
  }
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40000800 	.word	0x40000800
 8002da8:	40000c00 	.word	0x40000c00
 8002dac:	40010400 	.word	0x40010400
 8002db0:	40014000 	.word	0x40014000
 8002db4:	40014400 	.word	0x40014400
 8002db8:	40014800 	.word	0x40014800
 8002dbc:	40001800 	.word	0x40001800
 8002dc0:	40001c00 	.word	0x40001c00
 8002dc4:	40002000 	.word	0x40002000

08002dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e04:	b084      	sub	sp, #16
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	f107 001c 	add.w	r0, r7, #28
 8002e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e16:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d121      	bne.n	8002e62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	4b21      	ldr	r3, [pc, #132]	@ (8002eb4 <USB_CoreInit+0xb0>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002e42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d105      	bne.n	8002e56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fa92 	bl	8003380 <USB_CoreReset>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	73fb      	strb	r3, [r7, #15]
 8002e60:	e010      	b.n	8002e84 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fa86 	bl	8003380 <USB_CoreReset>
 8002e74:	4603      	mov	r3, r0
 8002e76:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8002e84:	7fbb      	ldrb	r3, [r7, #30]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d10b      	bne.n	8002ea2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f043 0206 	orr.w	r2, r3, #6
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f043 0220 	orr.w	r2, r3, #32
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002eae:	b004      	add	sp, #16
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	ffbdffbf 	.word	0xffbdffbf

08002eb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f023 0201 	bic.w	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d115      	bne.n	8002f28 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002f08:	200a      	movs	r0, #10
 8002f0a:	f7fd ffb9 	bl	8000e80 <HAL_Delay>
      ms += 10U;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	330a      	adds	r3, #10
 8002f12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fa25 	bl	8003364 <USB_GetMode>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d01e      	beq.n	8002f5e <USB_SetCurrentMode+0x84>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2bc7      	cmp	r3, #199	@ 0xc7
 8002f24:	d9f0      	bls.n	8002f08 <USB_SetCurrentMode+0x2e>
 8002f26:	e01a      	b.n	8002f5e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d115      	bne.n	8002f5a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002f3a:	200a      	movs	r0, #10
 8002f3c:	f7fd ffa0 	bl	8000e80 <HAL_Delay>
      ms += 10U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	330a      	adds	r3, #10
 8002f44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fa0c 	bl	8003364 <USB_GetMode>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <USB_SetCurrentMode+0x84>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2bc7      	cmp	r3, #199	@ 0xc7
 8002f56:	d9f0      	bls.n	8002f3a <USB_SetCurrentMode+0x60>
 8002f58:	e001      	b.n	8002f5e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e005      	b.n	8002f6a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2bc8      	cmp	r3, #200	@ 0xc8
 8002f62:	d101      	bne.n	8002f68 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f74:	b084      	sub	sp, #16
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	e009      	b.n	8002fa8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	3340      	adds	r3, #64	@ 0x40
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2b0e      	cmp	r3, #14
 8002fac:	d9f2      	bls.n	8002f94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002fae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d11c      	bne.n	8002ff0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e005      	b.n	8002ffc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003002:	461a      	mov	r2, r3
 8003004:	2300      	movs	r3, #0
 8003006:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003008:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800300c:	2b01      	cmp	r3, #1
 800300e:	d10d      	bne.n	800302c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003014:	2b00      	cmp	r3, #0
 8003016:	d104      	bne.n	8003022 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003018:	2100      	movs	r1, #0
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f968 	bl	80032f0 <USB_SetDevSpeed>
 8003020:	e008      	b.n	8003034 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003022:	2101      	movs	r1, #1
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f963 	bl	80032f0 <USB_SetDevSpeed>
 800302a:	e003      	b.n	8003034 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800302c:	2103      	movs	r1, #3
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f95e 	bl	80032f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003034:	2110      	movs	r1, #16
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f8fa 	bl	8003230 <USB_FlushTxFifo>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f924 	bl	8003294 <USB_FlushRxFifo>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800305c:	461a      	mov	r2, r3
 800305e:	2300      	movs	r3, #0
 8003060:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003068:	461a      	mov	r2, r3
 800306a:	2300      	movs	r3, #0
 800306c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003074:	461a      	mov	r2, r3
 8003076:	2300      	movs	r3, #0
 8003078:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	e043      	b.n	8003108 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003092:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003096:	d118      	bne.n	80030ca <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030aa:	461a      	mov	r2, r3
 80030ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e013      	b.n	80030dc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030c0:	461a      	mov	r2, r3
 80030c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	e008      	b.n	80030dc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030d6:	461a      	mov	r2, r3
 80030d8:	2300      	movs	r3, #0
 80030da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030e8:	461a      	mov	r2, r3
 80030ea:	2300      	movs	r3, #0
 80030ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030fa:	461a      	mov	r2, r3
 80030fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003100:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	3301      	adds	r3, #1
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800310c:	461a      	mov	r2, r3
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4293      	cmp	r3, r2
 8003112:	d3b5      	bcc.n	8003080 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	e043      	b.n	80031a2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4413      	add	r3, r2
 8003122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800312c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003130:	d118      	bne.n	8003164 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10a      	bne.n	800314e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003144:	461a      	mov	r2, r3
 8003146:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	e013      	b.n	8003176 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800315a:	461a      	mov	r2, r3
 800315c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e008      	b.n	8003176 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4413      	add	r3, r2
 800316c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003170:	461a      	mov	r2, r3
 8003172:	2300      	movs	r3, #0
 8003174:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4413      	add	r3, r2
 800317e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003182:	461a      	mov	r2, r3
 8003184:	2300      	movs	r3, #0
 8003186:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003194:	461a      	mov	r2, r3
 8003196:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800319a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	3301      	adds	r3, #1
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80031a6:	461a      	mov	r2, r3
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d3b5      	bcc.n	800311a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80031ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80031d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d105      	bne.n	80031e4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f043 0210 	orr.w	r2, r3, #16
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699a      	ldr	r2, [r3, #24]
 80031e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003228 <USB_DevInit+0x2b4>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80031f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f043 0208 	orr.w	r2, r3, #8
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003204:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003208:	2b01      	cmp	r3, #1
 800320a:	d105      	bne.n	8003218 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699a      	ldr	r2, [r3, #24]
 8003210:	4b06      	ldr	r3, [pc, #24]	@ (800322c <USB_DevInit+0x2b8>)
 8003212:	4313      	orrs	r3, r2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003218:	7dfb      	ldrb	r3, [r7, #23]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003224:	b004      	add	sp, #16
 8003226:	4770      	bx	lr
 8003228:	803c3800 	.word	0x803c3800
 800322c:	40000004 	.word	0x40000004

08003230 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3301      	adds	r3, #1
 8003242:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800324a:	d901      	bls.n	8003250 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e01b      	b.n	8003288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	daf2      	bge.n	800323e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	019b      	lsls	r3, r3, #6
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3301      	adds	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003274:	d901      	bls.n	800327a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e006      	b.n	8003288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b20      	cmp	r3, #32
 8003284:	d0f0      	beq.n	8003268 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3301      	adds	r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80032ac:	d901      	bls.n	80032b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e018      	b.n	80032e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	daf2      	bge.n	80032a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2210      	movs	r2, #16
 80032c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	3301      	adds	r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80032d0:	d901      	bls.n	80032d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e006      	b.n	80032e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b10      	cmp	r3, #16
 80032e0:	d0f0      	beq.n	80032c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	68f9      	ldr	r1, [r7, #12]
 800330c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003310:	4313      	orrs	r3, r2
 8003312:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003322:	b480      	push	{r7}
 8003324:	b085      	sub	sp, #20
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800333c:	f023 0303 	bic.w	r3, r3, #3
 8003340:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f003 0301 	and.w	r3, r3, #1
}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3301      	adds	r3, #1
 8003390:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003398:	d901      	bls.n	800339e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e01b      	b.n	80033d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	daf2      	bge.n	800338c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f043 0201 	orr.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	3301      	adds	r3, #1
 80033ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80033c2:	d901      	bls.n	80033c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e006      	b.n	80033d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d0f0      	beq.n	80033b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f103 0208 	add.w	r2, r3, #8
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f103 0208 	add.w	r2, r3, #8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f103 0208 	add.w	r2, r3, #8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	601a      	str	r2, [r3, #0]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6892      	ldr	r2, [r2, #8]
 800349a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6852      	ldr	r2, [r2, #4]
 80034a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d103      	bne.n	80034b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	1e5a      	subs	r2, r3, #1
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08e      	sub	sp, #56	@ 0x38
 80034dc:	af04      	add	r7, sp, #16
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10d      	bne.n	8003508 <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f0:	b672      	cpsid	i
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	b662      	cpsie	i
 8003500:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003502:	bf00      	nop
 8003504:	bf00      	nop
 8003506:	e7fd      	b.n	8003504 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10d      	bne.n	800352a <xTaskCreateStatic+0x52>
	__asm volatile
 800350e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003512:	b672      	cpsid	i
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	b662      	cpsie	i
 8003522:	61fb      	str	r3, [r7, #28]
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	e7fd      	b.n	8003526 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800352a:	23a0      	movs	r3, #160	@ 0xa0
 800352c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2ba0      	cmp	r3, #160	@ 0xa0
 8003532:	d00d      	beq.n	8003550 <xTaskCreateStatic+0x78>
	__asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003538:	b672      	cpsid	i
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	b662      	cpsie	i
 8003548:	61bb      	str	r3, [r7, #24]
}
 800354a:	bf00      	nop
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003550:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01e      	beq.n	8003596 <xTaskCreateStatic+0xbe>
 8003558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800355a:	2b00      	cmp	r3, #0
 800355c:	d01b      	beq.n	8003596 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800355e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003560:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003566:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	2202      	movs	r2, #2
 800356c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003570:	2300      	movs	r3, #0
 8003572:	9303      	str	r3, [sp, #12]
 8003574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003576:	9302      	str	r3, [sp, #8]
 8003578:	f107 0314 	add.w	r3, r7, #20
 800357c:	9301      	str	r3, [sp, #4]
 800357e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f851 	bl	8003630 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800358e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003590:	f000 f8f0 	bl	8003774 <prvAddNewTaskToReadyList>
 8003594:	e001      	b.n	800359a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800359a:	697b      	ldr	r3, [r7, #20]
	}
 800359c:	4618      	mov	r0, r3
 800359e:	3728      	adds	r7, #40	@ 0x28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08c      	sub	sp, #48	@ 0x30
 80035a8:	af04      	add	r7, sp, #16
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fe57 	bl	800426c <pvPortMalloc>
 80035be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00e      	beq.n	80035e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035c6:	20a0      	movs	r0, #160	@ 0xa0
 80035c8:	f000 fe50 	bl	800426c <pvPortMalloc>
 80035cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80035da:	e005      	b.n	80035e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035dc:	6978      	ldr	r0, [r7, #20]
 80035de:	f000 ff13 	bl	8004408 <vPortFree>
 80035e2:	e001      	b.n	80035e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d017      	beq.n	800361e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035f6:	88fa      	ldrh	r2, [r7, #6]
 80035f8:	2300      	movs	r3, #0
 80035fa:	9303      	str	r3, [sp, #12]
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	9302      	str	r3, [sp, #8]
 8003600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f80f 	bl	8003630 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003612:	69f8      	ldr	r0, [r7, #28]
 8003614:	f000 f8ae 	bl	8003774 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003618:	2301      	movs	r3, #1
 800361a:	61bb      	str	r3, [r7, #24]
 800361c:	e002      	b.n	8003624 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800361e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003622:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003624:	69bb      	ldr	r3, [r7, #24]
	}
 8003626:	4618      	mov	r0, r3
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003648:	440b      	add	r3, r1
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	f023 0307 	bic.w	r3, r3, #7
 8003656:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00d      	beq.n	800367e <prvInitialiseNewTask+0x4e>
	__asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003666:	b672      	cpsid	i
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	b662      	cpsie	i
 8003676:	617b      	str	r3, [r7, #20]
}
 8003678:	bf00      	nop
 800367a:	bf00      	nop
 800367c:	e7fd      	b.n	800367a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01f      	beq.n	80036c4 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	e012      	b.n	80036b0 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	4413      	add	r3, r2
 8003690:	7819      	ldrb	r1, [r3, #0]
 8003692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	4413      	add	r3, r2
 8003698:	3334      	adds	r3, #52	@ 0x34
 800369a:	460a      	mov	r2, r1
 800369c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	4413      	add	r3, r2
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3301      	adds	r3, #1
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	2b0f      	cmp	r3, #15
 80036b4:	d9e9      	bls.n	800368a <prvInitialiseNewTask+0x5a>
 80036b6:	e000      	b.n	80036ba <prvInitialiseNewTask+0x8a>
			{
				break;
 80036b8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036c2:	e003      	b.n	80036cc <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ce:	2b06      	cmp	r3, #6
 80036d0:	d901      	bls.n	80036d6 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036d2:	2306      	movs	r3, #6
 80036d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036da:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036e0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80036e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e4:	2200      	movs	r2, #0
 80036e6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ea:	3304      	adds	r3, #4
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fe98 	bl	8003422 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f4:	3318      	adds	r3, #24
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fe93 	bl	8003422 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003700:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003704:	f1c3 0207 	rsb	r2, r3, #7
 8003708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800370c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003710:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003714:	2200      	movs	r2, #0
 8003716:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	2200      	movs	r2, #0
 800371e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003724:	334c      	adds	r3, #76	@ 0x4c
 8003726:	224c      	movs	r2, #76	@ 0x4c
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f000 ffa0 	bl	8004670 <memset>
 8003730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003732:	4a0d      	ldr	r2, [pc, #52]	@ (8003768 <prvInitialiseNewTask+0x138>)
 8003734:	651a      	str	r2, [r3, #80]	@ 0x50
 8003736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003738:	4a0c      	ldr	r2, [pc, #48]	@ (800376c <prvInitialiseNewTask+0x13c>)
 800373a:	655a      	str	r2, [r3, #84]	@ 0x54
 800373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373e:	4a0c      	ldr	r2, [pc, #48]	@ (8003770 <prvInitialiseNewTask+0x140>)
 8003740:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	68f9      	ldr	r1, [r7, #12]
 8003746:	69b8      	ldr	r0, [r7, #24]
 8003748:	f000 fb9a 	bl	8003e80 <pxPortInitialiseStack>
 800374c:	4602      	mov	r2, r0
 800374e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003750:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800375c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800375e:	bf00      	nop
 8003760:	3720      	adds	r7, #32
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	2000459c 	.word	0x2000459c
 800376c:	20004604 	.word	0x20004604
 8003770:	2000466c 	.word	0x2000466c

08003774 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800377c:	f000 fc8e 	bl	800409c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003780:	4b2a      	ldr	r3, [pc, #168]	@ (800382c <prvAddNewTaskToReadyList+0xb8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	4a29      	ldr	r2, [pc, #164]	@ (800382c <prvAddNewTaskToReadyList+0xb8>)
 8003788:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800378a:	4b29      	ldr	r3, [pc, #164]	@ (8003830 <prvAddNewTaskToReadyList+0xbc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003792:	4a27      	ldr	r2, [pc, #156]	@ (8003830 <prvAddNewTaskToReadyList+0xbc>)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003798:	4b24      	ldr	r3, [pc, #144]	@ (800382c <prvAddNewTaskToReadyList+0xb8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d110      	bne.n	80037c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037a0:	f000 faa8 	bl	8003cf4 <prvInitialiseTaskLists>
 80037a4:	e00d      	b.n	80037c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037a6:	4b23      	ldr	r3, [pc, #140]	@ (8003834 <prvAddNewTaskToReadyList+0xc0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037ae:	4b20      	ldr	r3, [pc, #128]	@ (8003830 <prvAddNewTaskToReadyList+0xbc>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d802      	bhi.n	80037c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003830 <prvAddNewTaskToReadyList+0xbc>)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003838 <prvAddNewTaskToReadyList+0xc4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3301      	adds	r3, #1
 80037c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003838 <prvAddNewTaskToReadyList+0xc4>)
 80037ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	2201      	movs	r2, #1
 80037d2:	409a      	lsls	r2, r3
 80037d4:	4b19      	ldr	r3, [pc, #100]	@ (800383c <prvAddNewTaskToReadyList+0xc8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4313      	orrs	r3, r2
 80037da:	4a18      	ldr	r2, [pc, #96]	@ (800383c <prvAddNewTaskToReadyList+0xc8>)
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4a15      	ldr	r2, [pc, #84]	@ (8003840 <prvAddNewTaskToReadyList+0xcc>)
 80037ec:	441a      	add	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3304      	adds	r3, #4
 80037f2:	4619      	mov	r1, r3
 80037f4:	4610      	mov	r0, r2
 80037f6:	f7ff fe21 	bl	800343c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037fa:	f000 fc85 	bl	8004108 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003834 <prvAddNewTaskToReadyList+0xc0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00e      	beq.n	8003824 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003806:	4b0a      	ldr	r3, [pc, #40]	@ (8003830 <prvAddNewTaskToReadyList+0xbc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003810:	429a      	cmp	r2, r3
 8003812:	d207      	bcs.n	8003824 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003814:	4b0b      	ldr	r3, [pc, #44]	@ (8003844 <prvAddNewTaskToReadyList+0xd0>)
 8003816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	2000094c 	.word	0x2000094c
 8003830:	2000084c 	.word	0x2000084c
 8003834:	20000958 	.word	0x20000958
 8003838:	20000968 	.word	0x20000968
 800383c:	20000954 	.word	0x20000954
 8003840:	20000850 	.word	0x20000850
 8003844:	e000ed04 	.word	0xe000ed04

08003848 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08a      	sub	sp, #40	@ 0x28
 800384c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003856:	463a      	mov	r2, r7
 8003858:	1d39      	adds	r1, r7, #4
 800385a:	f107 0308 	add.w	r3, r7, #8
 800385e:	4618      	mov	r0, r3
 8003860:	f7fc ff9e 	bl	80007a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003864:	6839      	ldr	r1, [r7, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	9202      	str	r2, [sp, #8]
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	2300      	movs	r3, #0
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	2300      	movs	r3, #0
 8003874:	460a      	mov	r2, r1
 8003876:	4923      	ldr	r1, [pc, #140]	@ (8003904 <vTaskStartScheduler+0xbc>)
 8003878:	4823      	ldr	r0, [pc, #140]	@ (8003908 <vTaskStartScheduler+0xc0>)
 800387a:	f7ff fe2d 	bl	80034d8 <xTaskCreateStatic>
 800387e:	4603      	mov	r3, r0
 8003880:	4a22      	ldr	r2, [pc, #136]	@ (800390c <vTaskStartScheduler+0xc4>)
 8003882:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003884:	4b21      	ldr	r3, [pc, #132]	@ (800390c <vTaskStartScheduler+0xc4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800388c:	2301      	movs	r3, #1
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	e001      	b.n	8003896 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d11d      	bne.n	80038d8 <vTaskStartScheduler+0x90>
	__asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a0:	b672      	cpsid	i
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	b662      	cpsie	i
 80038b0:	613b      	str	r3, [r7, #16]
}
 80038b2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80038b4:	4b16      	ldr	r3, [pc, #88]	@ (8003910 <vTaskStartScheduler+0xc8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	334c      	adds	r3, #76	@ 0x4c
 80038ba:	4a16      	ldr	r2, [pc, #88]	@ (8003914 <vTaskStartScheduler+0xcc>)
 80038bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038be:	4b16      	ldr	r3, [pc, #88]	@ (8003918 <vTaskStartScheduler+0xd0>)
 80038c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038c6:	4b15      	ldr	r3, [pc, #84]	@ (800391c <vTaskStartScheduler+0xd4>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038cc:	4b14      	ldr	r3, [pc, #80]	@ (8003920 <vTaskStartScheduler+0xd8>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038d2:	f000 fb65 	bl	8003fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038d6:	e011      	b.n	80038fc <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038de:	d10d      	bne.n	80038fc <vTaskStartScheduler+0xb4>
	__asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e4:	b672      	cpsid	i
 80038e6:	f383 8811 	msr	BASEPRI, r3
 80038ea:	f3bf 8f6f 	isb	sy
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	b662      	cpsie	i
 80038f4:	60fb      	str	r3, [r7, #12]
}
 80038f6:	bf00      	nop
 80038f8:	bf00      	nop
 80038fa:	e7fd      	b.n	80038f8 <vTaskStartScheduler+0xb0>
}
 80038fc:	bf00      	nop
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	08004838 	.word	0x08004838
 8003908:	08003cc5 	.word	0x08003cc5
 800390c:	20000970 	.word	0x20000970
 8003910:	2000084c 	.word	0x2000084c
 8003914:	20000010 	.word	0x20000010
 8003918:	2000096c 	.word	0x2000096c
 800391c:	20000958 	.word	0x20000958
 8003920:	20000950 	.word	0x20000950

08003924 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003928:	4b04      	ldr	r3, [pc, #16]	@ (800393c <vTaskSuspendAll+0x18>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3301      	adds	r3, #1
 800392e:	4a03      	ldr	r2, [pc, #12]	@ (800393c <vTaskSuspendAll+0x18>)
 8003930:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003932:	bf00      	nop
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	20000974 	.word	0x20000974

08003940 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800394e:	4b43      	ldr	r3, [pc, #268]	@ (8003a5c <xTaskResumeAll+0x11c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10d      	bne.n	8003972 <xTaskResumeAll+0x32>
	__asm volatile
 8003956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395a:	b672      	cpsid	i
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	b662      	cpsie	i
 800396a:	603b      	str	r3, [r7, #0]
}
 800396c:	bf00      	nop
 800396e:	bf00      	nop
 8003970:	e7fd      	b.n	800396e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003972:	f000 fb93 	bl	800409c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003976:	4b39      	ldr	r3, [pc, #228]	@ (8003a5c <xTaskResumeAll+0x11c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3b01      	subs	r3, #1
 800397c:	4a37      	ldr	r2, [pc, #220]	@ (8003a5c <xTaskResumeAll+0x11c>)
 800397e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003980:	4b36      	ldr	r3, [pc, #216]	@ (8003a5c <xTaskResumeAll+0x11c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d161      	bne.n	8003a4c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003988:	4b35      	ldr	r3, [pc, #212]	@ (8003a60 <xTaskResumeAll+0x120>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d05d      	beq.n	8003a4c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003990:	e02e      	b.n	80039f0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003992:	4b34      	ldr	r3, [pc, #208]	@ (8003a64 <xTaskResumeAll+0x124>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3318      	adds	r3, #24
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff fd70 	bl	8003484 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fd6b 	bl	8003484 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b2:	2201      	movs	r2, #1
 80039b4:	409a      	lsls	r2, r3
 80039b6:	4b2c      	ldr	r3, [pc, #176]	@ (8003a68 <xTaskResumeAll+0x128>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003a68 <xTaskResumeAll+0x128>)
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4a27      	ldr	r2, [pc, #156]	@ (8003a6c <xTaskResumeAll+0x12c>)
 80039ce:	441a      	add	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3304      	adds	r3, #4
 80039d4:	4619      	mov	r1, r3
 80039d6:	4610      	mov	r0, r2
 80039d8:	f7ff fd30 	bl	800343c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e0:	4b23      	ldr	r3, [pc, #140]	@ (8003a70 <xTaskResumeAll+0x130>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d302      	bcc.n	80039f0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80039ea:	4b22      	ldr	r3, [pc, #136]	@ (8003a74 <xTaskResumeAll+0x134>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003a64 <xTaskResumeAll+0x124>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1cc      	bne.n	8003992 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039fe:	f000 fa1f 	bl	8003e40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a02:	4b1d      	ldr	r3, [pc, #116]	@ (8003a78 <xTaskResumeAll+0x138>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d010      	beq.n	8003a30 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a0e:	f000 f837 	bl	8003a80 <xTaskIncrementTick>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8003a18:	4b16      	ldr	r3, [pc, #88]	@ (8003a74 <xTaskResumeAll+0x134>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f1      	bne.n	8003a0e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8003a2a:	4b13      	ldr	r3, [pc, #76]	@ (8003a78 <xTaskResumeAll+0x138>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a30:	4b10      	ldr	r3, [pc, #64]	@ (8003a74 <xTaskResumeAll+0x134>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d009      	beq.n	8003a4c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a7c <xTaskResumeAll+0x13c>)
 8003a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a4c:	f000 fb5c 	bl	8004108 <vPortExitCritical>

	return xAlreadyYielded;
 8003a50:	68bb      	ldr	r3, [r7, #8]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000974 	.word	0x20000974
 8003a60:	2000094c 	.word	0x2000094c
 8003a64:	2000090c 	.word	0x2000090c
 8003a68:	20000954 	.word	0x20000954
 8003a6c:	20000850 	.word	0x20000850
 8003a70:	2000084c 	.word	0x2000084c
 8003a74:	20000960 	.word	0x20000960
 8003a78:	2000095c 	.word	0x2000095c
 8003a7c:	e000ed04 	.word	0xe000ed04

08003a80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a8a:	4b50      	ldr	r3, [pc, #320]	@ (8003bcc <xTaskIncrementTick+0x14c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f040 808b 	bne.w	8003baa <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a94:	4b4e      	ldr	r3, [pc, #312]	@ (8003bd0 <xTaskIncrementTick+0x150>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a9c:	4a4c      	ldr	r2, [pc, #304]	@ (8003bd0 <xTaskIncrementTick+0x150>)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d123      	bne.n	8003af0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8003aa8:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd4 <xTaskIncrementTick+0x154>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00d      	beq.n	8003ace <xTaskIncrementTick+0x4e>
	__asm volatile
 8003ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab6:	b672      	cpsid	i
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	b662      	cpsie	i
 8003ac6:	603b      	str	r3, [r7, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	e7fd      	b.n	8003aca <xTaskIncrementTick+0x4a>
 8003ace:	4b41      	ldr	r3, [pc, #260]	@ (8003bd4 <xTaskIncrementTick+0x154>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	4b40      	ldr	r3, [pc, #256]	@ (8003bd8 <xTaskIncrementTick+0x158>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a3e      	ldr	r2, [pc, #248]	@ (8003bd4 <xTaskIncrementTick+0x154>)
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	4a3e      	ldr	r2, [pc, #248]	@ (8003bd8 <xTaskIncrementTick+0x158>)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bdc <xTaskIncrementTick+0x15c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	4a3c      	ldr	r2, [pc, #240]	@ (8003bdc <xTaskIncrementTick+0x15c>)
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	f000 f9a8 	bl	8003e40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003af0:	4b3b      	ldr	r3, [pc, #236]	@ (8003be0 <xTaskIncrementTick+0x160>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d348      	bcc.n	8003b8c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003afa:	4b36      	ldr	r3, [pc, #216]	@ (8003bd4 <xTaskIncrementTick+0x154>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d104      	bne.n	8003b0e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b04:	4b36      	ldr	r3, [pc, #216]	@ (8003be0 <xTaskIncrementTick+0x160>)
 8003b06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b0a:	601a      	str	r2, [r3, #0]
					break;
 8003b0c:	e03e      	b.n	8003b8c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b0e:	4b31      	ldr	r3, [pc, #196]	@ (8003bd4 <xTaskIncrementTick+0x154>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d203      	bcs.n	8003b2e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b26:	4a2e      	ldr	r2, [pc, #184]	@ (8003be0 <xTaskIncrementTick+0x160>)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b2c:	e02e      	b.n	8003b8c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	3304      	adds	r3, #4
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff fca6 	bl	8003484 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d004      	beq.n	8003b4a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	3318      	adds	r3, #24
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff fc9d 	bl	8003484 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4e:	2201      	movs	r2, #1
 8003b50:	409a      	lsls	r2, r3
 8003b52:	4b24      	ldr	r3, [pc, #144]	@ (8003be4 <xTaskIncrementTick+0x164>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	4a22      	ldr	r2, [pc, #136]	@ (8003be4 <xTaskIncrementTick+0x164>)
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4a1f      	ldr	r2, [pc, #124]	@ (8003be8 <xTaskIncrementTick+0x168>)
 8003b6a:	441a      	add	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	4619      	mov	r1, r3
 8003b72:	4610      	mov	r0, r2
 8003b74:	f7ff fc62 	bl	800343c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bec <xTaskIncrementTick+0x16c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d3b9      	bcc.n	8003afa <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8003b86:	2301      	movs	r3, #1
 8003b88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b8a:	e7b6      	b.n	8003afa <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b8c:	4b17      	ldr	r3, [pc, #92]	@ (8003bec <xTaskIncrementTick+0x16c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b92:	4915      	ldr	r1, [pc, #84]	@ (8003be8 <xTaskIncrementTick+0x168>)
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d907      	bls.n	8003bb4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	e004      	b.n	8003bb4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003baa:	4b11      	ldr	r3, [pc, #68]	@ (8003bf0 <xTaskIncrementTick+0x170>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	4a0f      	ldr	r2, [pc, #60]	@ (8003bf0 <xTaskIncrementTick+0x170>)
 8003bb2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf4 <xTaskIncrementTick+0x174>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003bc0:	697b      	ldr	r3, [r7, #20]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000974 	.word	0x20000974
 8003bd0:	20000950 	.word	0x20000950
 8003bd4:	20000904 	.word	0x20000904
 8003bd8:	20000908 	.word	0x20000908
 8003bdc:	20000964 	.word	0x20000964
 8003be0:	2000096c 	.word	0x2000096c
 8003be4:	20000954 	.word	0x20000954
 8003be8:	20000850 	.word	0x20000850
 8003bec:	2000084c 	.word	0x2000084c
 8003bf0:	2000095c 	.word	0x2000095c
 8003bf4:	20000960 	.word	0x20000960

08003bf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8003cac <vTaskSwitchContext+0xb4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c06:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb0 <vTaskSwitchContext+0xb8>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c0c:	e047      	b.n	8003c9e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003c0e:	4b28      	ldr	r3, [pc, #160]	@ (8003cb0 <vTaskSwitchContext+0xb8>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c14:	4b27      	ldr	r3, [pc, #156]	@ (8003cb4 <vTaskSwitchContext+0xbc>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	fab3 f383 	clz	r3, r3
 8003c20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003c22:	7afb      	ldrb	r3, [r7, #11]
 8003c24:	f1c3 031f 	rsb	r3, r3, #31
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	4923      	ldr	r1, [pc, #140]	@ (8003cb8 <vTaskSwitchContext+0xc0>)
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10d      	bne.n	8003c5a <vTaskSwitchContext+0x62>
	__asm volatile
 8003c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c42:	b672      	cpsid	i
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	b662      	cpsie	i
 8003c52:	607b      	str	r3, [r7, #4]
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	e7fd      	b.n	8003c56 <vTaskSwitchContext+0x5e>
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4a14      	ldr	r2, [pc, #80]	@ (8003cb8 <vTaskSwitchContext+0xc0>)
 8003c66:	4413      	add	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	605a      	str	r2, [r3, #4]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d104      	bne.n	8003c8a <vTaskSwitchContext+0x92>
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4a0a      	ldr	r2, [pc, #40]	@ (8003cbc <vTaskSwitchContext+0xc4>)
 8003c92:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c94:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <vTaskSwitchContext+0xc4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	334c      	adds	r3, #76	@ 0x4c
 8003c9a:	4a09      	ldr	r2, [pc, #36]	@ (8003cc0 <vTaskSwitchContext+0xc8>)
 8003c9c:	6013      	str	r3, [r2, #0]
}
 8003c9e:	bf00      	nop
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	20000974 	.word	0x20000974
 8003cb0:	20000960 	.word	0x20000960
 8003cb4:	20000954 	.word	0x20000954
 8003cb8:	20000850 	.word	0x20000850
 8003cbc:	2000084c 	.word	0x2000084c
 8003cc0:	20000010 	.word	0x20000010

08003cc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ccc:	f000 f852 	bl	8003d74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003cd0:	4b06      	ldr	r3, [pc, #24]	@ (8003cec <prvIdleTask+0x28>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d9f9      	bls.n	8003ccc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003cd8:	4b05      	ldr	r3, [pc, #20]	@ (8003cf0 <prvIdleTask+0x2c>)
 8003cda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ce8:	e7f0      	b.n	8003ccc <prvIdleTask+0x8>
 8003cea:	bf00      	nop
 8003cec:	20000850 	.word	0x20000850
 8003cf0:	e000ed04 	.word	0xe000ed04

08003cf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	e00c      	b.n	8003d1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4a12      	ldr	r2, [pc, #72]	@ (8003d54 <prvInitialiseTaskLists+0x60>)
 8003d0c:	4413      	add	r3, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fb67 	bl	80033e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3301      	adds	r3, #1
 8003d18:	607b      	str	r3, [r7, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b06      	cmp	r3, #6
 8003d1e:	d9ef      	bls.n	8003d00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d20:	480d      	ldr	r0, [pc, #52]	@ (8003d58 <prvInitialiseTaskLists+0x64>)
 8003d22:	f7ff fb5e 	bl	80033e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d26:	480d      	ldr	r0, [pc, #52]	@ (8003d5c <prvInitialiseTaskLists+0x68>)
 8003d28:	f7ff fb5b 	bl	80033e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d2c:	480c      	ldr	r0, [pc, #48]	@ (8003d60 <prvInitialiseTaskLists+0x6c>)
 8003d2e:	f7ff fb58 	bl	80033e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d32:	480c      	ldr	r0, [pc, #48]	@ (8003d64 <prvInitialiseTaskLists+0x70>)
 8003d34:	f7ff fb55 	bl	80033e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d38:	480b      	ldr	r0, [pc, #44]	@ (8003d68 <prvInitialiseTaskLists+0x74>)
 8003d3a:	f7ff fb52 	bl	80033e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d6c <prvInitialiseTaskLists+0x78>)
 8003d40:	4a05      	ldr	r2, [pc, #20]	@ (8003d58 <prvInitialiseTaskLists+0x64>)
 8003d42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d44:	4b0a      	ldr	r3, [pc, #40]	@ (8003d70 <prvInitialiseTaskLists+0x7c>)
 8003d46:	4a05      	ldr	r2, [pc, #20]	@ (8003d5c <prvInitialiseTaskLists+0x68>)
 8003d48:	601a      	str	r2, [r3, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000850 	.word	0x20000850
 8003d58:	200008dc 	.word	0x200008dc
 8003d5c:	200008f0 	.word	0x200008f0
 8003d60:	2000090c 	.word	0x2000090c
 8003d64:	20000920 	.word	0x20000920
 8003d68:	20000938 	.word	0x20000938
 8003d6c:	20000904 	.word	0x20000904
 8003d70:	20000908 	.word	0x20000908

08003d74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d7a:	e019      	b.n	8003db0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d7c:	f000 f98e 	bl	800409c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d80:	4b10      	ldr	r3, [pc, #64]	@ (8003dc4 <prvCheckTasksWaitingTermination+0x50>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fb79 	bl	8003484 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d92:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc8 <prvCheckTasksWaitingTermination+0x54>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	4a0b      	ldr	r2, [pc, #44]	@ (8003dc8 <prvCheckTasksWaitingTermination+0x54>)
 8003d9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dcc <prvCheckTasksWaitingTermination+0x58>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dcc <prvCheckTasksWaitingTermination+0x58>)
 8003da4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003da6:	f000 f9af 	bl	8004108 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f810 	bl	8003dd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003db0:	4b06      	ldr	r3, [pc, #24]	@ (8003dcc <prvCheckTasksWaitingTermination+0x58>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e1      	bne.n	8003d7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003db8:	bf00      	nop
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000920 	.word	0x20000920
 8003dc8:	2000094c 	.word	0x2000094c
 8003dcc:	20000934 	.word	0x20000934

08003dd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	334c      	adds	r3, #76	@ 0x4c
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fc4f 	bl	8004680 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d108      	bne.n	8003dfe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fb09 	bl	8004408 <vPortFree>
				vPortFree( pxTCB );
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fb06 	bl	8004408 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003dfc:	e01b      	b.n	8003e36 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d103      	bne.n	8003e10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fafd 	bl	8004408 <vPortFree>
	}
 8003e0e:	e012      	b.n	8003e36 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d00d      	beq.n	8003e36 <prvDeleteTCB+0x66>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1e:	b672      	cpsid	i
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	b662      	cpsie	i
 8003e2e:	60fb      	str	r3, [r7, #12]
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	e7fd      	b.n	8003e32 <prvDeleteTCB+0x62>
	}
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e46:	4b0c      	ldr	r3, [pc, #48]	@ (8003e78 <prvResetNextTaskUnblockTime+0x38>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e50:	4b0a      	ldr	r3, [pc, #40]	@ (8003e7c <prvResetNextTaskUnblockTime+0x3c>)
 8003e52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e58:	e008      	b.n	8003e6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e5a:	4b07      	ldr	r3, [pc, #28]	@ (8003e78 <prvResetNextTaskUnblockTime+0x38>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	4a04      	ldr	r2, [pc, #16]	@ (8003e7c <prvResetNextTaskUnblockTime+0x3c>)
 8003e6a:	6013      	str	r3, [r2, #0]
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	20000904 	.word	0x20000904
 8003e7c:	2000096c 	.word	0x2000096c

08003e80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3b04      	subs	r3, #4
 8003e90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3b04      	subs	r3, #4
 8003e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f023 0201 	bic.w	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	3b04      	subs	r3, #4
 8003eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8003ee4 <pxPortInitialiseStack+0x64>)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3b14      	subs	r3, #20
 8003eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3b04      	subs	r3, #4
 8003ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f06f 0202 	mvn.w	r2, #2
 8003ece:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3b20      	subs	r3, #32
 8003ed4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	08003ee9 	.word	0x08003ee9

08003ee8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ef2:	4b15      	ldr	r3, [pc, #84]	@ (8003f48 <prvTaskExitError+0x60>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003efa:	d00d      	beq.n	8003f18 <prvTaskExitError+0x30>
	__asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f00:	b672      	cpsid	i
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	b662      	cpsie	i
 8003f10:	60fb      	str	r3, [r7, #12]
}
 8003f12:	bf00      	nop
 8003f14:	bf00      	nop
 8003f16:	e7fd      	b.n	8003f14 <prvTaskExitError+0x2c>
	__asm volatile
 8003f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1c:	b672      	cpsid	i
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	b662      	cpsie	i
 8003f2c:	60bb      	str	r3, [r7, #8]
}
 8003f2e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f30:	bf00      	nop
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0fc      	beq.n	8003f32 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	2000000c 	.word	0x2000000c
 8003f4c:	00000000 	.word	0x00000000

08003f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f50:	4b07      	ldr	r3, [pc, #28]	@ (8003f70 <pxCurrentTCBConst2>)
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	6808      	ldr	r0, [r1, #0]
 8003f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f5a:	f380 8809 	msr	PSP, r0
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f04f 0000 	mov.w	r0, #0
 8003f66:	f380 8811 	msr	BASEPRI, r0
 8003f6a:	4770      	bx	lr
 8003f6c:	f3af 8000 	nop.w

08003f70 <pxCurrentTCBConst2>:
 8003f70:	2000084c 	.word	0x2000084c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop

08003f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003f78:	4808      	ldr	r0, [pc, #32]	@ (8003f9c <prvPortStartFirstTask+0x24>)
 8003f7a:	6800      	ldr	r0, [r0, #0]
 8003f7c:	6800      	ldr	r0, [r0, #0]
 8003f7e:	f380 8808 	msr	MSP, r0
 8003f82:	f04f 0000 	mov.w	r0, #0
 8003f86:	f380 8814 	msr	CONTROL, r0
 8003f8a:	b662      	cpsie	i
 8003f8c:	b661      	cpsie	f
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	df00      	svc	0
 8003f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f9a:	bf00      	nop
 8003f9c:	e000ed08 	.word	0xe000ed08

08003fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fa6:	4b37      	ldr	r3, [pc, #220]	@ (8004084 <xPortStartScheduler+0xe4>)
 8003fa8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	22ff      	movs	r2, #255	@ 0xff
 8003fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	4b2f      	ldr	r3, [pc, #188]	@ (8004088 <xPortStartScheduler+0xe8>)
 8003fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fce:	4b2f      	ldr	r3, [pc, #188]	@ (800408c <xPortStartScheduler+0xec>)
 8003fd0:	2207      	movs	r2, #7
 8003fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fd4:	e009      	b.n	8003fea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003fd6:	4b2d      	ldr	r3, [pc, #180]	@ (800408c <xPortStartScheduler+0xec>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	4a2b      	ldr	r2, [pc, #172]	@ (800408c <xPortStartScheduler+0xec>)
 8003fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff2:	2b80      	cmp	r3, #128	@ 0x80
 8003ff4:	d0ef      	beq.n	8003fd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ff6:	4b25      	ldr	r3, [pc, #148]	@ (800408c <xPortStartScheduler+0xec>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f1c3 0307 	rsb	r3, r3, #7
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d00d      	beq.n	800401e <xPortStartScheduler+0x7e>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004006:	b672      	cpsid	i
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	b662      	cpsie	i
 8004016:	60bb      	str	r3, [r7, #8]
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	e7fd      	b.n	800401a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800401e:	4b1b      	ldr	r3, [pc, #108]	@ (800408c <xPortStartScheduler+0xec>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	4a19      	ldr	r2, [pc, #100]	@ (800408c <xPortStartScheduler+0xec>)
 8004026:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004028:	4b18      	ldr	r3, [pc, #96]	@ (800408c <xPortStartScheduler+0xec>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004030:	4a16      	ldr	r2, [pc, #88]	@ (800408c <xPortStartScheduler+0xec>)
 8004032:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	b2da      	uxtb	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800403c:	4b14      	ldr	r3, [pc, #80]	@ (8004090 <xPortStartScheduler+0xf0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a13      	ldr	r2, [pc, #76]	@ (8004090 <xPortStartScheduler+0xf0>)
 8004042:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004046:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004048:	4b11      	ldr	r3, [pc, #68]	@ (8004090 <xPortStartScheduler+0xf0>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a10      	ldr	r2, [pc, #64]	@ (8004090 <xPortStartScheduler+0xf0>)
 800404e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004052:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004054:	f000 f8dc 	bl	8004210 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004058:	4b0e      	ldr	r3, [pc, #56]	@ (8004094 <xPortStartScheduler+0xf4>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800405e:	f000 f8fb 	bl	8004258 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004062:	4b0d      	ldr	r3, [pc, #52]	@ (8004098 <xPortStartScheduler+0xf8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a0c      	ldr	r2, [pc, #48]	@ (8004098 <xPortStartScheduler+0xf8>)
 8004068:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800406c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800406e:	f7ff ff83 	bl	8003f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004072:	f7ff fdc1 	bl	8003bf8 <vTaskSwitchContext>
	prvTaskExitError();
 8004076:	f7ff ff37 	bl	8003ee8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	e000e400 	.word	0xe000e400
 8004088:	20000978 	.word	0x20000978
 800408c:	2000097c 	.word	0x2000097c
 8004090:	e000ed20 	.word	0xe000ed20
 8004094:	2000000c 	.word	0x2000000c
 8004098:	e000ef34 	.word	0xe000ef34

0800409c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a6:	b672      	cpsid	i
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	b662      	cpsie	i
 80040b6:	607b      	str	r3, [r7, #4]
}
 80040b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80040ba:	4b11      	ldr	r3, [pc, #68]	@ (8004100 <vPortEnterCritical+0x64>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3301      	adds	r3, #1
 80040c0:	4a0f      	ldr	r2, [pc, #60]	@ (8004100 <vPortEnterCritical+0x64>)
 80040c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80040c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004100 <vPortEnterCritical+0x64>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d112      	bne.n	80040f2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004104 <vPortEnterCritical+0x68>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00d      	beq.n	80040f2 <vPortEnterCritical+0x56>
	__asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040da:	b672      	cpsid	i
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	b662      	cpsie	i
 80040ea:	603b      	str	r3, [r7, #0]
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	e7fd      	b.n	80040ee <vPortEnterCritical+0x52>
	}
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	2000000c 	.word	0x2000000c
 8004104:	e000ed04 	.word	0xe000ed04

08004108 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800410e:	4b13      	ldr	r3, [pc, #76]	@ (800415c <vPortExitCritical+0x54>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10d      	bne.n	8004132 <vPortExitCritical+0x2a>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411a:	b672      	cpsid	i
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	b662      	cpsie	i
 800412a:	607b      	str	r3, [r7, #4]
}
 800412c:	bf00      	nop
 800412e:	bf00      	nop
 8004130:	e7fd      	b.n	800412e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8004132:	4b0a      	ldr	r3, [pc, #40]	@ (800415c <vPortExitCritical+0x54>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3b01      	subs	r3, #1
 8004138:	4a08      	ldr	r2, [pc, #32]	@ (800415c <vPortExitCritical+0x54>)
 800413a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800413c:	4b07      	ldr	r3, [pc, #28]	@ (800415c <vPortExitCritical+0x54>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <vPortExitCritical+0x48>
 8004144:	2300      	movs	r3, #0
 8004146:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800414e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	2000000c 	.word	0x2000000c

08004160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004160:	f3ef 8009 	mrs	r0, PSP
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	4b15      	ldr	r3, [pc, #84]	@ (80041c0 <pxCurrentTCBConst>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	f01e 0f10 	tst.w	lr, #16
 8004170:	bf08      	it	eq
 8004172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417a:	6010      	str	r0, [r2, #0]
 800417c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004180:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004184:	b672      	cpsid	i
 8004186:	f380 8811 	msr	BASEPRI, r0
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	b662      	cpsie	i
 8004194:	f7ff fd30 	bl	8003bf8 <vTaskSwitchContext>
 8004198:	f04f 0000 	mov.w	r0, #0
 800419c:	f380 8811 	msr	BASEPRI, r0
 80041a0:	bc09      	pop	{r0, r3}
 80041a2:	6819      	ldr	r1, [r3, #0]
 80041a4:	6808      	ldr	r0, [r1, #0]
 80041a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041aa:	f01e 0f10 	tst.w	lr, #16
 80041ae:	bf08      	it	eq
 80041b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041b4:	f380 8809 	msr	PSP, r0
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop

080041c0 <pxCurrentTCBConst>:
 80041c0:	2000084c 	.word	0x2000084c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop

080041c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
	__asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d2:	b672      	cpsid	i
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	b662      	cpsie	i
 80041e2:	607b      	str	r3, [r7, #4]
}
 80041e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80041e6:	f7ff fc4b 	bl	8003a80 <xTaskIncrementTick>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041f0:	4b06      	ldr	r3, [pc, #24]	@ (800420c <SysTick_Handler+0x44>)
 80041f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	2300      	movs	r3, #0
 80041fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	f383 8811 	msr	BASEPRI, r3
}
 8004202:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	e000ed04 	.word	0xe000ed04

08004210 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004214:	4b0b      	ldr	r3, [pc, #44]	@ (8004244 <vPortSetupTimerInterrupt+0x34>)
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800421a:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <vPortSetupTimerInterrupt+0x38>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004220:	4b0a      	ldr	r3, [pc, #40]	@ (800424c <vPortSetupTimerInterrupt+0x3c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0a      	ldr	r2, [pc, #40]	@ (8004250 <vPortSetupTimerInterrupt+0x40>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	099b      	lsrs	r3, r3, #6
 800422c:	4a09      	ldr	r2, [pc, #36]	@ (8004254 <vPortSetupTimerInterrupt+0x44>)
 800422e:	3b01      	subs	r3, #1
 8004230:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004232:	4b04      	ldr	r3, [pc, #16]	@ (8004244 <vPortSetupTimerInterrupt+0x34>)
 8004234:	2207      	movs	r2, #7
 8004236:	601a      	str	r2, [r3, #0]
}
 8004238:	bf00      	nop
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	e000e010 	.word	0xe000e010
 8004248:	e000e018 	.word	0xe000e018
 800424c:	20000000 	.word	0x20000000
 8004250:	10624dd3 	.word	0x10624dd3
 8004254:	e000e014 	.word	0xe000e014

08004258 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004258:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004268 <vPortEnableVFP+0x10>
 800425c:	6801      	ldr	r1, [r0, #0]
 800425e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004262:	6001      	str	r1, [r0, #0]
 8004264:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004266:	bf00      	nop
 8004268:	e000ed88 	.word	0xe000ed88

0800426c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	@ 0x28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004278:	f7ff fb54 	bl	8003924 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800427c:	4b5d      	ldr	r3, [pc, #372]	@ (80043f4 <pvPortMalloc+0x188>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004284:	f000 f920 	bl	80044c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004288:	4b5b      	ldr	r3, [pc, #364]	@ (80043f8 <pvPortMalloc+0x18c>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	f040 8094 	bne.w	80043be <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d020      	beq.n	80042de <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800429c:	2208      	movs	r2, #8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4413      	add	r3, r2
 80042a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d017      	beq.n	80042de <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f023 0307 	bic.w	r3, r3, #7
 80042b4:	3308      	adds	r3, #8
 80042b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00d      	beq.n	80042de <pvPortMalloc+0x72>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c6:	b672      	cpsid	i
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	b662      	cpsie	i
 80042d6:	617b      	str	r3, [r7, #20]
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	e7fd      	b.n	80042da <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d06c      	beq.n	80043be <pvPortMalloc+0x152>
 80042e4:	4b45      	ldr	r3, [pc, #276]	@ (80043fc <pvPortMalloc+0x190>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d867      	bhi.n	80043be <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80042ee:	4b44      	ldr	r3, [pc, #272]	@ (8004400 <pvPortMalloc+0x194>)
 80042f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80042f2:	4b43      	ldr	r3, [pc, #268]	@ (8004400 <pvPortMalloc+0x194>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042f8:	e004      	b.n	8004304 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	429a      	cmp	r2, r3
 800430c:	d903      	bls.n	8004316 <pvPortMalloc+0xaa>
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f1      	bne.n	80042fa <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004316:	4b37      	ldr	r3, [pc, #220]	@ (80043f4 <pvPortMalloc+0x188>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800431c:	429a      	cmp	r2, r3
 800431e:	d04e      	beq.n	80043be <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2208      	movs	r2, #8
 8004326:	4413      	add	r3, r2
 8004328:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	1ad2      	subs	r2, r2, r3
 800433a:	2308      	movs	r3, #8
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	429a      	cmp	r2, r3
 8004340:	d922      	bls.n	8004388 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4413      	add	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00d      	beq.n	8004370 <pvPortMalloc+0x104>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004358:	b672      	cpsid	i
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	b662      	cpsie	i
 8004368:	613b      	str	r3, [r7, #16]
}
 800436a:	bf00      	nop
 800436c:	bf00      	nop
 800436e:	e7fd      	b.n	800436c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	1ad2      	subs	r2, r2, r3
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004382:	69b8      	ldr	r0, [r7, #24]
 8004384:	f000 f902 	bl	800458c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004388:	4b1c      	ldr	r3, [pc, #112]	@ (80043fc <pvPortMalloc+0x190>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	4a1a      	ldr	r2, [pc, #104]	@ (80043fc <pvPortMalloc+0x190>)
 8004394:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004396:	4b19      	ldr	r3, [pc, #100]	@ (80043fc <pvPortMalloc+0x190>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	4b1a      	ldr	r3, [pc, #104]	@ (8004404 <pvPortMalloc+0x198>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d203      	bcs.n	80043aa <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80043a2:	4b16      	ldr	r3, [pc, #88]	@ (80043fc <pvPortMalloc+0x190>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a17      	ldr	r2, [pc, #92]	@ (8004404 <pvPortMalloc+0x198>)
 80043a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	4b12      	ldr	r3, [pc, #72]	@ (80043f8 <pvPortMalloc+0x18c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80043be:	f7ff fabf 	bl	8003940 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00d      	beq.n	80043e8 <pvPortMalloc+0x17c>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d0:	b672      	cpsid	i
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	b662      	cpsie	i
 80043e0:	60fb      	str	r3, [r7, #12]
}
 80043e2:	bf00      	nop
 80043e4:	bf00      	nop
 80043e6:	e7fd      	b.n	80043e4 <pvPortMalloc+0x178>
	return pvReturn;
 80043e8:	69fb      	ldr	r3, [r7, #28]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3728      	adds	r7, #40	@ 0x28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20004588 	.word	0x20004588
 80043f8:	20004594 	.word	0x20004594
 80043fc:	2000458c 	.word	0x2000458c
 8004400:	20004580 	.word	0x20004580
 8004404:	20004590 	.word	0x20004590

08004408 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d04e      	beq.n	80044b8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800441a:	2308      	movs	r3, #8
 800441c:	425b      	negs	r3, r3
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4413      	add	r3, r2
 8004422:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	4b24      	ldr	r3, [pc, #144]	@ (80044c0 <vPortFree+0xb8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4013      	ands	r3, r2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10d      	bne.n	8004452 <vPortFree+0x4a>
	__asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443a:	b672      	cpsid	i
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	b662      	cpsie	i
 800444a:	60fb      	str	r3, [r7, #12]
}
 800444c:	bf00      	nop
 800444e:	bf00      	nop
 8004450:	e7fd      	b.n	800444e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00d      	beq.n	8004476 <vPortFree+0x6e>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445e:	b672      	cpsid	i
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	b662      	cpsie	i
 800446e:	60bb      	str	r3, [r7, #8]
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	e7fd      	b.n	8004472 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	4b11      	ldr	r3, [pc, #68]	@ (80044c0 <vPortFree+0xb8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4013      	ands	r3, r2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d019      	beq.n	80044b8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d115      	bne.n	80044b8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <vPortFree+0xb8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	43db      	mvns	r3, r3
 8004496:	401a      	ands	r2, r3
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800449c:	f7ff fa42 	bl	8003924 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	4b07      	ldr	r3, [pc, #28]	@ (80044c4 <vPortFree+0xbc>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4413      	add	r3, r2
 80044aa:	4a06      	ldr	r2, [pc, #24]	@ (80044c4 <vPortFree+0xbc>)
 80044ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044ae:	6938      	ldr	r0, [r7, #16]
 80044b0:	f000 f86c 	bl	800458c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80044b4:	f7ff fa44 	bl	8003940 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80044b8:	bf00      	nop
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20004594 	.word	0x20004594
 80044c4:	2000458c 	.word	0x2000458c

080044c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044ce:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80044d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80044d4:	4b27      	ldr	r3, [pc, #156]	@ (8004574 <prvHeapInit+0xac>)
 80044d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00c      	beq.n	80044fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3307      	adds	r3, #7
 80044e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0307 	bic.w	r3, r3, #7
 80044ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004574 <prvHeapInit+0xac>)
 80044f8:	4413      	add	r3, r2
 80044fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004500:	4a1d      	ldr	r2, [pc, #116]	@ (8004578 <prvHeapInit+0xb0>)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004506:	4b1c      	ldr	r3, [pc, #112]	@ (8004578 <prvHeapInit+0xb0>)
 8004508:	2200      	movs	r2, #0
 800450a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	4413      	add	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004514:	2208      	movs	r2, #8
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1a9b      	subs	r3, r3, r2
 800451a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0307 	bic.w	r3, r3, #7
 8004522:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4a15      	ldr	r2, [pc, #84]	@ (800457c <prvHeapInit+0xb4>)
 8004528:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800452a:	4b14      	ldr	r3, [pc, #80]	@ (800457c <prvHeapInit+0xb4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2200      	movs	r2, #0
 8004530:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004532:	4b12      	ldr	r3, [pc, #72]	@ (800457c <prvHeapInit+0xb4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	1ad2      	subs	r2, r2, r3
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004548:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <prvHeapInit+0xb4>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4a0a      	ldr	r2, [pc, #40]	@ (8004580 <prvHeapInit+0xb8>)
 8004556:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4a09      	ldr	r2, [pc, #36]	@ (8004584 <prvHeapInit+0xbc>)
 800455e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004560:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <prvHeapInit+0xc0>)
 8004562:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004566:	601a      	str	r2, [r3, #0]
}
 8004568:	bf00      	nop
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	20000980 	.word	0x20000980
 8004578:	20004580 	.word	0x20004580
 800457c:	20004588 	.word	0x20004588
 8004580:	20004590 	.word	0x20004590
 8004584:	2000458c 	.word	0x2000458c
 8004588:	20004594 	.word	0x20004594

0800458c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004594:	4b28      	ldr	r3, [pc, #160]	@ (8004638 <prvInsertBlockIntoFreeList+0xac>)
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	e002      	b.n	80045a0 <prvInsertBlockIntoFreeList+0x14>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d8f7      	bhi.n	800459a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	4413      	add	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d108      	bne.n	80045ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	441a      	add	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	441a      	add	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d118      	bne.n	8004614 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b15      	ldr	r3, [pc, #84]	@ (800463c <prvInsertBlockIntoFreeList+0xb0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d00d      	beq.n	800460a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	441a      	add	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e008      	b.n	800461c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800460a:	4b0c      	ldr	r3, [pc, #48]	@ (800463c <prvInsertBlockIntoFreeList+0xb0>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	e003      	b.n	800461c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d002      	beq.n	800462a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800462a:	bf00      	nop
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	20004580 	.word	0x20004580
 800463c:	20004588 	.word	0x20004588

08004640 <_ZdlPvj>:
 8004640:	f000 b800 	b.w	8004644 <_ZdlPv>

08004644 <_ZdlPv>:
 8004644:	f000 b800 	b.w	8004648 <free>

08004648 <free>:
 8004648:	4b02      	ldr	r3, [pc, #8]	@ (8004654 <free+0xc>)
 800464a:	4601      	mov	r1, r0
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	f000 b893 	b.w	8004778 <_free_r>
 8004652:	bf00      	nop
 8004654:	20000010 	.word	0x20000010

08004658 <__malloc_lock>:
 8004658:	4801      	ldr	r0, [pc, #4]	@ (8004660 <__malloc_lock+0x8>)
 800465a:	f000 b88b 	b.w	8004774 <__retarget_lock_acquire_recursive>
 800465e:	bf00      	nop
 8004660:	200046d4 	.word	0x200046d4

08004664 <__malloc_unlock>:
 8004664:	4801      	ldr	r0, [pc, #4]	@ (800466c <__malloc_unlock+0x8>)
 8004666:	f000 b886 	b.w	8004776 <__retarget_lock_release_recursive>
 800466a:	bf00      	nop
 800466c:	200046d4 	.word	0x200046d4

08004670 <memset>:
 8004670:	4402      	add	r2, r0
 8004672:	4603      	mov	r3, r0
 8004674:	4293      	cmp	r3, r2
 8004676:	d100      	bne.n	800467a <memset+0xa>
 8004678:	4770      	bx	lr
 800467a:	f803 1b01 	strb.w	r1, [r3], #1
 800467e:	e7f9      	b.n	8004674 <memset+0x4>

08004680 <_reclaim_reent>:
 8004680:	4b29      	ldr	r3, [pc, #164]	@ (8004728 <_reclaim_reent+0xa8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4283      	cmp	r3, r0
 8004686:	b570      	push	{r4, r5, r6, lr}
 8004688:	4604      	mov	r4, r0
 800468a:	d04b      	beq.n	8004724 <_reclaim_reent+0xa4>
 800468c:	69c3      	ldr	r3, [r0, #28]
 800468e:	b1ab      	cbz	r3, 80046bc <_reclaim_reent+0x3c>
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	b16b      	cbz	r3, 80046b0 <_reclaim_reent+0x30>
 8004694:	2500      	movs	r5, #0
 8004696:	69e3      	ldr	r3, [r4, #28]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	5959      	ldr	r1, [r3, r5]
 800469c:	2900      	cmp	r1, #0
 800469e:	d13b      	bne.n	8004718 <_reclaim_reent+0x98>
 80046a0:	3504      	adds	r5, #4
 80046a2:	2d80      	cmp	r5, #128	@ 0x80
 80046a4:	d1f7      	bne.n	8004696 <_reclaim_reent+0x16>
 80046a6:	69e3      	ldr	r3, [r4, #28]
 80046a8:	4620      	mov	r0, r4
 80046aa:	68d9      	ldr	r1, [r3, #12]
 80046ac:	f000 f864 	bl	8004778 <_free_r>
 80046b0:	69e3      	ldr	r3, [r4, #28]
 80046b2:	6819      	ldr	r1, [r3, #0]
 80046b4:	b111      	cbz	r1, 80046bc <_reclaim_reent+0x3c>
 80046b6:	4620      	mov	r0, r4
 80046b8:	f000 f85e 	bl	8004778 <_free_r>
 80046bc:	6961      	ldr	r1, [r4, #20]
 80046be:	b111      	cbz	r1, 80046c6 <_reclaim_reent+0x46>
 80046c0:	4620      	mov	r0, r4
 80046c2:	f000 f859 	bl	8004778 <_free_r>
 80046c6:	69e1      	ldr	r1, [r4, #28]
 80046c8:	b111      	cbz	r1, 80046d0 <_reclaim_reent+0x50>
 80046ca:	4620      	mov	r0, r4
 80046cc:	f000 f854 	bl	8004778 <_free_r>
 80046d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80046d2:	b111      	cbz	r1, 80046da <_reclaim_reent+0x5a>
 80046d4:	4620      	mov	r0, r4
 80046d6:	f000 f84f 	bl	8004778 <_free_r>
 80046da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046dc:	b111      	cbz	r1, 80046e4 <_reclaim_reent+0x64>
 80046de:	4620      	mov	r0, r4
 80046e0:	f000 f84a 	bl	8004778 <_free_r>
 80046e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80046e6:	b111      	cbz	r1, 80046ee <_reclaim_reent+0x6e>
 80046e8:	4620      	mov	r0, r4
 80046ea:	f000 f845 	bl	8004778 <_free_r>
 80046ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80046f0:	b111      	cbz	r1, 80046f8 <_reclaim_reent+0x78>
 80046f2:	4620      	mov	r0, r4
 80046f4:	f000 f840 	bl	8004778 <_free_r>
 80046f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80046fa:	b111      	cbz	r1, 8004702 <_reclaim_reent+0x82>
 80046fc:	4620      	mov	r0, r4
 80046fe:	f000 f83b 	bl	8004778 <_free_r>
 8004702:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004704:	b111      	cbz	r1, 800470c <_reclaim_reent+0x8c>
 8004706:	4620      	mov	r0, r4
 8004708:	f000 f836 	bl	8004778 <_free_r>
 800470c:	6a23      	ldr	r3, [r4, #32]
 800470e:	b14b      	cbz	r3, 8004724 <_reclaim_reent+0xa4>
 8004710:	4620      	mov	r0, r4
 8004712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004716:	4718      	bx	r3
 8004718:	680e      	ldr	r6, [r1, #0]
 800471a:	4620      	mov	r0, r4
 800471c:	f000 f82c 	bl	8004778 <_free_r>
 8004720:	4631      	mov	r1, r6
 8004722:	e7bb      	b.n	800469c <_reclaim_reent+0x1c>
 8004724:	bd70      	pop	{r4, r5, r6, pc}
 8004726:	bf00      	nop
 8004728:	20000010 	.word	0x20000010

0800472c <__libc_init_array>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	4d0d      	ldr	r5, [pc, #52]	@ (8004764 <__libc_init_array+0x38>)
 8004730:	4c0d      	ldr	r4, [pc, #52]	@ (8004768 <__libc_init_array+0x3c>)
 8004732:	1b64      	subs	r4, r4, r5
 8004734:	10a4      	asrs	r4, r4, #2
 8004736:	2600      	movs	r6, #0
 8004738:	42a6      	cmp	r6, r4
 800473a:	d109      	bne.n	8004750 <__libc_init_array+0x24>
 800473c:	4d0b      	ldr	r5, [pc, #44]	@ (800476c <__libc_init_array+0x40>)
 800473e:	4c0c      	ldr	r4, [pc, #48]	@ (8004770 <__libc_init_array+0x44>)
 8004740:	f000 f864 	bl	800480c <_init>
 8004744:	1b64      	subs	r4, r4, r5
 8004746:	10a4      	asrs	r4, r4, #2
 8004748:	2600      	movs	r6, #0
 800474a:	42a6      	cmp	r6, r4
 800474c:	d105      	bne.n	800475a <__libc_init_array+0x2e>
 800474e:	bd70      	pop	{r4, r5, r6, pc}
 8004750:	f855 3b04 	ldr.w	r3, [r5], #4
 8004754:	4798      	blx	r3
 8004756:	3601      	adds	r6, #1
 8004758:	e7ee      	b.n	8004738 <__libc_init_array+0xc>
 800475a:	f855 3b04 	ldr.w	r3, [r5], #4
 800475e:	4798      	blx	r3
 8004760:	3601      	adds	r6, #1
 8004762:	e7f2      	b.n	800474a <__libc_init_array+0x1e>
 8004764:	08004890 	.word	0x08004890
 8004768:	08004890 	.word	0x08004890
 800476c:	08004890 	.word	0x08004890
 8004770:	08004894 	.word	0x08004894

08004774 <__retarget_lock_acquire_recursive>:
 8004774:	4770      	bx	lr

08004776 <__retarget_lock_release_recursive>:
 8004776:	4770      	bx	lr

08004778 <_free_r>:
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	4605      	mov	r5, r0
 800477c:	2900      	cmp	r1, #0
 800477e:	d041      	beq.n	8004804 <_free_r+0x8c>
 8004780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004784:	1f0c      	subs	r4, r1, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	bfb8      	it	lt
 800478a:	18e4      	addlt	r4, r4, r3
 800478c:	f7ff ff64 	bl	8004658 <__malloc_lock>
 8004790:	4a1d      	ldr	r2, [pc, #116]	@ (8004808 <_free_r+0x90>)
 8004792:	6813      	ldr	r3, [r2, #0]
 8004794:	b933      	cbnz	r3, 80047a4 <_free_r+0x2c>
 8004796:	6063      	str	r3, [r4, #4]
 8004798:	6014      	str	r4, [r2, #0]
 800479a:	4628      	mov	r0, r5
 800479c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047a0:	f7ff bf60 	b.w	8004664 <__malloc_unlock>
 80047a4:	42a3      	cmp	r3, r4
 80047a6:	d908      	bls.n	80047ba <_free_r+0x42>
 80047a8:	6820      	ldr	r0, [r4, #0]
 80047aa:	1821      	adds	r1, r4, r0
 80047ac:	428b      	cmp	r3, r1
 80047ae:	bf01      	itttt	eq
 80047b0:	6819      	ldreq	r1, [r3, #0]
 80047b2:	685b      	ldreq	r3, [r3, #4]
 80047b4:	1809      	addeq	r1, r1, r0
 80047b6:	6021      	streq	r1, [r4, #0]
 80047b8:	e7ed      	b.n	8004796 <_free_r+0x1e>
 80047ba:	461a      	mov	r2, r3
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	b10b      	cbz	r3, 80047c4 <_free_r+0x4c>
 80047c0:	42a3      	cmp	r3, r4
 80047c2:	d9fa      	bls.n	80047ba <_free_r+0x42>
 80047c4:	6811      	ldr	r1, [r2, #0]
 80047c6:	1850      	adds	r0, r2, r1
 80047c8:	42a0      	cmp	r0, r4
 80047ca:	d10b      	bne.n	80047e4 <_free_r+0x6c>
 80047cc:	6820      	ldr	r0, [r4, #0]
 80047ce:	4401      	add	r1, r0
 80047d0:	1850      	adds	r0, r2, r1
 80047d2:	4283      	cmp	r3, r0
 80047d4:	6011      	str	r1, [r2, #0]
 80047d6:	d1e0      	bne.n	800479a <_free_r+0x22>
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	6053      	str	r3, [r2, #4]
 80047de:	4408      	add	r0, r1
 80047e0:	6010      	str	r0, [r2, #0]
 80047e2:	e7da      	b.n	800479a <_free_r+0x22>
 80047e4:	d902      	bls.n	80047ec <_free_r+0x74>
 80047e6:	230c      	movs	r3, #12
 80047e8:	602b      	str	r3, [r5, #0]
 80047ea:	e7d6      	b.n	800479a <_free_r+0x22>
 80047ec:	6820      	ldr	r0, [r4, #0]
 80047ee:	1821      	adds	r1, r4, r0
 80047f0:	428b      	cmp	r3, r1
 80047f2:	bf04      	itt	eq
 80047f4:	6819      	ldreq	r1, [r3, #0]
 80047f6:	685b      	ldreq	r3, [r3, #4]
 80047f8:	6063      	str	r3, [r4, #4]
 80047fa:	bf04      	itt	eq
 80047fc:	1809      	addeq	r1, r1, r0
 80047fe:	6021      	streq	r1, [r4, #0]
 8004800:	6054      	str	r4, [r2, #4]
 8004802:	e7ca      	b.n	800479a <_free_r+0x22>
 8004804:	bd38      	pop	{r3, r4, r5, pc}
 8004806:	bf00      	nop
 8004808:	20004598 	.word	0x20004598

0800480c <_init>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	bf00      	nop
 8004810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004812:	bc08      	pop	{r3}
 8004814:	469e      	mov	lr, r3
 8004816:	4770      	bx	lr

08004818 <_fini>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	bf00      	nop
 800481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481e:	bc08      	pop	{r3}
 8004820:	469e      	mov	lr, r3
 8004822:	4770      	bx	lr
