
flightsoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004620  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080047f0  080047f0  000057f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004808  08004808  0000619c  2**0
                  CONTENTS
  4 .ARM          00000008  08004808  08004808  00005808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004810  08004810  0000619c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004810  08004810  00005810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004814  08004814  00005814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004818  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000005c  08004874  0000605c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000fc  08004914  000060fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008b0  2000019c  080049b4  0000619c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a4c  080049b4  00006a4c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000619c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018ffd  00000000  00000000  000061cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000031e8  00000000  00000000  0001f1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001490  00000000  00000000  000223b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001007  00000000  00000000  00023848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005480  00000000  00000000  0002484f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017ec7  00000000  00000000  00029ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ff8a0  00000000  00000000  00041b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00141436  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005880  00000000  00000000  0014147c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  00146cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000019c 	.word	0x2000019c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080047d8 	.word	0x080047d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a0 	.word	0x200001a0
 800020c:	080047d8 	.word	0x080047d8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <fsw_main>:
 * Create the list of workers for the FSW
 */
static void create_workers();

extern "C" int fsw_main()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
    create_workers();
 8000504:	f000 f803 	bl	800050e <_ZL14create_workersv>
    return 0;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	bd80      	pop	{r7, pc}

0800050e <_ZL14create_workersv>:

void create_workers()
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
    
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fc71 	bl	8000e06 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f80e 	bl	8000544 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f920 	bl	800076c <MX_GPIO_Init>
  MX_ETH_Init();
 800052c:	f000 f872 	bl	8000614 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000530:	f000 f8be 	bl	80006b0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000534:	f000 f8ec 	bl	8000710 <MX_USB_OTG_FS_PCD_Init>

  return fsw_main();
 8000538:	f7ff ffe2 	bl	8000500 <fsw_main>
 800053c:	4603      	mov	r3, r0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	@ 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	@ 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f004 f914 	bl	8004780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000568:	f001 fbce 	bl	8001d08 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	4b27      	ldr	r3, [pc, #156]	@ (800060c <SystemClock_Config+0xc8>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000570:	4a26      	ldr	r2, [pc, #152]	@ (800060c <SystemClock_Config+0xc8>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	@ 0x40
 8000578:	4b24      	ldr	r3, [pc, #144]	@ (800060c <SystemClock_Config+0xc8>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000584:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <SystemClock_Config+0xcc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800058c:	4a20      	ldr	r2, [pc, #128]	@ (8000610 <SystemClock_Config+0xcc>)
 800058e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b1e      	ldr	r3, [pc, #120]	@ (8000610 <SystemClock_Config+0xcc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b4:	2304      	movs	r3, #4
 80005b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005b8:	2348      	movs	r3, #72	@ 0x48
 80005ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005c0:	2303      	movs	r3, #3
 80005c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 fbad 	bl	8001d28 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d4:	f000 f97b 	bl	80008ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2302      	movs	r3, #2
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2102      	movs	r1, #2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 fe3b 	bl	8002270 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000600:	f000 f965 	bl	80008ce <Error_Handler>
  }
}
 8000604:	bf00      	nop
 8000606:	3750      	adds	r7, #80	@ 0x50
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_ETH_Init+0x84>)
 800061a:	4a20      	ldr	r2, [pc, #128]	@ (800069c <MX_ETH_Init+0x88>)
 800061c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800061e:	4b20      	ldr	r3, [pc, #128]	@ (80006a0 <MX_ETH_Init+0x8c>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000624:	4b1e      	ldr	r3, [pc, #120]	@ (80006a0 <MX_ETH_Init+0x8c>)
 8000626:	2280      	movs	r2, #128	@ 0x80
 8000628:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800062a:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <MX_ETH_Init+0x8c>)
 800062c:	22e1      	movs	r2, #225	@ 0xe1
 800062e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <MX_ETH_Init+0x8c>)
 8000632:	2200      	movs	r2, #0
 8000634:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000636:	4b1a      	ldr	r3, [pc, #104]	@ (80006a0 <MX_ETH_Init+0x8c>)
 8000638:	2200      	movs	r2, #0
 800063a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800063c:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <MX_ETH_Init+0x8c>)
 800063e:	2200      	movs	r2, #0
 8000640:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000642:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <MX_ETH_Init+0x84>)
 8000644:	4a16      	ldr	r2, [pc, #88]	@ (80006a0 <MX_ETH_Init+0x8c>)
 8000646:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000648:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <MX_ETH_Init+0x84>)
 800064a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800064e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000650:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_ETH_Init+0x84>)
 8000652:	4a14      	ldr	r2, [pc, #80]	@ (80006a4 <MX_ETH_Init+0x90>)
 8000654:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <MX_ETH_Init+0x84>)
 8000658:	4a13      	ldr	r2, [pc, #76]	@ (80006a8 <MX_ETH_Init+0x94>)
 800065a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800065c:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <MX_ETH_Init+0x84>)
 800065e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000662:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <MX_ETH_Init+0x84>)
 8000666:	f000 fd01 	bl	800106c <HAL_ETH_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000670:	f000 f92d 	bl	80008ce <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000674:	2238      	movs	r2, #56	@ 0x38
 8000676:	2100      	movs	r1, #0
 8000678:	480c      	ldr	r0, [pc, #48]	@ (80006ac <MX_ETH_Init+0x98>)
 800067a:	f004 f881 	bl	8004780 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800067e:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <MX_ETH_Init+0x98>)
 8000680:	2221      	movs	r2, #33	@ 0x21
 8000682:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <MX_ETH_Init+0x98>)
 8000686:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800068a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800068c:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <MX_ETH_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200001f0 	.word	0x200001f0
 800069c:	40028000 	.word	0x40028000
 80006a0:	20000808 	.word	0x20000808
 80006a4:	200000fc 	.word	0x200000fc
 80006a8:	2000005c 	.word	0x2000005c
 80006ac:	200001b8 	.word	0x200001b8

080006b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006b4:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_USART3_UART_Init+0x58>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	@ (800070c <MX_USART3_UART_Init+0x5c>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ba:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <MX_USART3_UART_Init+0x58>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_USART3_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_USART3_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_USART3_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_USART3_UART_Init+0x58>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <MX_USART3_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_USART3_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <MX_USART3_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_USART3_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_USART3_UART_Init+0x58>)
 80006f4:	f002 fed8 	bl	80034a8 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80006fe:	f000 f8e6 	bl	80008ce <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200002a0 	.word	0x200002a0
 800070c:	40004800 	.word	0x40004800

08000710 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000714:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000716:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800071a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071e:	2206      	movs	r2, #6
 8000720:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000724:	2202      	movs	r2, #2
 8000726:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000730:	2202      	movs	r2, #2
 8000732:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000736:	2201      	movs	r2, #1
 8000738:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000740:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000748:	2201      	movs	r2, #1
 800074a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000754:	f001 f99d 	bl	8001a92 <HAL_PCD_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f8b6 	bl	80008ce <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000328 	.word	0x20000328

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	@ 0x30
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	4b47      	ldr	r3, [pc, #284]	@ (80008a0 <MX_GPIO_Init+0x134>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a46      	ldr	r2, [pc, #280]	@ (80008a0 <MX_GPIO_Init+0x134>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b44      	ldr	r3, [pc, #272]	@ (80008a0 <MX_GPIO_Init+0x134>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	4b41      	ldr	r3, [pc, #260]	@ (80008a0 <MX_GPIO_Init+0x134>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a40      	ldr	r2, [pc, #256]	@ (80008a0 <MX_GPIO_Init+0x134>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b3e      	ldr	r3, [pc, #248]	@ (80008a0 <MX_GPIO_Init+0x134>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b3b      	ldr	r3, [pc, #236]	@ (80008a0 <MX_GPIO_Init+0x134>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a3a      	ldr	r2, [pc, #232]	@ (80008a0 <MX_GPIO_Init+0x134>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b38      	ldr	r3, [pc, #224]	@ (80008a0 <MX_GPIO_Init+0x134>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b35      	ldr	r3, [pc, #212]	@ (80008a0 <MX_GPIO_Init+0x134>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a34      	ldr	r2, [pc, #208]	@ (80008a0 <MX_GPIO_Init+0x134>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b32      	ldr	r3, [pc, #200]	@ (80008a0 <MX_GPIO_Init+0x134>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	4b2f      	ldr	r3, [pc, #188]	@ (80008a0 <MX_GPIO_Init+0x134>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a2e      	ldr	r2, [pc, #184]	@ (80008a0 <MX_GPIO_Init+0x134>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b2c      	ldr	r3, [pc, #176]	@ (80008a0 <MX_GPIO_Init+0x134>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fa:	4b29      	ldr	r3, [pc, #164]	@ (80008a0 <MX_GPIO_Init+0x134>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a28      	ldr	r2, [pc, #160]	@ (80008a0 <MX_GPIO_Init+0x134>)
 8000800:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b26      	ldr	r3, [pc, #152]	@ (80008a0 <MX_GPIO_Init+0x134>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000818:	4822      	ldr	r0, [pc, #136]	@ (80008a4 <MX_GPIO_Init+0x138>)
 800081a:	f001 f921 	bl	8001a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2140      	movs	r1, #64	@ 0x40
 8000822:	4821      	ldr	r0, [pc, #132]	@ (80008a8 <MX_GPIO_Init+0x13c>)
 8000824:	f001 f91c 	bl	8001a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000828:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	481b      	ldr	r0, [pc, #108]	@ (80008ac <MX_GPIO_Init+0x140>)
 8000840:	f000 ff62 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000844:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4811      	ldr	r0, [pc, #68]	@ (80008a4 <MX_GPIO_Init+0x138>)
 800085e:	f000 ff53 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000862:	2340      	movs	r3, #64	@ 0x40
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	480b      	ldr	r0, [pc, #44]	@ (80008a8 <MX_GPIO_Init+0x13c>)
 800087a:	f000 ff45 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800087e:	2380      	movs	r3, #128	@ 0x80
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_GPIO_Init+0x13c>)
 8000892:	f000 ff39 	bl	8001708 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000896:	bf00      	nop
 8000898:	3730      	adds	r7, #48	@ 0x30
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020400 	.word	0x40020400
 80008a8:	40021800 	.word	0x40021800
 80008ac:	40020800 	.word	0x40020800

080008b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008c0:	d101      	bne.n	80008c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008c2:	f000 faad 	bl	8000e20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d2:	b672      	cpsid	i
}
 80008d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d6:	bf00      	nop
 80008d8:	e7fd      	b.n	80008d6 <Error_Handler+0x8>
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e6:	4a10      	ldr	r2, [pc, #64]	@ (8000928 <HAL_MspInit+0x4c>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <HAL_MspInit+0x4c>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000904:	6453      	str	r3, [r2, #68]	@ 0x44
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	210f      	movs	r1, #15
 8000916:	f06f 0001 	mvn.w	r0, #1
 800091a:	f000 fb7d 	bl	8001018 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800

0800092c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	@ 0x38
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a4e      	ldr	r2, [pc, #312]	@ (8000a84 <HAL_ETH_MspInit+0x158>)
 800094a:	4293      	cmp	r3, r2
 800094c:	f040 8096 	bne.w	8000a7c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000950:	4b4d      	ldr	r3, [pc, #308]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000954:	4a4c      	ldr	r2, [pc, #304]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 8000956:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800095a:	6313      	str	r3, [r2, #48]	@ 0x30
 800095c:	4b4a      	ldr	r3, [pc, #296]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000964:	623b      	str	r3, [r7, #32]
 8000966:	6a3b      	ldr	r3, [r7, #32]
 8000968:	4b47      	ldr	r3, [pc, #284]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096c:	4a46      	ldr	r2, [pc, #280]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 800096e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000972:	6313      	str	r3, [r2, #48]	@ 0x30
 8000974:	4b44      	ldr	r3, [pc, #272]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000978:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800097c:	61fb      	str	r3, [r7, #28]
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	4b41      	ldr	r3, [pc, #260]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000984:	4a40      	ldr	r2, [pc, #256]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 8000986:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800098a:	6313      	str	r3, [r2, #48]	@ 0x30
 800098c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000990:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000994:	61bb      	str	r3, [r7, #24]
 8000996:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000998:	4b3b      	ldr	r3, [pc, #236]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099c:	4a3a      	ldr	r2, [pc, #232]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a4:	4b38      	ldr	r3, [pc, #224]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	617b      	str	r3, [r7, #20]
 80009ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b35      	ldr	r3, [pc, #212]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b4:	4a34      	ldr	r2, [pc, #208]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80009bc:	4b32      	ldr	r3, [pc, #200]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009cc:	4a2e      	ldr	r2, [pc, #184]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 80009ce:	f043 0302 	orr.w	r3, r3, #2
 80009d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d8:	f003 0302 	and.w	r3, r3, #2
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e0:	4b29      	ldr	r3, [pc, #164]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e4:	4a28      	ldr	r2, [pc, #160]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 80009e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ec:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <HAL_ETH_MspInit+0x15c>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009f8:	2332      	movs	r3, #50	@ 0x32
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a08:	230b      	movs	r3, #11
 8000a0a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	481e      	ldr	r0, [pc, #120]	@ (8000a8c <HAL_ETH_MspInit+0x160>)
 8000a14:	f000 fe78 	bl	8001708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a18:	2386      	movs	r3, #134	@ 0x86
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a28:	230b      	movs	r3, #11
 8000a2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4817      	ldr	r0, [pc, #92]	@ (8000a90 <HAL_ETH_MspInit+0x164>)
 8000a34:	f000 fe68 	bl	8001708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a4a:	230b      	movs	r3, #11
 8000a4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	480f      	ldr	r0, [pc, #60]	@ (8000a94 <HAL_ETH_MspInit+0x168>)
 8000a56:	f000 fe57 	bl	8001708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a5a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a6c:	230b      	movs	r3, #11
 8000a6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	4808      	ldr	r0, [pc, #32]	@ (8000a98 <HAL_ETH_MspInit+0x16c>)
 8000a78:	f000 fe46 	bl	8001708 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	3738      	adds	r7, #56	@ 0x38
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40028000 	.word	0x40028000
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40020400 	.word	0x40020400
 8000a98:	40021800 	.word	0x40021800

08000a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b0aa      	sub	sp, #168	@ 0xa8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	2284      	movs	r2, #132	@ 0x84
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f003 fe5f 	bl	8004780 <memset>
  if(huart->Instance==USART3)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a22      	ldr	r2, [pc, #136]	@ (8000b50 <HAL_UART_MspInit+0xb4>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d13c      	bne.n	8000b46 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000acc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ad0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 fe20 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ae6:	f7ff fef2 	bl	80008ce <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aea:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <HAL_UART_MspInit+0xb8>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	4a19      	ldr	r2, [pc, #100]	@ (8000b54 <HAL_UART_MspInit+0xb8>)
 8000af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af6:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <HAL_UART_MspInit+0xb8>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <HAL_UART_MspInit+0xb8>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a13      	ldr	r2, [pc, #76]	@ (8000b54 <HAL_UART_MspInit+0xb8>)
 8000b08:	f043 0308 	orr.w	r3, r3, #8
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <HAL_UART_MspInit+0xb8>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0308 	and.w	r3, r3, #8
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b34:	2307      	movs	r3, #7
 8000b36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <HAL_UART_MspInit+0xbc>)
 8000b42:	f000 fde1 	bl	8001708 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	37a8      	adds	r7, #168	@ 0xa8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40004800 	.word	0x40004800
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020c00 	.word	0x40020c00

08000b5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b0ac      	sub	sp, #176	@ 0xb0
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b74:	f107 0318 	add.w	r3, r7, #24
 8000b78:	2284      	movs	r2, #132	@ 0x84
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f003 fdff 	bl	8004780 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b8a:	d159      	bne.n	8000c40 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b8c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000b90:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b98:	f107 0318 	add.w	r3, r7, #24
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f001 fdbf 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ba8:	f7ff fe91 	bl	80008ce <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b26      	ldr	r3, [pc, #152]	@ (8000c48 <HAL_PCD_MspInit+0xec>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb0:	4a25      	ldr	r2, [pc, #148]	@ (8000c48 <HAL_PCD_MspInit+0xec>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb8:	4b23      	ldr	r3, [pc, #140]	@ (8000c48 <HAL_PCD_MspInit+0xec>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bc4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000bc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bde:	230a      	movs	r3, #10
 8000be0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000be8:	4619      	mov	r1, r3
 8000bea:	4818      	ldr	r0, [pc, #96]	@ (8000c4c <HAL_PCD_MspInit+0xf0>)
 8000bec:	f000 fd8c 	bl	8001708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4810      	ldr	r0, [pc, #64]	@ (8000c4c <HAL_PCD_MspInit+0xf0>)
 8000c0c:	f000 fd7c 	bl	8001708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c10:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <HAL_PCD_MspInit+0xec>)
 8000c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c14:	4a0c      	ldr	r2, [pc, #48]	@ (8000c48 <HAL_PCD_MspInit+0xec>)
 8000c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c1a:	6353      	str	r3, [r2, #52]	@ 0x34
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <HAL_PCD_MspInit+0xec>)
 8000c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <HAL_PCD_MspInit+0xec>)
 8000c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2c:	4a06      	ldr	r2, [pc, #24]	@ (8000c48 <HAL_PCD_MspInit+0xec>)
 8000c2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c32:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c34:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <HAL_PCD_MspInit+0xec>)
 8000c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c40:	bf00      	nop
 8000c42:	37b0      	adds	r7, #176	@ 0xb0
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000

08000c50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	@ 0x38
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000c60:	4b34      	ldr	r3, [pc, #208]	@ (8000d34 <HAL_InitTick+0xe4>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c64:	4a33      	ldr	r2, [pc, #204]	@ (8000d34 <HAL_InitTick+0xe4>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6c:	4b31      	ldr	r3, [pc, #196]	@ (8000d34 <HAL_InitTick+0xe4>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c78:	f107 0210 	add.w	r2, r7, #16
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4611      	mov	r1, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f001 fd1a 	bl	80026bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c88:	6a3b      	ldr	r3, [r7, #32]
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d103      	bne.n	8000c9a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c92:	f001 fceb 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 8000c96:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c98:	e004      	b.n	8000ca4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c9a:	f001 fce7 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ca6:	4a24      	ldr	r2, [pc, #144]	@ (8000d38 <HAL_InitTick+0xe8>)
 8000ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cac:	0c9b      	lsrs	r3, r3, #18
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000cb2:	4b22      	ldr	r3, [pc, #136]	@ (8000d3c <HAL_InitTick+0xec>)
 8000cb4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000cba:	4b20      	ldr	r3, [pc, #128]	@ (8000d3c <HAL_InitTick+0xec>)
 8000cbc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cc0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d3c <HAL_InitTick+0xec>)
 8000cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cc6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <HAL_InitTick+0xec>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <HAL_InitTick+0xec>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <HAL_InitTick+0xec>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000cda:	4818      	ldr	r0, [pc, #96]	@ (8000d3c <HAL_InitTick+0xec>)
 8000cdc:	f002 f910 	bl	8002f00 <HAL_TIM_Base_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ce6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d11b      	bne.n	8000d26 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000cee:	4813      	ldr	r0, [pc, #76]	@ (8000d3c <HAL_InitTick+0xec>)
 8000cf0:	f002 f968 	bl	8002fc4 <HAL_TIM_Base_Start_IT>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000cfa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d111      	bne.n	8000d26 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d02:	201c      	movs	r0, #28
 8000d04:	f000 f9a4 	bl	8001050 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b0f      	cmp	r3, #15
 8000d0c:	d808      	bhi.n	8000d20 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	201c      	movs	r0, #28
 8000d14:	f000 f980 	bl	8001018 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d18:	4a09      	ldr	r2, [pc, #36]	@ (8000d40 <HAL_InitTick+0xf0>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	e002      	b.n	8000d26 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d26:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3738      	adds	r7, #56	@ 0x38
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	431bde83 	.word	0x431bde83
 8000d3c:	20000810 	.word	0x20000810
 8000d40:	20000004 	.word	0x20000004

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <NMI_Handler+0x4>

08000d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <BusFault_Handler+0x4>

08000d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <UsageFault_Handler+0x4>

08000d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d80:	4802      	ldr	r0, [pc, #8]	@ (8000d8c <TIM2_IRQHandler+0x10>)
 8000d82:	f002 f997 	bl	80030b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000810 	.word	0x20000810

08000d90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <SystemInit+0x20>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d9a:	4a05      	ldr	r2, [pc, #20]	@ (8000db0 <SystemInit+0x20>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db8:	f7ff ffea 	bl	8000d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dbc:	480c      	ldr	r0, [pc, #48]	@ (8000df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dbe:	490d      	ldr	r1, [pc, #52]	@ (8000df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f003 fcd5 	bl	8004790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fb99 	bl	800051c <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000df8:	08004818 	.word	0x08004818
  ldr r2, =_sbss
 8000dfc:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8000e00:	20000a4c 	.word	0x20000a4c

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>

08000e06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	f000 f8f9 	bl	8001002 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e10:	200f      	movs	r0, #15
 8000e12:	f7ff ff1d 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e16:	f7ff fd61 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	2000085c 	.word	0x2000085c

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	2000085c 	.word	0x2000085c

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <__NVIC_SetPriorityGrouping+0x40>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed6:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60d3      	str	r3, [r2, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00
 8000eec:	05fa0000 	.word	0x05fa0000

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4907      	ldr	r1, [pc, #28]	@ (8000f44 <__NVIC_EnableIRQ+0x38>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	@ (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	@ (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	@ 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	@ 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff4c 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102a:	f7ff ff61 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 800102e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	6978      	ldr	r0, [r7, #20]
 8001036:	f7ff ffb1 	bl	8000f9c <NVIC_EncodePriority>
 800103a:	4602      	mov	r2, r0
 800103c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff80 	bl	8000f48 <__NVIC_SetPriority>
}
 8001048:	bf00      	nop
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff54 	bl	8000f0c <__NVIC_EnableIRQ>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e086      	b.n	800118c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001084:	2b00      	cmp	r3, #0
 8001086:	d106      	bne.n	8001096 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2223      	movs	r2, #35	@ 0x23
 800108c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff fc4b 	bl	800092c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b3f      	ldr	r3, [pc, #252]	@ (8001194 <HAL_ETH_Init+0x128>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109a:	4a3e      	ldr	r2, [pc, #248]	@ (8001194 <HAL_ETH_Init+0x128>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001194 <HAL_ETH_Init+0x128>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <HAL_ETH_Init+0x12c>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4a39      	ldr	r2, [pc, #228]	@ (8001198 <HAL_ETH_Init+0x12c>)
 80010b4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80010b8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80010ba:	4b37      	ldr	r3, [pc, #220]	@ (8001198 <HAL_ETH_Init+0x12c>)
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	4935      	ldr	r1, [pc, #212]	@ (8001198 <HAL_ETH_Init+0x12c>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80010c8:	4b33      	ldr	r3, [pc, #204]	@ (8001198 <HAL_ETH_Init+0x12c>)
 80010ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80010e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010e4:	f7ff feb0 	bl	8000e48 <HAL_GetTick>
 80010e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010ea:	e011      	b.n	8001110 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80010ec:	f7ff feac 	bl	8000e48 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010fa:	d909      	bls.n	8001110 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2204      	movs	r2, #4
 8001100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	22e0      	movs	r2, #224	@ 0xe0
 8001108:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e03d      	b.n	800118c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1e4      	bne.n	80010ec <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f97a 	bl	800141c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 fa25 	bl	8001578 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 fa7b 	bl	800162a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	461a      	mov	r2, r3
 800113a:	2100      	movs	r1, #0
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f9e3 	bl	8001508 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001150:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <HAL_ETH_Init+0x130>)
 8001160:	430b      	orrs	r3, r1
 8001162:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001176:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2210      	movs	r2, #16
 8001186:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40023800 	.word	0x40023800
 8001198:	40013800 	.word	0x40013800
 800119c:	00020060 	.word	0x00020060

080011a0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	4b53      	ldr	r3, [pc, #332]	@ (8001304 <ETH_SetMACConfig+0x164>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	7b9b      	ldrb	r3, [r3, #14]
 80011be:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	7c12      	ldrb	r2, [r2, #16]
 80011c4:	2a00      	cmp	r2, #0
 80011c6:	d102      	bne.n	80011ce <ETH_SetMACConfig+0x2e>
 80011c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80011cc:	e000      	b.n	80011d0 <ETH_SetMACConfig+0x30>
 80011ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80011d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	7c52      	ldrb	r2, [r2, #17]
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	d102      	bne.n	80011e0 <ETH_SetMACConfig+0x40>
 80011da:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011de:	e000      	b.n	80011e2 <ETH_SetMACConfig+0x42>
 80011e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80011e2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80011e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	7fdb      	ldrb	r3, [r3, #31]
 80011ee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80011f0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80011f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	7f92      	ldrb	r2, [r2, #30]
 80011fc:	2a00      	cmp	r2, #0
 80011fe:	d102      	bne.n	8001206 <ETH_SetMACConfig+0x66>
 8001200:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001204:	e000      	b.n	8001208 <ETH_SetMACConfig+0x68>
 8001206:	2200      	movs	r2, #0
                        macconf->Speed |
 8001208:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	7f1b      	ldrb	r3, [r3, #28]
 800120e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001210:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001216:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	791b      	ldrb	r3, [r3, #4]
 800121c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800121e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001226:	2a00      	cmp	r2, #0
 8001228:	d102      	bne.n	8001230 <ETH_SetMACConfig+0x90>
 800122a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800122e:	e000      	b.n	8001232 <ETH_SetMACConfig+0x92>
 8001230:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001232:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	7bdb      	ldrb	r3, [r3, #15]
 8001238:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800123a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001240:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001248:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800124a:	4313      	orrs	r3, r2
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001262:	2001      	movs	r0, #1
 8001264:	f7ff fdfc 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800127e:	4013      	ands	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001286:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800128e:	2a00      	cmp	r2, #0
 8001290:	d101      	bne.n	8001296 <ETH_SetMACConfig+0xf6>
 8001292:	2280      	movs	r2, #128	@ 0x80
 8001294:	e000      	b.n	8001298 <ETH_SetMACConfig+0xf8>
 8001296:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001298:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800129e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80012a6:	2a01      	cmp	r2, #1
 80012a8:	d101      	bne.n	80012ae <ETH_SetMACConfig+0x10e>
 80012aa:	2208      	movs	r2, #8
 80012ac:	e000      	b.n	80012b0 <ETH_SetMACConfig+0x110>
 80012ae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80012b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80012b8:	2a01      	cmp	r2, #1
 80012ba:	d101      	bne.n	80012c0 <ETH_SetMACConfig+0x120>
 80012bc:	2204      	movs	r2, #4
 80012be:	e000      	b.n	80012c2 <ETH_SetMACConfig+0x122>
 80012c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80012c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80012ca:	2a01      	cmp	r2, #1
 80012cc:	d101      	bne.n	80012d2 <ETH_SetMACConfig+0x132>
 80012ce:	2202      	movs	r2, #2
 80012d0:	e000      	b.n	80012d4 <ETH_SetMACConfig+0x134>
 80012d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80012d4:	4313      	orrs	r3, r2
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4313      	orrs	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f7ff fdb7 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	619a      	str	r2, [r3, #24]
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	fd20810f 	.word	0xfd20810f

08001308 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	4b3d      	ldr	r3, [pc, #244]	@ (8001418 <ETH_SetDMAConfig+0x110>)
 8001322:	4013      	ands	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	7b1b      	ldrb	r3, [r3, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <ETH_SetDMAConfig+0x2c>
 800132e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001332:	e000      	b.n	8001336 <ETH_SetDMAConfig+0x2e>
 8001334:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	7b5b      	ldrb	r3, [r3, #13]
 800133a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800133c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	7f52      	ldrb	r2, [r2, #29]
 8001342:	2a00      	cmp	r2, #0
 8001344:	d102      	bne.n	800134c <ETH_SetDMAConfig+0x44>
 8001346:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800134a:	e000      	b.n	800134e <ETH_SetDMAConfig+0x46>
 800134c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800134e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	7b9b      	ldrb	r3, [r3, #14]
 8001354:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001356:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800135c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	7f1b      	ldrb	r3, [r3, #28]
 8001362:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001364:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	7f9b      	ldrb	r3, [r3, #30]
 800136a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800136c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001372:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800137a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800137c:	4313      	orrs	r3, r2
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	4313      	orrs	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800138c:	461a      	mov	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800139e:	2001      	movs	r0, #1
 80013a0:	f7ff fd5e 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013ac:	461a      	mov	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	791b      	ldrb	r3, [r3, #4]
 80013b6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80013bc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80013c2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80013c8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013d0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80013d2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80013da:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80013e0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013ee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f7ff fd2f 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800140a:	461a      	mov	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	f8de3f23 	.word	0xf8de3f23

0800141c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b0a6      	sub	sp, #152	@ 0x98
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001424:	2301      	movs	r3, #1
 8001426:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800142a:	2301      	movs	r3, #1
 800142c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001430:	2300      	movs	r3, #0
 8001432:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800143a:	2301      	movs	r3, #1
 800143c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001446:	2301      	movs	r3, #1
 8001448:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800144c:	2301      	movs	r3, #1
 800144e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800145e:	2300      	movs	r3, #0
 8001460:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001468:	2300      	movs	r3, #0
 800146a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001484:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001488:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800148a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800148e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001496:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800149a:	4619      	mov	r1, r3
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fe7f 	bl	80011a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80014a2:	2301      	movs	r3, #1
 80014a4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80014a6:	2301      	movs	r3, #1
 80014a8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80014aa:	2301      	movs	r3, #1
 80014ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80014b0:	2301      	movs	r3, #1
 80014b2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80014ce:	2301      	movs	r3, #1
 80014d0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80014d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014d6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80014d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014dc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80014de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014e2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80014e4:	2301      	movs	r3, #1
 80014e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	4619      	mov	r1, r3
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff05 	bl	8001308 <ETH_SetDMAConfig>
}
 80014fe:	bf00      	nop
 8001500:	3798      	adds	r7, #152	@ 0x98
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001508:	b480      	push	{r7}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3305      	adds	r3, #5
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	3204      	adds	r2, #4
 8001520:	7812      	ldrb	r2, [r2, #0]
 8001522:	4313      	orrs	r3, r2
 8001524:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <ETH_MACAddressConfig+0x68>)
 800152a:	4413      	add	r3, r2
 800152c:	461a      	mov	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3303      	adds	r3, #3
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	061a      	lsls	r2, r3, #24
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3302      	adds	r3, #2
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	041b      	lsls	r3, r3, #16
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3301      	adds	r3, #1
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	4313      	orrs	r3, r2
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	7812      	ldrb	r2, [r2, #0]
 8001552:	4313      	orrs	r3, r2
 8001554:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <ETH_MACAddressConfig+0x6c>)
 800155a:	4413      	add	r3, r2
 800155c:	461a      	mov	r2, r3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	6013      	str	r3, [r2, #0]
}
 8001562:	bf00      	nop
 8001564:	371c      	adds	r7, #28
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40028040 	.word	0x40028040
 8001574:	40028044 	.word	0x40028044

08001578 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	e03e      	b.n	8001604 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68d9      	ldr	r1, [r3, #12]
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	3206      	adds	r2, #6
 80015b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d80c      	bhi.n	80015e8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68d9      	ldr	r1, [r3, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	440b      	add	r3, r1
 80015e0:	461a      	mov	r2, r3
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	e004      	b.n	80015f2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	461a      	mov	r2, r3
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3301      	adds	r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b03      	cmp	r3, #3
 8001608:	d9bd      	bls.n	8001586 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800161c:	611a      	str	r2, [r3, #16]
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800162a:	b480      	push	{r7}
 800162c:	b085      	sub	sp, #20
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	e048      	b.n	80016ca <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6919      	ldr	r1, [r3, #16]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2200      	movs	r2, #0
 8001654:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001674:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800168e:	68b9      	ldr	r1, [r7, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	3212      	adds	r2, #18
 8001696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d80c      	bhi.n	80016ba <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6919      	ldr	r1, [r3, #16]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	440b      	add	r3, r1
 80016b2:	461a      	mov	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	e004      	b.n	80016c4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	461a      	mov	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3301      	adds	r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d9b3      	bls.n	8001638 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691a      	ldr	r2, [r3, #16]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016fa:	60da      	str	r2, [r3, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	@ 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	e175      	b.n	8001a14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001728:	2201      	movs	r2, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	429a      	cmp	r2, r3
 8001742:	f040 8164 	bne.w	8001a0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d005      	beq.n	800175e <HAL_GPIO_Init+0x56>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d130      	bne.n	80017c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001794:	2201      	movs	r2, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 0201 	and.w	r2, r3, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d017      	beq.n	80017fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d123      	bne.n	8001850 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80be 	beq.w	8001a0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	4b66      	ldr	r3, [pc, #408]	@ (8001a2c <HAL_GPIO_Init+0x324>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	4a65      	ldr	r2, [pc, #404]	@ (8001a2c <HAL_GPIO_Init+0x324>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800189c:	6453      	str	r3, [r2, #68]	@ 0x44
 800189e:	4b63      	ldr	r3, [pc, #396]	@ (8001a2c <HAL_GPIO_Init+0x324>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018aa:	4a61      	ldr	r2, [pc, #388]	@ (8001a30 <HAL_GPIO_Init+0x328>)
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	220f      	movs	r2, #15
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a58      	ldr	r2, [pc, #352]	@ (8001a34 <HAL_GPIO_Init+0x32c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d037      	beq.n	8001946 <HAL_GPIO_Init+0x23e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a57      	ldr	r2, [pc, #348]	@ (8001a38 <HAL_GPIO_Init+0x330>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d031      	beq.n	8001942 <HAL_GPIO_Init+0x23a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a56      	ldr	r2, [pc, #344]	@ (8001a3c <HAL_GPIO_Init+0x334>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d02b      	beq.n	800193e <HAL_GPIO_Init+0x236>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a55      	ldr	r2, [pc, #340]	@ (8001a40 <HAL_GPIO_Init+0x338>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d025      	beq.n	800193a <HAL_GPIO_Init+0x232>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a54      	ldr	r2, [pc, #336]	@ (8001a44 <HAL_GPIO_Init+0x33c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d01f      	beq.n	8001936 <HAL_GPIO_Init+0x22e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a53      	ldr	r2, [pc, #332]	@ (8001a48 <HAL_GPIO_Init+0x340>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d019      	beq.n	8001932 <HAL_GPIO_Init+0x22a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a52      	ldr	r2, [pc, #328]	@ (8001a4c <HAL_GPIO_Init+0x344>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0x226>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a51      	ldr	r2, [pc, #324]	@ (8001a50 <HAL_GPIO_Init+0x348>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d00d      	beq.n	800192a <HAL_GPIO_Init+0x222>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a50      	ldr	r2, [pc, #320]	@ (8001a54 <HAL_GPIO_Init+0x34c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d007      	beq.n	8001926 <HAL_GPIO_Init+0x21e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4f      	ldr	r2, [pc, #316]	@ (8001a58 <HAL_GPIO_Init+0x350>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_GPIO_Init+0x21a>
 800191e:	2309      	movs	r3, #9
 8001920:	e012      	b.n	8001948 <HAL_GPIO_Init+0x240>
 8001922:	230a      	movs	r3, #10
 8001924:	e010      	b.n	8001948 <HAL_GPIO_Init+0x240>
 8001926:	2308      	movs	r3, #8
 8001928:	e00e      	b.n	8001948 <HAL_GPIO_Init+0x240>
 800192a:	2307      	movs	r3, #7
 800192c:	e00c      	b.n	8001948 <HAL_GPIO_Init+0x240>
 800192e:	2306      	movs	r3, #6
 8001930:	e00a      	b.n	8001948 <HAL_GPIO_Init+0x240>
 8001932:	2305      	movs	r3, #5
 8001934:	e008      	b.n	8001948 <HAL_GPIO_Init+0x240>
 8001936:	2304      	movs	r3, #4
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x240>
 800193a:	2303      	movs	r3, #3
 800193c:	e004      	b.n	8001948 <HAL_GPIO_Init+0x240>
 800193e:	2302      	movs	r3, #2
 8001940:	e002      	b.n	8001948 <HAL_GPIO_Init+0x240>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_GPIO_Init+0x240>
 8001946:	2300      	movs	r3, #0
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	f002 0203 	and.w	r2, r2, #3
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	4093      	lsls	r3, r2
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001958:	4935      	ldr	r1, [pc, #212]	@ (8001a30 <HAL_GPIO_Init+0x328>)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001966:	4b3d      	ldr	r3, [pc, #244]	@ (8001a5c <HAL_GPIO_Init+0x354>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800198a:	4a34      	ldr	r2, [pc, #208]	@ (8001a5c <HAL_GPIO_Init+0x354>)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001990:	4b32      	ldr	r3, [pc, #200]	@ (8001a5c <HAL_GPIO_Init+0x354>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019b4:	4a29      	ldr	r2, [pc, #164]	@ (8001a5c <HAL_GPIO_Init+0x354>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ba:	4b28      	ldr	r3, [pc, #160]	@ (8001a5c <HAL_GPIO_Init+0x354>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019de:	4a1f      	ldr	r2, [pc, #124]	@ (8001a5c <HAL_GPIO_Init+0x354>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a5c <HAL_GPIO_Init+0x354>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a08:	4a14      	ldr	r2, [pc, #80]	@ (8001a5c <HAL_GPIO_Init+0x354>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3301      	adds	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	2b0f      	cmp	r3, #15
 8001a18:	f67f ae86 	bls.w	8001728 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3724      	adds	r7, #36	@ 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40013800 	.word	0x40013800
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40020400 	.word	0x40020400
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40021400 	.word	0x40021400
 8001a4c:	40021800 	.word	0x40021800
 8001a50:	40021c00 	.word	0x40021c00
 8001a54:	40022000 	.word	0x40022000
 8001a58:	40022400 	.word	0x40022400
 8001a5c:	40013c00 	.word	0x40013c00

08001a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a70:	787b      	ldrb	r3, [r7, #1]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a7c:	e003      	b.n	8001a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a7e:	887b      	ldrh	r3, [r7, #2]
 8001a80:	041a      	lsls	r2, r3, #16
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	619a      	str	r2, [r3, #24]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af02      	add	r7, sp, #8
 8001a98:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e108      	b.n	8001cb6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d106      	bne.n	8001ac4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff f84c 	bl	8000b5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ad2:	d102      	bne.n	8001ada <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 f9b8 	bl	8003e54 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7c1a      	ldrb	r2, [r3, #16]
 8001aec:	f88d 2000 	strb.w	r2, [sp]
 8001af0:	3304      	adds	r3, #4
 8001af2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001af4:	f002 f954 	bl	8003da0 <USB_CoreInit>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2202      	movs	r2, #2
 8001b02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e0d5      	b.n	8001cb6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f002 f9b0 	bl	8003e76 <USB_SetCurrentMode>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0c6      	b.n	8001cb6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]
 8001b2c:	e04a      	b.n	8001bc4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3315      	adds	r3, #21
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b42:	7bfa      	ldrb	r2, [r7, #15]
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	3314      	adds	r3, #20
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	b298      	uxth	r0, r3
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	332e      	adds	r3, #46	@ 0x2e
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3318      	adds	r3, #24
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	331c      	adds	r3, #28
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3320      	adds	r3, #32
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001baa:	7bfa      	ldrb	r2, [r7, #15]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3324      	adds	r3, #36	@ 0x24
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	791b      	ldrb	r3, [r3, #4]
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d3af      	bcc.n	8001b2e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e044      	b.n	8001c5e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bd4:	7bfa      	ldrb	r2, [r7, #15]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bea:	7bfa      	ldrb	r2, [r7, #15]
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c00:	7bfa      	ldrb	r2, [r7, #15]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	440b      	add	r3, r1
 8001c24:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	791b      	ldrb	r3, [r3, #4]
 8001c62:	7bfa      	ldrb	r2, [r7, #15]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d3b5      	bcc.n	8001bd4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7c1a      	ldrb	r2, [r3, #16]
 8001c70:	f88d 2000 	strb.w	r2, [sp]
 8001c74:	3304      	adds	r3, #4
 8001c76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c78:	f002 f94a 	bl	8003f10 <USB_DevInit>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2202      	movs	r2, #2
 8001c86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e013      	b.n	8001cb6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7b1b      	ldrb	r3, [r3, #12]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d102      	bne.n	8001caa <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f80b 	bl	8001cc0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 fb05 	bl	80042be <USB_DevDisconnect>

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001cee:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <HAL_PCDEx_ActivateLPM+0x44>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	10000003 	.word	0x10000003

08001d08 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d0c:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40007000 	.word	0x40007000

08001d28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d30:	2300      	movs	r3, #0
 8001d32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e291      	b.n	8002262 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8087 	beq.w	8001e5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d4c:	4b96      	ldr	r3, [pc, #600]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d00c      	beq.n	8001d72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d58:	4b93      	ldr	r3, [pc, #588]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d112      	bne.n	8001d8a <HAL_RCC_OscConfig+0x62>
 8001d64:	4b90      	ldr	r3, [pc, #576]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d70:	d10b      	bne.n	8001d8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d72:	4b8d      	ldr	r3, [pc, #564]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d06c      	beq.n	8001e58 <HAL_RCC_OscConfig+0x130>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d168      	bne.n	8001e58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e26b      	b.n	8002262 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d92:	d106      	bne.n	8001da2 <HAL_RCC_OscConfig+0x7a>
 8001d94:	4b84      	ldr	r3, [pc, #528]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a83      	ldr	r2, [pc, #524]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	e02e      	b.n	8001e00 <HAL_RCC_OscConfig+0xd8>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x9c>
 8001daa:	4b7f      	ldr	r3, [pc, #508]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a7e      	ldr	r2, [pc, #504]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b7c      	ldr	r3, [pc, #496]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a7b      	ldr	r2, [pc, #492]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001dbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e01d      	b.n	8001e00 <HAL_RCC_OscConfig+0xd8>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0xc0>
 8001dce:	4b76      	ldr	r3, [pc, #472]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a75      	ldr	r2, [pc, #468]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b73      	ldr	r3, [pc, #460]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a72      	ldr	r2, [pc, #456]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e00b      	b.n	8001e00 <HAL_RCC_OscConfig+0xd8>
 8001de8:	4b6f      	ldr	r3, [pc, #444]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a6e      	ldr	r2, [pc, #440]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b6c      	ldr	r3, [pc, #432]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a6b      	ldr	r2, [pc, #428]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d013      	beq.n	8001e30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff f81e 	bl	8000e48 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff f81a 	bl	8000e48 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	@ 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e21f      	b.n	8002262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b61      	ldr	r3, [pc, #388]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0xe8>
 8001e2e:	e014      	b.n	8001e5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7ff f80a 	bl	8000e48 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e38:	f7ff f806 	bl	8000e48 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	@ 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e20b      	b.n	8002262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4a:	4b57      	ldr	r3, [pc, #348]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x110>
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d069      	beq.n	8001f3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e66:	4b50      	ldr	r3, [pc, #320]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00b      	beq.n	8001e8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e72:	4b4d      	ldr	r3, [pc, #308]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d11c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x190>
 8001e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d116      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8a:	4b47      	ldr	r3, [pc, #284]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x17a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e1df      	b.n	8002262 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea2:	4b41      	ldr	r3, [pc, #260]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	493d      	ldr	r1, [pc, #244]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb6:	e040      	b.n	8001f3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d023      	beq.n	8001f08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec0:	4b39      	ldr	r3, [pc, #228]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a38      	ldr	r2, [pc, #224]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7fe ffbc 	bl	8000e48 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed4:	f7fe ffb8 	bl	8000e48 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e1bd      	b.n	8002262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee6:	4b30      	ldr	r3, [pc, #192]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4929      	ldr	r1, [pc, #164]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
 8001f06:	e018      	b.n	8001f3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f08:	4b27      	ldr	r3, [pc, #156]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a26      	ldr	r2, [pc, #152]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001f0e:	f023 0301 	bic.w	r3, r3, #1
 8001f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7fe ff98 	bl	8000e48 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1c:	f7fe ff94 	bl	8000e48 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e199      	b.n	8002262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d038      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d019      	beq.n	8001f82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4e:	4b16      	ldr	r3, [pc, #88]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f52:	4a15      	ldr	r2, [pc, #84]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5a:	f7fe ff75 	bl	8000e48 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f62:	f7fe ff71 	bl	8000e48 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e176      	b.n	8002262 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f74:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001f76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x23a>
 8001f80:	e01a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f82:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f86:	4a08      	ldr	r2, [pc, #32]	@ (8001fa8 <HAL_RCC_OscConfig+0x280>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8e:	f7fe ff5b 	bl	8000e48 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f96:	f7fe ff57 	bl	8000e48 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d903      	bls.n	8001fac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e15c      	b.n	8002262 <HAL_RCC_OscConfig+0x53a>
 8001fa8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fac:	4b91      	ldr	r3, [pc, #580]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8001fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1ee      	bne.n	8001f96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80a4 	beq.w	800210e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc6:	4b8b      	ldr	r3, [pc, #556]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10d      	bne.n	8001fee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	4b88      	ldr	r3, [pc, #544]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	4a87      	ldr	r2, [pc, #540]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fde:	4b85      	ldr	r3, [pc, #532]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fea:	2301      	movs	r3, #1
 8001fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fee:	4b82      	ldr	r3, [pc, #520]	@ (80021f8 <HAL_RCC_OscConfig+0x4d0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d118      	bne.n	800202c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ffa:	4b7f      	ldr	r3, [pc, #508]	@ (80021f8 <HAL_RCC_OscConfig+0x4d0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a7e      	ldr	r2, [pc, #504]	@ (80021f8 <HAL_RCC_OscConfig+0x4d0>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002006:	f7fe ff1f 	bl	8000e48 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200e:	f7fe ff1b 	bl	8000e48 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b64      	cmp	r3, #100	@ 0x64
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e120      	b.n	8002262 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002020:	4b75      	ldr	r3, [pc, #468]	@ (80021f8 <HAL_RCC_OscConfig+0x4d0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x31a>
 8002034:	4b6f      	ldr	r3, [pc, #444]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002038:	4a6e      	ldr	r2, [pc, #440]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002040:	e02d      	b.n	800209e <HAL_RCC_OscConfig+0x376>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x33c>
 800204a:	4b6a      	ldr	r3, [pc, #424]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204e:	4a69      	ldr	r2, [pc, #420]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	6713      	str	r3, [r2, #112]	@ 0x70
 8002056:	4b67      	ldr	r3, [pc, #412]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205a:	4a66      	ldr	r2, [pc, #408]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 800205c:	f023 0304 	bic.w	r3, r3, #4
 8002060:	6713      	str	r3, [r2, #112]	@ 0x70
 8002062:	e01c      	b.n	800209e <HAL_RCC_OscConfig+0x376>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b05      	cmp	r3, #5
 800206a:	d10c      	bne.n	8002086 <HAL_RCC_OscConfig+0x35e>
 800206c:	4b61      	ldr	r3, [pc, #388]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 800206e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002070:	4a60      	ldr	r2, [pc, #384]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8002072:	f043 0304 	orr.w	r3, r3, #4
 8002076:	6713      	str	r3, [r2, #112]	@ 0x70
 8002078:	4b5e      	ldr	r3, [pc, #376]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207c:	4a5d      	ldr	r2, [pc, #372]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6713      	str	r3, [r2, #112]	@ 0x70
 8002084:	e00b      	b.n	800209e <HAL_RCC_OscConfig+0x376>
 8002086:	4b5b      	ldr	r3, [pc, #364]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208a:	4a5a      	ldr	r2, [pc, #360]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 800208c:	f023 0301 	bic.w	r3, r3, #1
 8002090:	6713      	str	r3, [r2, #112]	@ 0x70
 8002092:	4b58      	ldr	r3, [pc, #352]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002096:	4a57      	ldr	r2, [pc, #348]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8002098:	f023 0304 	bic.w	r3, r3, #4
 800209c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d015      	beq.n	80020d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a6:	f7fe fecf 	bl	8000e48 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ac:	e00a      	b.n	80020c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7fe fecb 	bl	8000e48 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020bc:	4293      	cmp	r3, r2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e0ce      	b.n	8002262 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	4b4b      	ldr	r3, [pc, #300]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0ee      	beq.n	80020ae <HAL_RCC_OscConfig+0x386>
 80020d0:	e014      	b.n	80020fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d2:	f7fe feb9 	bl	8000e48 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7fe feb5 	bl	8000e48 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e0b8      	b.n	8002262 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f0:	4b40      	ldr	r3, [pc, #256]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 80020f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1ee      	bne.n	80020da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d105      	bne.n	800210e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002102:	4b3c      	ldr	r3, [pc, #240]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	4a3b      	ldr	r2, [pc, #236]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8002108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800210c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 80a4 	beq.w	8002260 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002118:	4b36      	ldr	r3, [pc, #216]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b08      	cmp	r3, #8
 8002122:	d06b      	beq.n	80021fc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d149      	bne.n	80021c0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212c:	4b31      	ldr	r3, [pc, #196]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a30      	ldr	r2, [pc, #192]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8002132:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7fe fe86 	bl	8000e48 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002140:	f7fe fe82 	bl	8000e48 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e087      	b.n	8002262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002152:	4b28      	ldr	r3, [pc, #160]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69da      	ldr	r2, [r3, #28]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216c:	019b      	lsls	r3, r3, #6
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002174:	085b      	lsrs	r3, r3, #1
 8002176:	3b01      	subs	r3, #1
 8002178:	041b      	lsls	r3, r3, #16
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002180:	061b      	lsls	r3, r3, #24
 8002182:	4313      	orrs	r3, r2
 8002184:	4a1b      	ldr	r2, [pc, #108]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8002186:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800218a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800218c:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a18      	ldr	r2, [pc, #96]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 8002192:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe fe56 	bl	8000e48 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a0:	f7fe fe52 	bl	8000e48 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e057      	b.n	8002262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b2:	4b10      	ldr	r3, [pc, #64]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x478>
 80021be:	e04f      	b.n	8002260 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c0:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0b      	ldr	r2, [pc, #44]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 80021c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7fe fe3c 	bl	8000e48 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d4:	f7fe fe38 	bl	8000e48 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e03d      	b.n	8002262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e6:	4b03      	ldr	r3, [pc, #12]	@ (80021f4 <HAL_RCC_OscConfig+0x4cc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4ac>
 80021f2:	e035      	b.n	8002260 <HAL_RCC_OscConfig+0x538>
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80021fc:	4b1b      	ldr	r3, [pc, #108]	@ (800226c <HAL_RCC_OscConfig+0x544>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d028      	beq.n	800225c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d121      	bne.n	800225c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d11a      	bne.n	800225c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800222c:	4013      	ands	r3, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002232:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002234:	4293      	cmp	r3, r2
 8002236:	d111      	bne.n	800225c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002242:	085b      	lsrs	r3, r3, #1
 8002244:	3b01      	subs	r3, #1
 8002246:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d107      	bne.n	800225c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002256:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800

08002270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0d0      	b.n	800242a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002288:	4b6a      	ldr	r3, [pc, #424]	@ (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d910      	bls.n	80022b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002296:	4b67      	ldr	r3, [pc, #412]	@ (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 020f 	bic.w	r2, r3, #15
 800229e:	4965      	ldr	r1, [pc, #404]	@ (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a6:	4b63      	ldr	r3, [pc, #396]	@ (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0b8      	b.n	800242a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d020      	beq.n	8002306 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d0:	4b59      	ldr	r3, [pc, #356]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4a58      	ldr	r2, [pc, #352]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 80022d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e8:	4b53      	ldr	r3, [pc, #332]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4a52      	ldr	r2, [pc, #328]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 80022ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f4:	4b50      	ldr	r3, [pc, #320]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	494d      	ldr	r1, [pc, #308]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d040      	beq.n	8002394 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	4b47      	ldr	r3, [pc, #284]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d115      	bne.n	8002352 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e07f      	b.n	800242a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002332:	4b41      	ldr	r3, [pc, #260]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e073      	b.n	800242a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002342:	4b3d      	ldr	r3, [pc, #244]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e06b      	b.n	800242a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002352:	4b39      	ldr	r3, [pc, #228]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f023 0203 	bic.w	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4936      	ldr	r1, [pc, #216]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 8002360:	4313      	orrs	r3, r2
 8002362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002364:	f7fe fd70 	bl	8000e48 <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	e00a      	b.n	8002382 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236c:	f7fe fd6c 	bl	8000e48 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e053      	b.n	800242a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	4b2d      	ldr	r3, [pc, #180]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 020c 	and.w	r2, r3, #12
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	429a      	cmp	r2, r3
 8002392:	d1eb      	bne.n	800236c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002394:	4b27      	ldr	r3, [pc, #156]	@ (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d210      	bcs.n	80023c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b24      	ldr	r3, [pc, #144]	@ (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 020f 	bic.w	r2, r3, #15
 80023aa:	4922      	ldr	r1, [pc, #136]	@ (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b20      	ldr	r3, [pc, #128]	@ (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e032      	b.n	800242a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d0:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4916      	ldr	r1, [pc, #88]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ee:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	490e      	ldr	r1, [pc, #56]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002402:	f000 f821 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8002406:	4602      	mov	r2, r0
 8002408:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	490a      	ldr	r1, [pc, #40]	@ (800243c <HAL_RCC_ClockConfig+0x1cc>)
 8002414:	5ccb      	ldrb	r3, [r1, r3]
 8002416:	fa22 f303 	lsr.w	r3, r2, r3
 800241a:	4a09      	ldr	r2, [pc, #36]	@ (8002440 <HAL_RCC_ClockConfig+0x1d0>)
 800241c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800241e:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <HAL_RCC_ClockConfig+0x1d4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fc14 	bl	8000c50 <HAL_InitTick>

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023c00 	.word	0x40023c00
 8002438:	40023800 	.word	0x40023800
 800243c:	080047f0 	.word	0x080047f0
 8002440:	20000000 	.word	0x20000000
 8002444:	20000004 	.word	0x20000004

08002448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800244c:	b094      	sub	sp, #80	@ 0x50
 800244e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	647b      	str	r3, [r7, #68]	@ 0x44
 8002454:	2300      	movs	r3, #0
 8002456:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002458:	2300      	movs	r3, #0
 800245a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002460:	4b79      	ldr	r3, [pc, #484]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b08      	cmp	r3, #8
 800246a:	d00d      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x40>
 800246c:	2b08      	cmp	r3, #8
 800246e:	f200 80e1 	bhi.w	8002634 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x34>
 8002476:	2b04      	cmp	r3, #4
 8002478:	d003      	beq.n	8002482 <HAL_RCC_GetSysClockFreq+0x3a>
 800247a:	e0db      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800247c:	4b73      	ldr	r3, [pc, #460]	@ (800264c <HAL_RCC_GetSysClockFreq+0x204>)
 800247e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002480:	e0db      	b.n	800263a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002482:	4b73      	ldr	r3, [pc, #460]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x208>)
 8002484:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002486:	e0d8      	b.n	800263a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002488:	4b6f      	ldr	r3, [pc, #444]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002490:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002492:	4b6d      	ldr	r3, [pc, #436]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d063      	beq.n	8002566 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249e:	4b6a      	ldr	r3, [pc, #424]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	099b      	lsrs	r3, r3, #6
 80024a4:	2200      	movs	r2, #0
 80024a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80024aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80024b2:	2300      	movs	r3, #0
 80024b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80024b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024ba:	4622      	mov	r2, r4
 80024bc:	462b      	mov	r3, r5
 80024be:	f04f 0000 	mov.w	r0, #0
 80024c2:	f04f 0100 	mov.w	r1, #0
 80024c6:	0159      	lsls	r1, r3, #5
 80024c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024cc:	0150      	lsls	r0, r2, #5
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4621      	mov	r1, r4
 80024d4:	1a51      	subs	r1, r2, r1
 80024d6:	6139      	str	r1, [r7, #16]
 80024d8:	4629      	mov	r1, r5
 80024da:	eb63 0301 	sbc.w	r3, r3, r1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024ec:	4659      	mov	r1, fp
 80024ee:	018b      	lsls	r3, r1, #6
 80024f0:	4651      	mov	r1, sl
 80024f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024f6:	4651      	mov	r1, sl
 80024f8:	018a      	lsls	r2, r1, #6
 80024fa:	4651      	mov	r1, sl
 80024fc:	ebb2 0801 	subs.w	r8, r2, r1
 8002500:	4659      	mov	r1, fp
 8002502:	eb63 0901 	sbc.w	r9, r3, r1
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002512:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002516:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800251a:	4690      	mov	r8, r2
 800251c:	4699      	mov	r9, r3
 800251e:	4623      	mov	r3, r4
 8002520:	eb18 0303 	adds.w	r3, r8, r3
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	462b      	mov	r3, r5
 8002528:	eb49 0303 	adc.w	r3, r9, r3
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800253a:	4629      	mov	r1, r5
 800253c:	024b      	lsls	r3, r1, #9
 800253e:	4621      	mov	r1, r4
 8002540:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002544:	4621      	mov	r1, r4
 8002546:	024a      	lsls	r2, r1, #9
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800254e:	2200      	movs	r2, #0
 8002550:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002552:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002554:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002558:	f7fd fe5a 	bl	8000210 <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4613      	mov	r3, r2
 8002562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002564:	e058      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002566:	4b38      	ldr	r3, [pc, #224]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	099b      	lsrs	r3, r3, #6
 800256c:	2200      	movs	r2, #0
 800256e:	4618      	mov	r0, r3
 8002570:	4611      	mov	r1, r2
 8002572:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002576:	623b      	str	r3, [r7, #32]
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
 800257c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002580:	4642      	mov	r2, r8
 8002582:	464b      	mov	r3, r9
 8002584:	f04f 0000 	mov.w	r0, #0
 8002588:	f04f 0100 	mov.w	r1, #0
 800258c:	0159      	lsls	r1, r3, #5
 800258e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002592:	0150      	lsls	r0, r2, #5
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4641      	mov	r1, r8
 800259a:	ebb2 0a01 	subs.w	sl, r2, r1
 800259e:	4649      	mov	r1, r9
 80025a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025b8:	ebb2 040a 	subs.w	r4, r2, sl
 80025bc:	eb63 050b 	sbc.w	r5, r3, fp
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	00eb      	lsls	r3, r5, #3
 80025ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025ce:	00e2      	lsls	r2, r4, #3
 80025d0:	4614      	mov	r4, r2
 80025d2:	461d      	mov	r5, r3
 80025d4:	4643      	mov	r3, r8
 80025d6:	18e3      	adds	r3, r4, r3
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	464b      	mov	r3, r9
 80025dc:	eb45 0303 	adc.w	r3, r5, r3
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ee:	4629      	mov	r1, r5
 80025f0:	028b      	lsls	r3, r1, #10
 80025f2:	4621      	mov	r1, r4
 80025f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025f8:	4621      	mov	r1, r4
 80025fa:	028a      	lsls	r2, r1, #10
 80025fc:	4610      	mov	r0, r2
 80025fe:	4619      	mov	r1, r3
 8002600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002602:	2200      	movs	r2, #0
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	61fa      	str	r2, [r7, #28]
 8002608:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800260c:	f7fd fe00 	bl	8000210 <__aeabi_uldivmod>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4613      	mov	r3, r2
 8002616:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002618:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	0c1b      	lsrs	r3, r3, #16
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	3301      	adds	r3, #1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002628:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800262a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002632:	e002      	b.n	800263a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002634:	4b05      	ldr	r3, [pc, #20]	@ (800264c <HAL_RCC_GetSysClockFreq+0x204>)
 8002636:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800263a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800263c:	4618      	mov	r0, r3
 800263e:	3750      	adds	r7, #80	@ 0x50
 8002640:	46bd      	mov	sp, r7
 8002642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	00f42400 	.word	0x00f42400
 8002650:	007a1200 	.word	0x007a1200

08002654 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002658:	4b03      	ldr	r3, [pc, #12]	@ (8002668 <HAL_RCC_GetHCLKFreq+0x14>)
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000000 	.word	0x20000000

0800266c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002670:	f7ff fff0 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b05      	ldr	r3, [pc, #20]	@ (800268c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	0a9b      	lsrs	r3, r3, #10
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4903      	ldr	r1, [pc, #12]	@ (8002690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40023800 	.word	0x40023800
 8002690:	08004800 	.word	0x08004800

08002694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002698:	f7ff ffdc 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b05      	ldr	r3, [pc, #20]	@ (80026b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	0b5b      	lsrs	r3, r3, #13
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4903      	ldr	r1, [pc, #12]	@ (80026b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40023800 	.word	0x40023800
 80026b8:	08004800 	.word	0x08004800

080026bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	220f      	movs	r2, #15
 80026ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026cc:	4b12      	ldr	r3, [pc, #72]	@ (8002718 <HAL_RCC_GetClockConfig+0x5c>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0203 	and.w	r2, r3, #3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002718 <HAL_RCC_GetClockConfig+0x5c>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002718 <HAL_RCC_GetClockConfig+0x5c>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80026f0:	4b09      	ldr	r3, [pc, #36]	@ (8002718 <HAL_RCC_GetClockConfig+0x5c>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	08db      	lsrs	r3, r3, #3
 80026f6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026fe:	4b07      	ldr	r3, [pc, #28]	@ (800271c <HAL_RCC_GetClockConfig+0x60>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 020f 	and.w	r2, r3, #15
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	601a      	str	r2, [r3, #0]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800
 800271c:	40023c00 	.word	0x40023c00

08002720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d012      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002748:	4b69      	ldr	r3, [pc, #420]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4a68      	ldr	r2, [pc, #416]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002752:	6093      	str	r3, [r2, #8]
 8002754:	4b66      	ldr	r3, [pc, #408]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275c:	4964      	ldr	r1, [pc, #400]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800276a:	2301      	movs	r3, #1
 800276c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d017      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800277a:	4b5d      	ldr	r3, [pc, #372]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002780:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002788:	4959      	ldr	r1, [pc, #356]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002794:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002798:	d101      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800279a:	2301      	movs	r3, #1
 800279c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80027a6:	2301      	movs	r3, #1
 80027a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d017      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027b6:	4b4e      	ldr	r3, [pc, #312]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	494a      	ldr	r1, [pc, #296]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027d4:	d101      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80027d6:	2301      	movs	r3, #1
 80027d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80027e2:	2301      	movs	r3, #1
 80027e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80027f2:	2301      	movs	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 808b 	beq.w	800291a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002804:	4b3a      	ldr	r3, [pc, #232]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	4a39      	ldr	r2, [pc, #228]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800280e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002810:	4b37      	ldr	r3, [pc, #220]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800281c:	4b35      	ldr	r3, [pc, #212]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a34      	ldr	r2, [pc, #208]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002828:	f7fe fb0e 	bl	8000e48 <HAL_GetTick>
 800282c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002830:	f7fe fb0a 	bl	8000e48 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	@ 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e357      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002842:	4b2c      	ldr	r3, [pc, #176]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800284e:	4b28      	ldr	r3, [pc, #160]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002856:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d035      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	429a      	cmp	r2, r3
 800286a:	d02e      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800286c:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002874:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002876:	4b1e      	ldr	r3, [pc, #120]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287a:	4a1d      	ldr	r2, [pc, #116]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002880:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002882:	4b1b      	ldr	r3, [pc, #108]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002886:	4a1a      	ldr	r2, [pc, #104]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002888:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800288c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800288e:	4a18      	ldr	r2, [pc, #96]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002894:	4b16      	ldr	r3, [pc, #88]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d114      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fad2 	bl	8000e48 <HAL_GetTick>
 80028a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a6:	e00a      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a8:	f7fe face 	bl	8000e48 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e319      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028be:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0ee      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028d6:	d111      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80028d8:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028e4:	4b04      	ldr	r3, [pc, #16]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028e6:	400b      	ands	r3, r1
 80028e8:	4901      	ldr	r1, [pc, #4]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
 80028ee:	e00b      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40007000 	.word	0x40007000
 80028f8:	0ffffcff 	.word	0x0ffffcff
 80028fc:	4baa      	ldr	r3, [pc, #680]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4aa9      	ldr	r2, [pc, #676]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002902:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002906:	6093      	str	r3, [r2, #8]
 8002908:	4ba7      	ldr	r3, [pc, #668]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800290a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	49a4      	ldr	r1, [pc, #656]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002916:	4313      	orrs	r3, r2
 8002918:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b00      	cmp	r3, #0
 8002924:	d010      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002926:	4ba0      	ldr	r3, [pc, #640]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800292c:	4a9e      	ldr	r2, [pc, #632]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800292e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002932:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002936:	4b9c      	ldr	r3, [pc, #624]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002938:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002940:	4999      	ldr	r1, [pc, #612]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002954:	4b94      	ldr	r3, [pc, #592]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002962:	4991      	ldr	r1, [pc, #580]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002976:	4b8c      	ldr	r3, [pc, #560]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800297c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002984:	4988      	ldr	r1, [pc, #544]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002998:	4b83      	ldr	r3, [pc, #524]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029a6:	4980      	ldr	r1, [pc, #512]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029ba:	4b7b      	ldr	r3, [pc, #492]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c8:	4977      	ldr	r1, [pc, #476]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029dc:	4b72      	ldr	r3, [pc, #456]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ea:	496f      	ldr	r1, [pc, #444]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029fe:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a04:	f023 020c 	bic.w	r2, r3, #12
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a0c:	4966      	ldr	r1, [pc, #408]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a20:	4b61      	ldr	r3, [pc, #388]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a26:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2e:	495e      	ldr	r1, [pc, #376]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a42:	4b59      	ldr	r3, [pc, #356]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a48:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a50:	4955      	ldr	r1, [pc, #340]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a64:	4b50      	ldr	r3, [pc, #320]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a72:	494d      	ldr	r1, [pc, #308]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a86:	4b48      	ldr	r3, [pc, #288]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a94:	4944      	ldr	r1, [pc, #272]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab6:	493c      	ldr	r1, [pc, #240]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002aca:	4b37      	ldr	r3, [pc, #220]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad8:	4933      	ldr	r1, [pc, #204]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002aec:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002afa:	492b      	ldr	r1, [pc, #172]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d011      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b14:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b1c:	4922      	ldr	r1, [pc, #136]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b54:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b5c:	4912      	ldr	r1, [pc, #72]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00b      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b76:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b80:	4909      	ldr	r1, [pc, #36]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d006      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 80d9 	beq.w	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b9c:	4b02      	ldr	r3, [pc, #8]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a01      	ldr	r2, [pc, #4]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ba6:	e001      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bae:	f7fe f94b 	bl	8000e48 <HAL_GetTick>
 8002bb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bb6:	f7fe f947 	bl	8000e48 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b64      	cmp	r3, #100	@ 0x64
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e194      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bc8:	4b6c      	ldr	r3, [pc, #432]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f0      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d021      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d11d      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002be8:	4b64      	ldr	r3, [pc, #400]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bee:	0c1b      	lsrs	r3, r3, #16
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bf6:	4b61      	ldr	r3, [pc, #388]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bfc:	0e1b      	lsrs	r3, r3, #24
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	019a      	lsls	r2, r3, #6
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	061b      	lsls	r3, r3, #24
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	071b      	lsls	r3, r3, #28
 8002c1c:	4957      	ldr	r1, [pc, #348]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d004      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c38:	d00a      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d02e      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c4e:	d129      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c50:	4b4a      	ldr	r3, [pc, #296]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c56:	0c1b      	lsrs	r3, r3, #16
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c5e:	4b47      	ldr	r3, [pc, #284]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c64:	0f1b      	lsrs	r3, r3, #28
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	019a      	lsls	r2, r3, #6
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	041b      	lsls	r3, r3, #16
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	071b      	lsls	r3, r3, #28
 8002c84:	493d      	ldr	r1, [pc, #244]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c92:	f023 021f 	bic.w	r2, r3, #31
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	4937      	ldr	r1, [pc, #220]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01d      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cb0:	4b32      	ldr	r3, [pc, #200]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cb6:	0e1b      	lsrs	r3, r3, #24
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cc4:	0f1b      	lsrs	r3, r3, #28
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	019a      	lsls	r2, r3, #6
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	041b      	lsls	r3, r3, #16
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	061b      	lsls	r3, r3, #24
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	071b      	lsls	r3, r3, #28
 8002ce4:	4925      	ldr	r1, [pc, #148]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d011      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	019a      	lsls	r2, r3, #6
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	041b      	lsls	r3, r3, #16
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	061b      	lsls	r3, r3, #24
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	071b      	lsls	r3, r3, #28
 8002d14:	4919      	ldr	r1, [pc, #100]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d1c:	4b17      	ldr	r3, [pc, #92]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a16      	ldr	r2, [pc, #88]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d28:	f7fe f88e 	bl	8000e48 <HAL_GetTick>
 8002d2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d30:	f7fe f88a 	bl	8000e48 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	@ 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0d7      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d42:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	f040 80cd 	bne.w	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d56:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a08      	ldr	r2, [pc, #32]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d62:	f7fe f871 	bl	8000e48 <HAL_GetTick>
 8002d66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d6a:	f7fe f86d 	bl	8000e48 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b64      	cmp	r3, #100	@ 0x64
 8002d76:	d903      	bls.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e0ba      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002d7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d80:	4b5e      	ldr	r3, [pc, #376]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d8c:	d0ed      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d02e      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d12a      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002db6:	4b51      	ldr	r3, [pc, #324]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dca:	0f1b      	lsrs	r3, r3, #28
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	019a      	lsls	r2, r3, #6
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	041b      	lsls	r3, r3, #16
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	061b      	lsls	r3, r3, #24
 8002de4:	431a      	orrs	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	071b      	lsls	r3, r3, #28
 8002dea:	4944      	ldr	r1, [pc, #272]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002df2:	4b42      	ldr	r3, [pc, #264]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002df8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e00:	3b01      	subs	r3, #1
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	493d      	ldr	r1, [pc, #244]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d022      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e20:	d11d      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e22:	4b36      	ldr	r3, [pc, #216]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e28:	0e1b      	lsrs	r3, r3, #24
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e30:	4b32      	ldr	r3, [pc, #200]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e36:	0f1b      	lsrs	r3, r3, #28
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	019a      	lsls	r2, r3, #6
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	061b      	lsls	r3, r3, #24
 8002e50:	431a      	orrs	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	071b      	lsls	r3, r3, #28
 8002e56:	4929      	ldr	r1, [pc, #164]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d028      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e6a:	4b24      	ldr	r3, [pc, #144]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e70:	0e1b      	lsrs	r3, r3, #24
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e78:	4b20      	ldr	r3, [pc, #128]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7e:	0c1b      	lsrs	r3, r3, #16
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	019a      	lsls	r2, r3, #6
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	041b      	lsls	r3, r3, #16
 8002e90:	431a      	orrs	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	061b      	lsls	r3, r3, #24
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	071b      	lsls	r3, r3, #28
 8002e9e:	4917      	ldr	r1, [pc, #92]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ea6:	4b15      	ldr	r3, [pc, #84]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002eac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb4:	4911      	ldr	r1, [pc, #68]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a0e      	ldr	r2, [pc, #56]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ec2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec8:	f7fd ffbe 	bl	8000e48 <HAL_GetTick>
 8002ecc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ed0:	f7fd ffba 	bl	8000e48 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	@ 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e007      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ee2:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eee:	d1ef      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3720      	adds	r7, #32
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800

08002f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e049      	b.n	8002fa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f841 	bl	8002fae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f000 f9e8 	bl	8003314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d001      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e054      	b.n	8003086 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a26      	ldr	r2, [pc, #152]	@ (8003094 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d022      	beq.n	8003044 <HAL_TIM_Base_Start_IT+0x80>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003006:	d01d      	beq.n	8003044 <HAL_TIM_Base_Start_IT+0x80>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a22      	ldr	r2, [pc, #136]	@ (8003098 <HAL_TIM_Base_Start_IT+0xd4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d018      	beq.n	8003044 <HAL_TIM_Base_Start_IT+0x80>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a21      	ldr	r2, [pc, #132]	@ (800309c <HAL_TIM_Base_Start_IT+0xd8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d013      	beq.n	8003044 <HAL_TIM_Base_Start_IT+0x80>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1f      	ldr	r2, [pc, #124]	@ (80030a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00e      	beq.n	8003044 <HAL_TIM_Base_Start_IT+0x80>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1e      	ldr	r2, [pc, #120]	@ (80030a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d009      	beq.n	8003044 <HAL_TIM_Base_Start_IT+0x80>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1c      	ldr	r2, [pc, #112]	@ (80030a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d004      	beq.n	8003044 <HAL_TIM_Base_Start_IT+0x80>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1b      	ldr	r2, [pc, #108]	@ (80030ac <HAL_TIM_Base_Start_IT+0xe8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d115      	bne.n	8003070 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	4b19      	ldr	r3, [pc, #100]	@ (80030b0 <HAL_TIM_Base_Start_IT+0xec>)
 800304c:	4013      	ands	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b06      	cmp	r3, #6
 8003054:	d015      	beq.n	8003082 <HAL_TIM_Base_Start_IT+0xbe>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800305c:	d011      	beq.n	8003082 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0201 	orr.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306e:	e008      	b.n	8003082 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	e000      	b.n	8003084 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003082:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40010000 	.word	0x40010000
 8003098:	40000400 	.word	0x40000400
 800309c:	40000800 	.word	0x40000800
 80030a0:	40000c00 	.word	0x40000c00
 80030a4:	40010400 	.word	0x40010400
 80030a8:	40014000 	.word	0x40014000
 80030ac:	40001800 	.word	0x40001800
 80030b0:	00010007 	.word	0x00010007

080030b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d020      	beq.n	8003118 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01b      	beq.n	8003118 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0202 	mvn.w	r2, #2
 80030e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f8e9 	bl	80032d6 <HAL_TIM_IC_CaptureCallback>
 8003104:	e005      	b.n	8003112 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f8db 	bl	80032c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f8ec 	bl	80032ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	d020      	beq.n	8003164 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01b      	beq.n	8003164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0204 	mvn.w	r2, #4
 8003134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f8c3 	bl	80032d6 <HAL_TIM_IC_CaptureCallback>
 8003150:	e005      	b.n	800315e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f8b5 	bl	80032c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f8c6 	bl	80032ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d020      	beq.n	80031b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01b      	beq.n	80031b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0208 	mvn.w	r2, #8
 8003180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2204      	movs	r2, #4
 8003186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f89d 	bl	80032d6 <HAL_TIM_IC_CaptureCallback>
 800319c:	e005      	b.n	80031aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f88f 	bl	80032c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f8a0 	bl	80032ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d020      	beq.n	80031fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01b      	beq.n	80031fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0210 	mvn.w	r2, #16
 80031cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2208      	movs	r2, #8
 80031d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f877 	bl	80032d6 <HAL_TIM_IC_CaptureCallback>
 80031e8:	e005      	b.n	80031f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f869 	bl	80032c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f87a 	bl	80032ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00c      	beq.n	8003220 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d007      	beq.n	8003220 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0201 	mvn.w	r2, #1
 8003218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fd fb48 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003226:	2b00      	cmp	r3, #0
 8003228:	d104      	bne.n	8003234 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00c      	beq.n	800324e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f919 	bl	8003480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00c      	beq.n	8003272 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800326a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f911 	bl	8003494 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00c      	beq.n	8003296 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800328e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f834 	bl	80032fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00c      	beq.n	80032ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f06f 0220 	mvn.w	r2, #32
 80032b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f8d9 	bl	800346c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a46      	ldr	r2, [pc, #280]	@ (8003440 <TIM_Base_SetConfig+0x12c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d013      	beq.n	8003354 <TIM_Base_SetConfig+0x40>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003332:	d00f      	beq.n	8003354 <TIM_Base_SetConfig+0x40>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a43      	ldr	r2, [pc, #268]	@ (8003444 <TIM_Base_SetConfig+0x130>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00b      	beq.n	8003354 <TIM_Base_SetConfig+0x40>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a42      	ldr	r2, [pc, #264]	@ (8003448 <TIM_Base_SetConfig+0x134>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d007      	beq.n	8003354 <TIM_Base_SetConfig+0x40>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a41      	ldr	r2, [pc, #260]	@ (800344c <TIM_Base_SetConfig+0x138>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d003      	beq.n	8003354 <TIM_Base_SetConfig+0x40>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a40      	ldr	r2, [pc, #256]	@ (8003450 <TIM_Base_SetConfig+0x13c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d108      	bne.n	8003366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800335a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a35      	ldr	r2, [pc, #212]	@ (8003440 <TIM_Base_SetConfig+0x12c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d02b      	beq.n	80033c6 <TIM_Base_SetConfig+0xb2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003374:	d027      	beq.n	80033c6 <TIM_Base_SetConfig+0xb2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a32      	ldr	r2, [pc, #200]	@ (8003444 <TIM_Base_SetConfig+0x130>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d023      	beq.n	80033c6 <TIM_Base_SetConfig+0xb2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a31      	ldr	r2, [pc, #196]	@ (8003448 <TIM_Base_SetConfig+0x134>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01f      	beq.n	80033c6 <TIM_Base_SetConfig+0xb2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a30      	ldr	r2, [pc, #192]	@ (800344c <TIM_Base_SetConfig+0x138>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d01b      	beq.n	80033c6 <TIM_Base_SetConfig+0xb2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a2f      	ldr	r2, [pc, #188]	@ (8003450 <TIM_Base_SetConfig+0x13c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d017      	beq.n	80033c6 <TIM_Base_SetConfig+0xb2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a2e      	ldr	r2, [pc, #184]	@ (8003454 <TIM_Base_SetConfig+0x140>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d013      	beq.n	80033c6 <TIM_Base_SetConfig+0xb2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003458 <TIM_Base_SetConfig+0x144>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d00f      	beq.n	80033c6 <TIM_Base_SetConfig+0xb2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a2c      	ldr	r2, [pc, #176]	@ (800345c <TIM_Base_SetConfig+0x148>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00b      	beq.n	80033c6 <TIM_Base_SetConfig+0xb2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003460 <TIM_Base_SetConfig+0x14c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d007      	beq.n	80033c6 <TIM_Base_SetConfig+0xb2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a2a      	ldr	r2, [pc, #168]	@ (8003464 <TIM_Base_SetConfig+0x150>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d003      	beq.n	80033c6 <TIM_Base_SetConfig+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a29      	ldr	r2, [pc, #164]	@ (8003468 <TIM_Base_SetConfig+0x154>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d108      	bne.n	80033d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a10      	ldr	r2, [pc, #64]	@ (8003440 <TIM_Base_SetConfig+0x12c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d003      	beq.n	800340c <TIM_Base_SetConfig+0xf8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a12      	ldr	r2, [pc, #72]	@ (8003450 <TIM_Base_SetConfig+0x13c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d103      	bne.n	8003414 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b01      	cmp	r3, #1
 8003424:	d105      	bne.n	8003432 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f023 0201 	bic.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	611a      	str	r2, [r3, #16]
  }
}
 8003432:	bf00      	nop
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40010000 	.word	0x40010000
 8003444:	40000400 	.word	0x40000400
 8003448:	40000800 	.word	0x40000800
 800344c:	40000c00 	.word	0x40000c00
 8003450:	40010400 	.word	0x40010400
 8003454:	40014000 	.word	0x40014000
 8003458:	40014400 	.word	0x40014400
 800345c:	40014800 	.word	0x40014800
 8003460:	40001800 	.word	0x40001800
 8003464:	40001c00 	.word	0x40001c00
 8003468:	40002000 	.word	0x40002000

0800346c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e040      	b.n	800353c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd fae6 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2224      	movs	r2, #36	@ 0x24
 80034d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0201 	bic.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fa8c 	bl	8003a0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f825 	bl	8003544 <UART_SetConfig>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e01b      	b.n	800353c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003512:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003522:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fb0b 	bl	8003b50 <UART_CheckIdleState>
 800353a:	4603      	mov	r3, r0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4ba6      	ldr	r3, [pc, #664]	@ (8003808 <UART_SetConfig+0x2c4>)
 8003570:	4013      	ands	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	6979      	ldr	r1, [r7, #20]
 8003578:	430b      	orrs	r3, r1
 800357a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a94      	ldr	r2, [pc, #592]	@ (800380c <UART_SetConfig+0x2c8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d120      	bne.n	8003602 <UART_SetConfig+0xbe>
 80035c0:	4b93      	ldr	r3, [pc, #588]	@ (8003810 <UART_SetConfig+0x2cc>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d816      	bhi.n	80035fc <UART_SetConfig+0xb8>
 80035ce:	a201      	add	r2, pc, #4	@ (adr r2, 80035d4 <UART_SetConfig+0x90>)
 80035d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d4:	080035e5 	.word	0x080035e5
 80035d8:	080035f1 	.word	0x080035f1
 80035dc:	080035eb 	.word	0x080035eb
 80035e0:	080035f7 	.word	0x080035f7
 80035e4:	2301      	movs	r3, #1
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e150      	b.n	800388c <UART_SetConfig+0x348>
 80035ea:	2302      	movs	r3, #2
 80035ec:	77fb      	strb	r3, [r7, #31]
 80035ee:	e14d      	b.n	800388c <UART_SetConfig+0x348>
 80035f0:	2304      	movs	r3, #4
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	e14a      	b.n	800388c <UART_SetConfig+0x348>
 80035f6:	2308      	movs	r3, #8
 80035f8:	77fb      	strb	r3, [r7, #31]
 80035fa:	e147      	b.n	800388c <UART_SetConfig+0x348>
 80035fc:	2310      	movs	r3, #16
 80035fe:	77fb      	strb	r3, [r7, #31]
 8003600:	e144      	b.n	800388c <UART_SetConfig+0x348>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a83      	ldr	r2, [pc, #524]	@ (8003814 <UART_SetConfig+0x2d0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d132      	bne.n	8003672 <UART_SetConfig+0x12e>
 800360c:	4b80      	ldr	r3, [pc, #512]	@ (8003810 <UART_SetConfig+0x2cc>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b0c      	cmp	r3, #12
 8003618:	d828      	bhi.n	800366c <UART_SetConfig+0x128>
 800361a:	a201      	add	r2, pc, #4	@ (adr r2, 8003620 <UART_SetConfig+0xdc>)
 800361c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003620:	08003655 	.word	0x08003655
 8003624:	0800366d 	.word	0x0800366d
 8003628:	0800366d 	.word	0x0800366d
 800362c:	0800366d 	.word	0x0800366d
 8003630:	08003661 	.word	0x08003661
 8003634:	0800366d 	.word	0x0800366d
 8003638:	0800366d 	.word	0x0800366d
 800363c:	0800366d 	.word	0x0800366d
 8003640:	0800365b 	.word	0x0800365b
 8003644:	0800366d 	.word	0x0800366d
 8003648:	0800366d 	.word	0x0800366d
 800364c:	0800366d 	.word	0x0800366d
 8003650:	08003667 	.word	0x08003667
 8003654:	2300      	movs	r3, #0
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e118      	b.n	800388c <UART_SetConfig+0x348>
 800365a:	2302      	movs	r3, #2
 800365c:	77fb      	strb	r3, [r7, #31]
 800365e:	e115      	b.n	800388c <UART_SetConfig+0x348>
 8003660:	2304      	movs	r3, #4
 8003662:	77fb      	strb	r3, [r7, #31]
 8003664:	e112      	b.n	800388c <UART_SetConfig+0x348>
 8003666:	2308      	movs	r3, #8
 8003668:	77fb      	strb	r3, [r7, #31]
 800366a:	e10f      	b.n	800388c <UART_SetConfig+0x348>
 800366c:	2310      	movs	r3, #16
 800366e:	77fb      	strb	r3, [r7, #31]
 8003670:	e10c      	b.n	800388c <UART_SetConfig+0x348>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a68      	ldr	r2, [pc, #416]	@ (8003818 <UART_SetConfig+0x2d4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d120      	bne.n	80036be <UART_SetConfig+0x17a>
 800367c:	4b64      	ldr	r3, [pc, #400]	@ (8003810 <UART_SetConfig+0x2cc>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003682:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003686:	2b30      	cmp	r3, #48	@ 0x30
 8003688:	d013      	beq.n	80036b2 <UART_SetConfig+0x16e>
 800368a:	2b30      	cmp	r3, #48	@ 0x30
 800368c:	d814      	bhi.n	80036b8 <UART_SetConfig+0x174>
 800368e:	2b20      	cmp	r3, #32
 8003690:	d009      	beq.n	80036a6 <UART_SetConfig+0x162>
 8003692:	2b20      	cmp	r3, #32
 8003694:	d810      	bhi.n	80036b8 <UART_SetConfig+0x174>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <UART_SetConfig+0x15c>
 800369a:	2b10      	cmp	r3, #16
 800369c:	d006      	beq.n	80036ac <UART_SetConfig+0x168>
 800369e:	e00b      	b.n	80036b8 <UART_SetConfig+0x174>
 80036a0:	2300      	movs	r3, #0
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e0f2      	b.n	800388c <UART_SetConfig+0x348>
 80036a6:	2302      	movs	r3, #2
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e0ef      	b.n	800388c <UART_SetConfig+0x348>
 80036ac:	2304      	movs	r3, #4
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e0ec      	b.n	800388c <UART_SetConfig+0x348>
 80036b2:	2308      	movs	r3, #8
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e0e9      	b.n	800388c <UART_SetConfig+0x348>
 80036b8:	2310      	movs	r3, #16
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	e0e6      	b.n	800388c <UART_SetConfig+0x348>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a56      	ldr	r2, [pc, #344]	@ (800381c <UART_SetConfig+0x2d8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d120      	bne.n	800370a <UART_SetConfig+0x1c6>
 80036c8:	4b51      	ldr	r3, [pc, #324]	@ (8003810 <UART_SetConfig+0x2cc>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80036d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80036d4:	d013      	beq.n	80036fe <UART_SetConfig+0x1ba>
 80036d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80036d8:	d814      	bhi.n	8003704 <UART_SetConfig+0x1c0>
 80036da:	2b80      	cmp	r3, #128	@ 0x80
 80036dc:	d009      	beq.n	80036f2 <UART_SetConfig+0x1ae>
 80036de:	2b80      	cmp	r3, #128	@ 0x80
 80036e0:	d810      	bhi.n	8003704 <UART_SetConfig+0x1c0>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <UART_SetConfig+0x1a8>
 80036e6:	2b40      	cmp	r3, #64	@ 0x40
 80036e8:	d006      	beq.n	80036f8 <UART_SetConfig+0x1b4>
 80036ea:	e00b      	b.n	8003704 <UART_SetConfig+0x1c0>
 80036ec:	2300      	movs	r3, #0
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e0cc      	b.n	800388c <UART_SetConfig+0x348>
 80036f2:	2302      	movs	r3, #2
 80036f4:	77fb      	strb	r3, [r7, #31]
 80036f6:	e0c9      	b.n	800388c <UART_SetConfig+0x348>
 80036f8:	2304      	movs	r3, #4
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e0c6      	b.n	800388c <UART_SetConfig+0x348>
 80036fe:	2308      	movs	r3, #8
 8003700:	77fb      	strb	r3, [r7, #31]
 8003702:	e0c3      	b.n	800388c <UART_SetConfig+0x348>
 8003704:	2310      	movs	r3, #16
 8003706:	77fb      	strb	r3, [r7, #31]
 8003708:	e0c0      	b.n	800388c <UART_SetConfig+0x348>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a44      	ldr	r2, [pc, #272]	@ (8003820 <UART_SetConfig+0x2dc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d125      	bne.n	8003760 <UART_SetConfig+0x21c>
 8003714:	4b3e      	ldr	r3, [pc, #248]	@ (8003810 <UART_SetConfig+0x2cc>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800371e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003722:	d017      	beq.n	8003754 <UART_SetConfig+0x210>
 8003724:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003728:	d817      	bhi.n	800375a <UART_SetConfig+0x216>
 800372a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800372e:	d00b      	beq.n	8003748 <UART_SetConfig+0x204>
 8003730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003734:	d811      	bhi.n	800375a <UART_SetConfig+0x216>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <UART_SetConfig+0x1fe>
 800373a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800373e:	d006      	beq.n	800374e <UART_SetConfig+0x20a>
 8003740:	e00b      	b.n	800375a <UART_SetConfig+0x216>
 8003742:	2300      	movs	r3, #0
 8003744:	77fb      	strb	r3, [r7, #31]
 8003746:	e0a1      	b.n	800388c <UART_SetConfig+0x348>
 8003748:	2302      	movs	r3, #2
 800374a:	77fb      	strb	r3, [r7, #31]
 800374c:	e09e      	b.n	800388c <UART_SetConfig+0x348>
 800374e:	2304      	movs	r3, #4
 8003750:	77fb      	strb	r3, [r7, #31]
 8003752:	e09b      	b.n	800388c <UART_SetConfig+0x348>
 8003754:	2308      	movs	r3, #8
 8003756:	77fb      	strb	r3, [r7, #31]
 8003758:	e098      	b.n	800388c <UART_SetConfig+0x348>
 800375a:	2310      	movs	r3, #16
 800375c:	77fb      	strb	r3, [r7, #31]
 800375e:	e095      	b.n	800388c <UART_SetConfig+0x348>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a2f      	ldr	r2, [pc, #188]	@ (8003824 <UART_SetConfig+0x2e0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d125      	bne.n	80037b6 <UART_SetConfig+0x272>
 800376a:	4b29      	ldr	r3, [pc, #164]	@ (8003810 <UART_SetConfig+0x2cc>)
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003770:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003774:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003778:	d017      	beq.n	80037aa <UART_SetConfig+0x266>
 800377a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800377e:	d817      	bhi.n	80037b0 <UART_SetConfig+0x26c>
 8003780:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003784:	d00b      	beq.n	800379e <UART_SetConfig+0x25a>
 8003786:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800378a:	d811      	bhi.n	80037b0 <UART_SetConfig+0x26c>
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <UART_SetConfig+0x254>
 8003790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003794:	d006      	beq.n	80037a4 <UART_SetConfig+0x260>
 8003796:	e00b      	b.n	80037b0 <UART_SetConfig+0x26c>
 8003798:	2301      	movs	r3, #1
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	e076      	b.n	800388c <UART_SetConfig+0x348>
 800379e:	2302      	movs	r3, #2
 80037a0:	77fb      	strb	r3, [r7, #31]
 80037a2:	e073      	b.n	800388c <UART_SetConfig+0x348>
 80037a4:	2304      	movs	r3, #4
 80037a6:	77fb      	strb	r3, [r7, #31]
 80037a8:	e070      	b.n	800388c <UART_SetConfig+0x348>
 80037aa:	2308      	movs	r3, #8
 80037ac:	77fb      	strb	r3, [r7, #31]
 80037ae:	e06d      	b.n	800388c <UART_SetConfig+0x348>
 80037b0:	2310      	movs	r3, #16
 80037b2:	77fb      	strb	r3, [r7, #31]
 80037b4:	e06a      	b.n	800388c <UART_SetConfig+0x348>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003828 <UART_SetConfig+0x2e4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d138      	bne.n	8003832 <UART_SetConfig+0x2ee>
 80037c0:	4b13      	ldr	r3, [pc, #76]	@ (8003810 <UART_SetConfig+0x2cc>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80037ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037ce:	d017      	beq.n	8003800 <UART_SetConfig+0x2bc>
 80037d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037d4:	d82a      	bhi.n	800382c <UART_SetConfig+0x2e8>
 80037d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037da:	d00b      	beq.n	80037f4 <UART_SetConfig+0x2b0>
 80037dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037e0:	d824      	bhi.n	800382c <UART_SetConfig+0x2e8>
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <UART_SetConfig+0x2aa>
 80037e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ea:	d006      	beq.n	80037fa <UART_SetConfig+0x2b6>
 80037ec:	e01e      	b.n	800382c <UART_SetConfig+0x2e8>
 80037ee:	2300      	movs	r3, #0
 80037f0:	77fb      	strb	r3, [r7, #31]
 80037f2:	e04b      	b.n	800388c <UART_SetConfig+0x348>
 80037f4:	2302      	movs	r3, #2
 80037f6:	77fb      	strb	r3, [r7, #31]
 80037f8:	e048      	b.n	800388c <UART_SetConfig+0x348>
 80037fa:	2304      	movs	r3, #4
 80037fc:	77fb      	strb	r3, [r7, #31]
 80037fe:	e045      	b.n	800388c <UART_SetConfig+0x348>
 8003800:	2308      	movs	r3, #8
 8003802:	77fb      	strb	r3, [r7, #31]
 8003804:	e042      	b.n	800388c <UART_SetConfig+0x348>
 8003806:	bf00      	nop
 8003808:	efff69f3 	.word	0xefff69f3
 800380c:	40011000 	.word	0x40011000
 8003810:	40023800 	.word	0x40023800
 8003814:	40004400 	.word	0x40004400
 8003818:	40004800 	.word	0x40004800
 800381c:	40004c00 	.word	0x40004c00
 8003820:	40005000 	.word	0x40005000
 8003824:	40011400 	.word	0x40011400
 8003828:	40007800 	.word	0x40007800
 800382c:	2310      	movs	r3, #16
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e02c      	b.n	800388c <UART_SetConfig+0x348>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a72      	ldr	r2, [pc, #456]	@ (8003a00 <UART_SetConfig+0x4bc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d125      	bne.n	8003888 <UART_SetConfig+0x344>
 800383c:	4b71      	ldr	r3, [pc, #452]	@ (8003a04 <UART_SetConfig+0x4c0>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003842:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003846:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800384a:	d017      	beq.n	800387c <UART_SetConfig+0x338>
 800384c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003850:	d817      	bhi.n	8003882 <UART_SetConfig+0x33e>
 8003852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003856:	d00b      	beq.n	8003870 <UART_SetConfig+0x32c>
 8003858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800385c:	d811      	bhi.n	8003882 <UART_SetConfig+0x33e>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <UART_SetConfig+0x326>
 8003862:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003866:	d006      	beq.n	8003876 <UART_SetConfig+0x332>
 8003868:	e00b      	b.n	8003882 <UART_SetConfig+0x33e>
 800386a:	2300      	movs	r3, #0
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e00d      	b.n	800388c <UART_SetConfig+0x348>
 8003870:	2302      	movs	r3, #2
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e00a      	b.n	800388c <UART_SetConfig+0x348>
 8003876:	2304      	movs	r3, #4
 8003878:	77fb      	strb	r3, [r7, #31]
 800387a:	e007      	b.n	800388c <UART_SetConfig+0x348>
 800387c:	2308      	movs	r3, #8
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e004      	b.n	800388c <UART_SetConfig+0x348>
 8003882:	2310      	movs	r3, #16
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e001      	b.n	800388c <UART_SetConfig+0x348>
 8003888:	2310      	movs	r3, #16
 800388a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003894:	d15b      	bne.n	800394e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003896:	7ffb      	ldrb	r3, [r7, #31]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d828      	bhi.n	80038ee <UART_SetConfig+0x3aa>
 800389c:	a201      	add	r2, pc, #4	@ (adr r2, 80038a4 <UART_SetConfig+0x360>)
 800389e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a2:	bf00      	nop
 80038a4:	080038c9 	.word	0x080038c9
 80038a8:	080038d1 	.word	0x080038d1
 80038ac:	080038d9 	.word	0x080038d9
 80038b0:	080038ef 	.word	0x080038ef
 80038b4:	080038df 	.word	0x080038df
 80038b8:	080038ef 	.word	0x080038ef
 80038bc:	080038ef 	.word	0x080038ef
 80038c0:	080038ef 	.word	0x080038ef
 80038c4:	080038e7 	.word	0x080038e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038c8:	f7fe fed0 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 80038cc:	61b8      	str	r0, [r7, #24]
        break;
 80038ce:	e013      	b.n	80038f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038d0:	f7fe fee0 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 80038d4:	61b8      	str	r0, [r7, #24]
        break;
 80038d6:	e00f      	b.n	80038f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003a08 <UART_SetConfig+0x4c4>)
 80038da:	61bb      	str	r3, [r7, #24]
        break;
 80038dc:	e00c      	b.n	80038f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038de:	f7fe fdb3 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 80038e2:	61b8      	str	r0, [r7, #24]
        break;
 80038e4:	e008      	b.n	80038f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ea:	61bb      	str	r3, [r7, #24]
        break;
 80038ec:	e004      	b.n	80038f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	77bb      	strb	r3, [r7, #30]
        break;
 80038f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d074      	beq.n	80039e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	005a      	lsls	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	085b      	lsrs	r3, r3, #1
 8003908:	441a      	add	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003912:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	2b0f      	cmp	r3, #15
 8003918:	d916      	bls.n	8003948 <UART_SetConfig+0x404>
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003920:	d212      	bcs.n	8003948 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	b29b      	uxth	r3, r3
 8003926:	f023 030f 	bic.w	r3, r3, #15
 800392a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	085b      	lsrs	r3, r3, #1
 8003930:	b29b      	uxth	r3, r3
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	b29a      	uxth	r2, r3
 8003938:	89fb      	ldrh	r3, [r7, #14]
 800393a:	4313      	orrs	r3, r2
 800393c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	89fa      	ldrh	r2, [r7, #14]
 8003944:	60da      	str	r2, [r3, #12]
 8003946:	e04f      	b.n	80039e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	77bb      	strb	r3, [r7, #30]
 800394c:	e04c      	b.n	80039e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800394e:	7ffb      	ldrb	r3, [r7, #31]
 8003950:	2b08      	cmp	r3, #8
 8003952:	d828      	bhi.n	80039a6 <UART_SetConfig+0x462>
 8003954:	a201      	add	r2, pc, #4	@ (adr r2, 800395c <UART_SetConfig+0x418>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	08003981 	.word	0x08003981
 8003960:	08003989 	.word	0x08003989
 8003964:	08003991 	.word	0x08003991
 8003968:	080039a7 	.word	0x080039a7
 800396c:	08003997 	.word	0x08003997
 8003970:	080039a7 	.word	0x080039a7
 8003974:	080039a7 	.word	0x080039a7
 8003978:	080039a7 	.word	0x080039a7
 800397c:	0800399f 	.word	0x0800399f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003980:	f7fe fe74 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 8003984:	61b8      	str	r0, [r7, #24]
        break;
 8003986:	e013      	b.n	80039b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003988:	f7fe fe84 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 800398c:	61b8      	str	r0, [r7, #24]
        break;
 800398e:	e00f      	b.n	80039b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003990:	4b1d      	ldr	r3, [pc, #116]	@ (8003a08 <UART_SetConfig+0x4c4>)
 8003992:	61bb      	str	r3, [r7, #24]
        break;
 8003994:	e00c      	b.n	80039b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003996:	f7fe fd57 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 800399a:	61b8      	str	r0, [r7, #24]
        break;
 800399c:	e008      	b.n	80039b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800399e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039a2:	61bb      	str	r3, [r7, #24]
        break;
 80039a4:	e004      	b.n	80039b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	77bb      	strb	r3, [r7, #30]
        break;
 80039ae:	bf00      	nop
    }

    if (pclk != 0U)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d018      	beq.n	80039e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	085a      	lsrs	r2, r3, #1
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	441a      	add	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	2b0f      	cmp	r3, #15
 80039ce:	d909      	bls.n	80039e4 <UART_SetConfig+0x4a0>
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d6:	d205      	bcs.n	80039e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	b29a      	uxth	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60da      	str	r2, [r3, #12]
 80039e2:	e001      	b.n	80039e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80039f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3720      	adds	r7, #32
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40007c00 	.word	0x40007c00
 8003a04:	40023800 	.word	0x40023800
 8003a08:	00f42400 	.word	0x00f42400

08003a0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01a      	beq.n	8003b22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b0a:	d10a      	bne.n	8003b22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]
  }
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08c      	sub	sp, #48	@ 0x30
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b60:	f7fd f972 	bl	8000e48 <HAL_GetTick>
 8003b64:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d12e      	bne.n	8003bd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f83b 	bl	8003bfe <UART_WaitOnFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d021      	beq.n	8003bd2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	e853 3f00 	ldrex	r3, [r3]
 8003b9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ba2:	623b      	str	r3, [r7, #32]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	61fb      	str	r3, [r7, #28]
 8003bae:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb0:	69b9      	ldr	r1, [r7, #24]
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	e841 2300 	strex	r3, r2, [r1]
 8003bb8:	617b      	str	r3, [r7, #20]
   return(result);
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e6      	bne.n	8003b8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e011      	b.n	8003bf6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3728      	adds	r7, #40	@ 0x28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c0e:	e04f      	b.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c16:	d04b      	beq.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c18:	f7fd f916 	bl	8000e48 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d302      	bcc.n	8003c2e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e04e      	b.n	8003cd0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d037      	beq.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b80      	cmp	r3, #128	@ 0x80
 8003c44:	d034      	beq.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b40      	cmp	r3, #64	@ 0x40
 8003c4a:	d031      	beq.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d110      	bne.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2208      	movs	r2, #8
 8003c60:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f838 	bl	8003cd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2208      	movs	r2, #8
 8003c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e029      	b.n	8003cd0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c8a:	d111      	bne.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c94:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 f81e 	bl	8003cd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e00f      	b.n	8003cd0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69da      	ldr	r2, [r3, #28]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d0a0      	beq.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b095      	sub	sp, #84	@ 0x54
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cfe:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d00:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e6      	bne.n	8003ce0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3308      	adds	r3, #8
 8003d18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3308      	adds	r3, #8
 8003d30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e5      	bne.n	8003d12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d118      	bne.n	8003d80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	e853 3f00 	ldrex	r3, [r3]
 8003d5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f023 0310 	bic.w	r3, r3, #16
 8003d62:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6979      	ldr	r1, [r7, #20]
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	613b      	str	r3, [r7, #16]
   return(result);
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e6      	bne.n	8003d4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003d94:	bf00      	nop
 8003d96:	3754      	adds	r7, #84	@ 0x54
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003da0:	b084      	sub	sp, #16
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	f107 001c 	add.w	r0, r7, #28
 8003dae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003db2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d121      	bne.n	8003dfe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	4b21      	ldr	r3, [pc, #132]	@ (8003e50 <USB_CoreInit+0xb0>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003dde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d105      	bne.n	8003df2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fa92 	bl	800431c <USB_CoreReset>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	73fb      	strb	r3, [r7, #15]
 8003dfc:	e010      	b.n	8003e20 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fa86 	bl	800431c <USB_CoreReset>
 8003e10:	4603      	mov	r3, r0
 8003e12:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8003e20:	7fbb      	ldrb	r3, [r7, #30]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d10b      	bne.n	8003e3e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f043 0206 	orr.w	r2, r3, #6
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f043 0220 	orr.w	r2, r3, #32
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e4a:	b004      	add	sp, #16
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	ffbdffbf 	.word	0xffbdffbf

08003e54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f023 0201 	bic.w	r2, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d115      	bne.n	8003ec4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ea4:	200a      	movs	r0, #10
 8003ea6:	f7fc ffdb 	bl	8000e60 <HAL_Delay>
      ms += 10U;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	330a      	adds	r3, #10
 8003eae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 fa25 	bl	8004300 <USB_GetMode>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d01e      	beq.n	8003efa <USB_SetCurrentMode+0x84>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ec0:	d9f0      	bls.n	8003ea4 <USB_SetCurrentMode+0x2e>
 8003ec2:	e01a      	b.n	8003efa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d115      	bne.n	8003ef6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ed6:	200a      	movs	r0, #10
 8003ed8:	f7fc ffc2 	bl	8000e60 <HAL_Delay>
      ms += 10U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	330a      	adds	r3, #10
 8003ee0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fa0c 	bl	8004300 <USB_GetMode>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d005      	beq.n	8003efa <USB_SetCurrentMode+0x84>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ef2:	d9f0      	bls.n	8003ed6 <USB_SetCurrentMode+0x60>
 8003ef4:	e001      	b.n	8003efa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e005      	b.n	8003f06 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2bc8      	cmp	r3, #200	@ 0xc8
 8003efe:	d101      	bne.n	8003f04 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f10:	b084      	sub	sp, #16
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b086      	sub	sp, #24
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	e009      	b.n	8003f44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	3340      	adds	r3, #64	@ 0x40
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	3301      	adds	r3, #1
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b0e      	cmp	r3, #14
 8003f48:	d9f2      	bls.n	8003f30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f4a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d11c      	bne.n	8003f8c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f60:	f043 0302 	orr.w	r3, r3, #2
 8003f64:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	e005      	b.n	8003f98 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f90:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fa4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10d      	bne.n	8003fc8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d104      	bne.n	8003fbe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f968 	bl	800428c <USB_SetDevSpeed>
 8003fbc:	e008      	b.n	8003fd0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f963 	bl	800428c <USB_SetDevSpeed>
 8003fc6:	e003      	b.n	8003fd0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fc8:	2103      	movs	r1, #3
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f95e 	bl	800428c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fd0:	2110      	movs	r1, #16
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f8fa 	bl	80041cc <USB_FlushTxFifo>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f924 	bl	8004230 <USB_FlushRxFifo>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004004:	461a      	mov	r2, r3
 8004006:	2300      	movs	r3, #0
 8004008:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004010:	461a      	mov	r2, r3
 8004012:	2300      	movs	r3, #0
 8004014:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	e043      	b.n	80040a4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800402e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004032:	d118      	bne.n	8004066 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4413      	add	r3, r2
 8004042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004046:	461a      	mov	r2, r3
 8004048:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	e013      	b.n	8004078 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800405c:	461a      	mov	r2, r3
 800405e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	e008      	b.n	8004078 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004072:	461a      	mov	r2, r3
 8004074:	2300      	movs	r3, #0
 8004076:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004084:	461a      	mov	r2, r3
 8004086:	2300      	movs	r3, #0
 8004088:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004096:	461a      	mov	r2, r3
 8004098:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800409c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	3301      	adds	r3, #1
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80040a8:	461a      	mov	r2, r3
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d3b5      	bcc.n	800401c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	e043      	b.n	800413e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040cc:	d118      	bne.n	8004100 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e0:	461a      	mov	r2, r3
 80040e2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	e013      	b.n	8004112 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f6:	461a      	mov	r2, r3
 80040f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e008      	b.n	8004112 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800410c:	461a      	mov	r2, r3
 800410e:	2300      	movs	r3, #0
 8004110:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800411e:	461a      	mov	r2, r3
 8004120:	2300      	movs	r3, #0
 8004122:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004130:	461a      	mov	r2, r3
 8004132:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004136:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	3301      	adds	r3, #1
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004142:	461a      	mov	r2, r3
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4293      	cmp	r3, r2
 8004148:	d3b5      	bcc.n	80040b6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800415c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800416a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800416c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004170:	2b00      	cmp	r3, #0
 8004172:	d105      	bne.n	8004180 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f043 0210 	orr.w	r2, r3, #16
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699a      	ldr	r2, [r3, #24]
 8004184:	4b0f      	ldr	r3, [pc, #60]	@ (80041c4 <USB_DevInit+0x2b4>)
 8004186:	4313      	orrs	r3, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800418c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	f043 0208 	orr.w	r2, r3, #8
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d105      	bne.n	80041b4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699a      	ldr	r2, [r3, #24]
 80041ac:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <USB_DevInit+0x2b8>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041c0:	b004      	add	sp, #16
 80041c2:	4770      	bx	lr
 80041c4:	803c3800 	.word	0x803c3800
 80041c8:	40000004 	.word	0x40000004

080041cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3301      	adds	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041e6:	d901      	bls.n	80041ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e01b      	b.n	8004224 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	daf2      	bge.n	80041da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	019b      	lsls	r3, r3, #6
 80041fc:	f043 0220 	orr.w	r2, r3, #32
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3301      	adds	r3, #1
 8004208:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004210:	d901      	bls.n	8004216 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e006      	b.n	8004224 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b20      	cmp	r3, #32
 8004220:	d0f0      	beq.n	8004204 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3301      	adds	r3, #1
 8004240:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004248:	d901      	bls.n	800424e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e018      	b.n	8004280 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	daf2      	bge.n	800423c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2210      	movs	r2, #16
 800425e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	3301      	adds	r3, #1
 8004264:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800426c:	d901      	bls.n	8004272 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e006      	b.n	8004280 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	2b10      	cmp	r3, #16
 800427c:	d0f0      	beq.n	8004260 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	68f9      	ldr	r1, [r7, #12]
 80042a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042ac:	4313      	orrs	r3, r2
 80042ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80042be:	b480      	push	{r7}
 80042c0:	b085      	sub	sp, #20
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80042d8:	f023 0303 	bic.w	r3, r3, #3
 80042dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042ec:	f043 0302 	orr.w	r3, r3, #2
 80042f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f003 0301 	and.w	r3, r3, #1
}
 8004310:	4618      	mov	r0, r3
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3301      	adds	r3, #1
 800432c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004334:	d901      	bls.n	800433a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e01b      	b.n	8004372 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	daf2      	bge.n	8004328 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f043 0201 	orr.w	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3301      	adds	r3, #1
 8004356:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800435e:	d901      	bls.n	8004364 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e006      	b.n	8004372 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b01      	cmp	r3, #1
 800436e:	d0f0      	beq.n	8004352 <USB_CoreReset+0x36>

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800437e:	b480      	push	{r7}
 8004380:	b085      	sub	sp, #20
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	601a      	str	r2, [r3, #0]
}
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043c6:	b480      	push	{r7}
 80043c8:	b085      	sub	sp, #20
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6892      	ldr	r2, [r2, #8]
 80043dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6852      	ldr	r2, [r2, #4]
 80043e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d103      	bne.n	80043fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	1e5a      	subs	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004426:	4b50      	ldr	r3, [pc, #320]	@ (8004568 <xTaskIncrementTick+0x14c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f040 808b 	bne.w	8004546 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004430:	4b4e      	ldr	r3, [pc, #312]	@ (800456c <xTaskIncrementTick+0x150>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3301      	adds	r3, #1
 8004436:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004438:	4a4c      	ldr	r2, [pc, #304]	@ (800456c <xTaskIncrementTick+0x150>)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d123      	bne.n	800448c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8004444:	4b4a      	ldr	r3, [pc, #296]	@ (8004570 <xTaskIncrementTick+0x154>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00d      	beq.n	800446a <xTaskIncrementTick+0x4e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004452:	b672      	cpsid	i
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	b662      	cpsie	i
 8004462:	603b      	str	r3, [r7, #0]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop
 8004468:	e7fd      	b.n	8004466 <xTaskIncrementTick+0x4a>
 800446a:	4b41      	ldr	r3, [pc, #260]	@ (8004570 <xTaskIncrementTick+0x154>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	4b40      	ldr	r3, [pc, #256]	@ (8004574 <xTaskIncrementTick+0x158>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a3e      	ldr	r2, [pc, #248]	@ (8004570 <xTaskIncrementTick+0x154>)
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	4a3e      	ldr	r2, [pc, #248]	@ (8004574 <xTaskIncrementTick+0x158>)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	4b3e      	ldr	r3, [pc, #248]	@ (8004578 <xTaskIncrementTick+0x15c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3301      	adds	r3, #1
 8004484:	4a3c      	ldr	r2, [pc, #240]	@ (8004578 <xTaskIncrementTick+0x15c>)
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	f000 f8ea 	bl	8004660 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800448c:	4b3b      	ldr	r3, [pc, #236]	@ (800457c <xTaskIncrementTick+0x160>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	429a      	cmp	r2, r3
 8004494:	d348      	bcc.n	8004528 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004496:	4b36      	ldr	r3, [pc, #216]	@ (8004570 <xTaskIncrementTick+0x154>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044a0:	4b36      	ldr	r3, [pc, #216]	@ (800457c <xTaskIncrementTick+0x160>)
 80044a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044a6:	601a      	str	r2, [r3, #0]
					break;
 80044a8:	e03e      	b.n	8004528 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044aa:	4b31      	ldr	r3, [pc, #196]	@ (8004570 <xTaskIncrementTick+0x154>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d203      	bcs.n	80044ca <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044c2:	4a2e      	ldr	r2, [pc, #184]	@ (800457c <xTaskIncrementTick+0x160>)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044c8:	e02e      	b.n	8004528 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	3304      	adds	r3, #4
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff ff79 	bl	80043c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d004      	beq.n	80044e6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	3318      	adds	r3, #24
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff ff70 	bl	80043c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ea:	2201      	movs	r2, #1
 80044ec:	409a      	lsls	r2, r3
 80044ee:	4b24      	ldr	r3, [pc, #144]	@ (8004580 <xTaskIncrementTick+0x164>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	4a22      	ldr	r2, [pc, #136]	@ (8004580 <xTaskIncrementTick+0x164>)
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4a1f      	ldr	r2, [pc, #124]	@ (8004584 <xTaskIncrementTick+0x168>)
 8004506:	441a      	add	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	3304      	adds	r3, #4
 800450c:	4619      	mov	r1, r3
 800450e:	4610      	mov	r0, r2
 8004510:	f7ff ff35 	bl	800437e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004518:	4b1b      	ldr	r3, [pc, #108]	@ (8004588 <xTaskIncrementTick+0x16c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451e:	429a      	cmp	r2, r3
 8004520:	d3b9      	bcc.n	8004496 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8004522:	2301      	movs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004526:	e7b6      	b.n	8004496 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004528:	4b17      	ldr	r3, [pc, #92]	@ (8004588 <xTaskIncrementTick+0x16c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800452e:	4915      	ldr	r1, [pc, #84]	@ (8004584 <xTaskIncrementTick+0x168>)
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d907      	bls.n	8004550 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004540:	2301      	movs	r3, #1
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	e004      	b.n	8004550 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004546:	4b11      	ldr	r3, [pc, #68]	@ (800458c <xTaskIncrementTick+0x170>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3301      	adds	r3, #1
 800454c:	4a0f      	ldr	r2, [pc, #60]	@ (800458c <xTaskIncrementTick+0x170>)
 800454e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004550:	4b0f      	ldr	r3, [pc, #60]	@ (8004590 <xTaskIncrementTick+0x174>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004558:	2301      	movs	r3, #1
 800455a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800455c:	697b      	ldr	r3, [r7, #20]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000910 	.word	0x20000910
 800456c:	200008f8 	.word	0x200008f8
 8004570:	200008f0 	.word	0x200008f0
 8004574:	200008f4 	.word	0x200008f4
 8004578:	20000908 	.word	0x20000908
 800457c:	2000090c 	.word	0x2000090c
 8004580:	200008fc 	.word	0x200008fc
 8004584:	20000864 	.word	0x20000864
 8004588:	20000860 	.word	0x20000860
 800458c:	20000900 	.word	0x20000900
 8004590:	20000904 	.word	0x20000904

08004594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800459a:	4b2b      	ldr	r3, [pc, #172]	@ (8004648 <vTaskSwitchContext+0xb4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045a2:	4b2a      	ldr	r3, [pc, #168]	@ (800464c <vTaskSwitchContext+0xb8>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045a8:	e047      	b.n	800463a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80045aa:	4b28      	ldr	r3, [pc, #160]	@ (800464c <vTaskSwitchContext+0xb8>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b0:	4b27      	ldr	r3, [pc, #156]	@ (8004650 <vTaskSwitchContext+0xbc>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	fab3 f383 	clz	r3, r3
 80045bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80045be:	7afb      	ldrb	r3, [r7, #11]
 80045c0:	f1c3 031f 	rsb	r3, r3, #31
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	4923      	ldr	r1, [pc, #140]	@ (8004654 <vTaskSwitchContext+0xc0>)
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10d      	bne.n	80045f6 <vTaskSwitchContext+0x62>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045de:	b672      	cpsid	i
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	b662      	cpsie	i
 80045ee:	607b      	str	r3, [r7, #4]
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	e7fd      	b.n	80045f2 <vTaskSwitchContext+0x5e>
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4a14      	ldr	r2, [pc, #80]	@ (8004654 <vTaskSwitchContext+0xc0>)
 8004602:	4413      	add	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	3308      	adds	r3, #8
 8004618:	429a      	cmp	r2, r3
 800461a:	d104      	bne.n	8004626 <vTaskSwitchContext+0x92>
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	605a      	str	r2, [r3, #4]
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	4a0a      	ldr	r2, [pc, #40]	@ (8004658 <vTaskSwitchContext+0xc4>)
 800462e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004630:	4b09      	ldr	r3, [pc, #36]	@ (8004658 <vTaskSwitchContext+0xc4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	334c      	adds	r3, #76	@ 0x4c
 8004636:	4a09      	ldr	r2, [pc, #36]	@ (800465c <vTaskSwitchContext+0xc8>)
 8004638:	6013      	str	r3, [r2, #0]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000910 	.word	0x20000910
 800464c:	20000904 	.word	0x20000904
 8004650:	200008fc 	.word	0x200008fc
 8004654:	20000864 	.word	0x20000864
 8004658:	20000860 	.word	0x20000860
 800465c:	2000000c 	.word	0x2000000c

08004660 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004666:	4b0c      	ldr	r3, [pc, #48]	@ (8004698 <prvResetNextTaskUnblockTime+0x38>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d104      	bne.n	800467a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004670:	4b0a      	ldr	r3, [pc, #40]	@ (800469c <prvResetNextTaskUnblockTime+0x3c>)
 8004672:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004676:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004678:	e008      	b.n	800468c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800467a:	4b07      	ldr	r3, [pc, #28]	@ (8004698 <prvResetNextTaskUnblockTime+0x38>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	4a04      	ldr	r2, [pc, #16]	@ (800469c <prvResetNextTaskUnblockTime+0x3c>)
 800468a:	6013      	str	r3, [r2, #0]
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	200008f0 	.word	0x200008f0
 800469c:	2000090c 	.word	0x2000090c

080046a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046a0:	4b07      	ldr	r3, [pc, #28]	@ (80046c0 <pxCurrentTCBConst2>)
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	6808      	ldr	r0, [r1, #0]
 80046a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046aa:	f380 8809 	msr	PSP, r0
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f04f 0000 	mov.w	r0, #0
 80046b6:	f380 8811 	msr	BASEPRI, r0
 80046ba:	4770      	bx	lr
 80046bc:	f3af 8000 	nop.w

080046c0 <pxCurrentTCBConst2>:
 80046c0:	20000860 	.word	0x20000860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop
	...

080046d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046d0:	f3ef 8009 	mrs	r0, PSP
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	4b15      	ldr	r3, [pc, #84]	@ (8004730 <pxCurrentTCBConst>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	f01e 0f10 	tst.w	lr, #16
 80046e0:	bf08      	it	eq
 80046e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ea:	6010      	str	r0, [r2, #0]
 80046ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80046f4:	b672      	cpsid	i
 80046f6:	f380 8811 	msr	BASEPRI, r0
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	b662      	cpsie	i
 8004704:	f7ff ff46 	bl	8004594 <vTaskSwitchContext>
 8004708:	f04f 0000 	mov.w	r0, #0
 800470c:	f380 8811 	msr	BASEPRI, r0
 8004710:	bc09      	pop	{r0, r3}
 8004712:	6819      	ldr	r1, [r3, #0]
 8004714:	6808      	ldr	r0, [r1, #0]
 8004716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471a:	f01e 0f10 	tst.w	lr, #16
 800471e:	bf08      	it	eq
 8004720:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004724:	f380 8809 	msr	PSP, r0
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop

08004730 <pxCurrentTCBConst>:
 8004730:	20000860 	.word	0x20000860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop

08004738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004742:	b672      	cpsid	i
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	b662      	cpsie	i
 8004752:	607b      	str	r3, [r7, #4]
}
 8004754:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004756:	f7ff fe61 	bl	800441c <xTaskIncrementTick>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004760:	4b06      	ldr	r3, [pc, #24]	@ (800477c <SysTick_Handler+0x44>)
 8004762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	2300      	movs	r3, #0
 800476a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004772:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004774:	bf00      	nop
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	e000ed04 	.word	0xe000ed04

08004780 <memset>:
 8004780:	4402      	add	r2, r0
 8004782:	4603      	mov	r3, r0
 8004784:	4293      	cmp	r3, r2
 8004786:	d100      	bne.n	800478a <memset+0xa>
 8004788:	4770      	bx	lr
 800478a:	f803 1b01 	strb.w	r1, [r3], #1
 800478e:	e7f9      	b.n	8004784 <memset+0x4>

08004790 <__libc_init_array>:
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	4d0d      	ldr	r5, [pc, #52]	@ (80047c8 <__libc_init_array+0x38>)
 8004794:	4c0d      	ldr	r4, [pc, #52]	@ (80047cc <__libc_init_array+0x3c>)
 8004796:	1b64      	subs	r4, r4, r5
 8004798:	10a4      	asrs	r4, r4, #2
 800479a:	2600      	movs	r6, #0
 800479c:	42a6      	cmp	r6, r4
 800479e:	d109      	bne.n	80047b4 <__libc_init_array+0x24>
 80047a0:	4d0b      	ldr	r5, [pc, #44]	@ (80047d0 <__libc_init_array+0x40>)
 80047a2:	4c0c      	ldr	r4, [pc, #48]	@ (80047d4 <__libc_init_array+0x44>)
 80047a4:	f000 f818 	bl	80047d8 <_init>
 80047a8:	1b64      	subs	r4, r4, r5
 80047aa:	10a4      	asrs	r4, r4, #2
 80047ac:	2600      	movs	r6, #0
 80047ae:	42a6      	cmp	r6, r4
 80047b0:	d105      	bne.n	80047be <__libc_init_array+0x2e>
 80047b2:	bd70      	pop	{r4, r5, r6, pc}
 80047b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b8:	4798      	blx	r3
 80047ba:	3601      	adds	r6, #1
 80047bc:	e7ee      	b.n	800479c <__libc_init_array+0xc>
 80047be:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c2:	4798      	blx	r3
 80047c4:	3601      	adds	r6, #1
 80047c6:	e7f2      	b.n	80047ae <__libc_init_array+0x1e>
 80047c8:	08004810 	.word	0x08004810
 80047cc:	08004810 	.word	0x08004810
 80047d0:	08004810 	.word	0x08004810
 80047d4:	08004814 	.word	0x08004814

080047d8 <_init>:
 80047d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047da:	bf00      	nop
 80047dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047de:	bc08      	pop	{r3}
 80047e0:	469e      	mov	lr, r3
 80047e2:	4770      	bx	lr

080047e4 <_fini>:
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	bf00      	nop
 80047e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ea:	bc08      	pop	{r3}
 80047ec:	469e      	mov	lr, r3
 80047ee:	4770      	bx	lr
